
Nucleo-L432KC-SensorFusionMPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e170  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  0800e300  0800e300  0001e300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed64  0800ed64  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed64  0800ed64  0001ed64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed6c  0800ed6c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed6c  0800ed6c  0001ed6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed70  0800ed70  0001ed70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ed74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  200001e0  0800ef54  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ed4  0800ef54  00021ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c83  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ac  00000000  00000000  00042e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00047340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a78  00000000  00000000  00048f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d7e  00000000  00000000  0004a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020923  00000000  00000000  0006f776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9b83  00000000  00000000  00090099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b90  00000000  00000000  00169c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e2e8 	.word	0x0800e2e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e2e8 	.word	0x0800e2e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <CompFilterRollPitch_Init>:
#include "CompFilterRollPitch.h"

void CompFilterRollPitch_Init(CompFilterRollPitch *filt, float comp_alpha, float sample_time_ms, float lpf_acc_alpha, float lpf_gyr_alpha)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6178      	str	r0, [r7, #20]
 8000eb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ebc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ec0:	edc7 1a01 	vstr	s3, [r7, #4]
	// Set struct parameters
	filt->comp_alpha = comp_alpha;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]
	filt->sample_time_ms = sample_time_ms;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	605a      	str	r2, [r3, #4]
	filt->roll_rad = 0.0f;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	filt->pitch_rad = 0.0f;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]

	// Initialize First Order IIR filters for XL and gyro
	FirstOrderIIR_Init(&filt->lpf_acc[0], lpf_acc_alpha);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f921 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_acc[1], lpf_acc_alpha);
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3318      	adds	r3, #24
 8000ef2:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f91a 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_acc[2], lpf_acc_alpha);
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3320      	adds	r3, #32
 8000f00:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f913 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_gyr[0], lpf_gyr_alpha);
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3328      	adds	r3, #40	; 0x28
 8000f0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f90c 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_gyr[1], lpf_gyr_alpha);
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3330      	adds	r3, #48	; 0x30
 8000f1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f905 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_gyr[2], lpf_gyr_alpha);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3338      	adds	r3, #56	; 0x38
 8000f2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8fe 	bl	8001130 <FirstOrderIIR_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <CompFilterRollPitch_Update>:

void CompFilterRollPitch_Update(CompFilterRollPitch *filt, float *acc_mps2, float *gyr_rps)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	ed2d 8b02 	vpush	{d8}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	// Filter XL and Gyro measurements
	for (uint8_t i = 0; i < 3; i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f52:	e028      	b.n	8000fa6 <CompFilterRollPitch_Update+0x6a>
	{
		FirstOrderIIR_Update(&filt->lpf_acc[i], acc_mps2[i]);
 8000f54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f58:	3302      	adds	r3, #2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	18d1      	adds	r1, r2, r3
 8000f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	4413      	add	r3, r2
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	4608      	mov	r0, r1
 8000f74:	f000 f908 	bl	8001188 <FirstOrderIIR_Update>
		FirstOrderIIR_Update(&filt->lpf_gyr[i], gyr_rps[i]);
 8000f78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f7c:	3305      	adds	r3, #5
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	18d1      	adds	r1, r2, r3
 8000f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	4608      	mov	r0, r1
 8000f98:	f000 f8f6 	bl	8001188 <FirstOrderIIR_Update>
	for (uint8_t i = 0; i < 3; i++)
 8000f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000fa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d9d2      	bls.n	8000f54 <CompFilterRollPitch_Update+0x18>
	}

	float ax_mps2 = filt->lpf_acc[0].out;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
	float ay_mps2 = filt->lpf_acc[1].out;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float az_mps2 = filt->lpf_acc[2].out;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
	float p_rps   = filt->lpf_gyr[0].out;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
	float q_rps   = filt->lpf_gyr[1].out;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
	float r_rps   = filt->lpf_gyr[2].out;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Estimate angles using filtered XL measurements (units cancel out)
	float roll_acc_rad  = atan2f(ay_mps2 , az_mps2);
 8000fd2:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8000fd6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8000fda:	f00c f929 	bl	800d230 <atan2f>
 8000fde:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float pitch_acc_rad =  asinf(ax_mps2 / 1.0f);
 8000fe2:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8000fe6:	f00c f8f7 	bl	800d1d8 <asinf>
 8000fea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
//	float pitch_acc_rad =  asinf(ax_mps2 / G_MPS2);

	// Transform body rates to Euler rates (gyro units need to be in radians per second)
	float roll_dot_rad  = p_rps + tanf(filt->pitch_rad) * (sinf(filt->roll_rad) * q_rps + cosf(filt->roll_rad) * r_rps);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	f00c f8c2 	bl	800d180 <tanf>
 8000ffc:	eef0 8a40 	vmov.f32	s17, s0
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	edd3 7a02 	vldr	s15, [r3, #8]
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	f00c f873 	bl	800d0f4 <sinf>
 800100e:	eeb0 7a40 	vmov.f32	s14, s0
 8001012:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001016:	ee27 8a27 	vmul.f32	s16, s14, s15
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	f00c f822 	bl	800d06c <cosf>
 8001028:	eeb0 7a40 	vmov.f32	s14, s0
 800102c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001038:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800103c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	edc7 7a08 	vstr	s15, [r7, #32]
	float pitch_dot_rad = 																 cosf(filt->roll_rad) * q_rps - sinf(filt->roll_rad) * r_rps;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	edd3 7a02 	vldr	s15, [r3, #8]
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	f00c f80b 	bl	800d06c <cosf>
 8001056:	eeb0 7a40 	vmov.f32	s14, s0
 800105a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800105e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	edd3 7a02 	vldr	s15, [r3, #8]
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	f00c f842 	bl	800d0f4 <sinf>
 8001070:	eeb0 7a40 	vmov.f32	s14, s0
 8001074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001080:	edc7 7a07 	vstr	s15, [r7, #28]

	// Combine XL estimates with integral of gyro estimates to get roll and pitch estimates
	float roll_rad  = 				filt->comp_alpha  *  roll_acc_rad
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800108e:	ee27 7a27 	vmul.f32	s14, s14, s15
									+ (1.0f - filt->comp_alpha) * (filt->roll_rad  + (filt->sample_time_ms / 1000.0f) * roll_dot_rad);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800109c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	ed93 6a02 	vldr	s12, [r3, #8]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ac:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800112c <CompFilterRollPitch_Update+0x1f0>
 80010b0:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80010b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80010c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float roll_rad  = 				filt->comp_alpha  *  roll_acc_rad
 80010c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c8:	edc7 7a06 	vstr	s15, [r7, #24]

	float pitch_rad = 				filt->comp_alpha  *  pitch_acc_rad
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
									+ (1.0f - filt->comp_alpha) * (filt->pitch_rad + (filt->sample_time_ms / 1000.0f) * pitch_dot_rad);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	ed93 6a03 	vldr	s12, [r3, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f4:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 800112c <CompFilterRollPitch_Update+0x1f0>
 80010f8:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80010fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001100:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001104:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float pitch_rad = 				filt->comp_alpha  *  pitch_acc_rad
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	edc7 7a05 	vstr	s15, [r7, #20]

	filt->roll_rad  = roll_rad;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]
	filt->pitch_rad = pitch_rad;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	60da      	str	r2, [r3, #12]
}
 8001120:	bf00      	nop
 8001122:	3748      	adds	r7, #72	; 0x48
 8001124:	46bd      	mov	sp, r7
 8001126:	ecbd 8b02 	vpop	{d8}
 800112a:	bd80      	pop	{r7, pc}
 800112c:	447a0000 	.word	0x447a0000

08001130 <FirstOrderIIR_Init>:
#include "FirstOrderIIR.h"

void FirstOrderIIR_Init(FirstOrderIIR *filt, float alpha)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	ed87 0a00 	vstr	s0, [r7]
	// Check filter coefficient bounds and store
	filt->alpha = alpha;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	601a      	str	r2, [r3, #0]
	if (alpha < 0.0f)
 8001142:	edd7 7a00 	vldr	s15, [r7]
 8001146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d504      	bpl.n	800115a <FirstOrderIIR_Init+0x2a>
		filt->alpha = 0.0f;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e00c      	b.n	8001174 <FirstOrderIIR_Init+0x44>
	else if (alpha > 1.0f)
 800115a:	edd7 7a00 	vldr	s15, [r7]
 800115e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	dd03      	ble.n	8001174 <FirstOrderIIR_Init+0x44>
		filt->alpha = 1.0f;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001172:	601a      	str	r2, [r3, #0]

	// Clear output
	filt->out = 0.0f;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <FirstOrderIIR_Update>:

float FirstOrderIIR_Update(FirstOrderIIR *filt, float input)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	ed87 0a00 	vstr	s0, [r7]
	// Update filter output based on last output and new input
	// Vout[n] = (1 - alpha) * Vin[n] + alpha * Vout[n - 1]
	filt->out = (1.0f - filt->alpha) * input + filt->alpha * filt->out;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800119e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a2:	edd7 7a00 	vldr	s15, [r7]
 80011a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 6a00 	vldr	s13, [r3]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edc3 7a01 	vstr	s15, [r3, #4]

	// Return new filter output
	return filt->out;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	ee07 3a90 	vmov	s15, r3
}
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <MPU6050_Init>:
#define G_MPS2											9.80665f
#define DEFAULT_ACC_SCALE_LSB_G			16384.0f
#define DEFAULT_GYR_SCALE_LSB_DPS		131.0f

uint8_t MPU6050_Init(MPU6050 *imu, I2C_HandleTypeDef *i2c_handle, uint8_t AD0_Pin_Value)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af04      	add	r7, sp, #16
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4613      	mov	r3, r2
 80011e8:	71fb      	strb	r3, [r7, #7]
	/* Set Struct Parameters */

	// I2C
	imu->i2c_handle = i2c_handle;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	601a      	str	r2, [r3, #0]
	imu->device_addr = AD0_Pin_Value ? MPU6050_I2C_ADDR_AD0_1 : MPU6050_I2C_ADDR_AD0_0;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MPU6050_Init+0x1e>
 80011f6:	22d2      	movs	r2, #210	; 0xd2
 80011f8:	e000      	b.n	80011fc <MPU6050_Init+0x20>
 80011fa:	22d0      	movs	r2, #208	; 0xd0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	711a      	strb	r2, [r3, #4]

	// DMA
	for (uint8_t i = 0; i < 14; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e007      	b.n	8001216 <MPU6050_Init+0x3a>
	{
		imu->rx_buf[i] = 0;
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	2200      	movs	r2, #0
 800120e:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 14; i++)
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	3301      	adds	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b0d      	cmp	r3, #13
 800121a:	d9f4      	bls.n	8001206 <MPU6050_Init+0x2a>
	}
	imu->dma_rx_flag = 0;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	74da      	strb	r2, [r3, #19]
	imu->data_ready_flag = 0;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	751a      	strb	r2, [r3, #20]
	imu->success_flag = 1;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2201      	movs	r2, #1
 800122c:	755a      	strb	r2, [r3, #21]

	// XL data in m/s^2
	imu->acc_mps2[0] = 0.0f;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
	imu->acc_mps2[1] = 0.0f;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
	imu->acc_mps2[2] = 0.0f;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	621a      	str	r2, [r3, #32]

	// XL sensitivity according to datasheet in +/-2g range is 16384 LSB/g

	// Board 1 coefficients
	imu->acc_scale[0] = 0.9949237f;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4aa2      	ldr	r2, [pc, #648]	; (80014d4 <MPU6050_Init+0x2f8>)
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
	imu->acc_scale[1] = 0.9988063f;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4aa2      	ldr	r2, [pc, #648]	; (80014d8 <MPU6050_Init+0x2fc>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
	imu->acc_scale[2] = 0.9943320f;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4aa1      	ldr	r2, [pc, #644]	; (80014dc <MPU6050_Init+0x300>)
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
	imu->acc_bias[0]  = -6.5000024f;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4aa1      	ldr	r2, [pc, #644]	; (80014e0 <MPU6050_Init+0x304>)
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
	imu->acc_bias[1]  = -67.4999988f;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4aa0      	ldr	r2, [pc, #640]	; (80014e4 <MPU6050_Init+0x308>)
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
	imu->acc_bias[2]  = -531.5000136f;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4aa0      	ldr	r2, [pc, #640]	; (80014e8 <MPU6050_Init+0x30c>)
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
	imu->acc_yz_rot   = 0.0003194f;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4a9f      	ldr	r2, [pc, #636]	; (80014ec <MPU6050_Init+0x310>)
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c
	imu->acc_zy_rot   = -0.0021295f;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4a9f      	ldr	r2, [pc, #636]	; (80014f0 <MPU6050_Init+0x314>)
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
	imu->acc_zx_rot   = 0.0064480f;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4a9e      	ldr	r2, [pc, #632]	; (80014f4 <MPU6050_Init+0x318>)
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
//	imu->acc_yz_rot   = 0.0003194f;
//	imu->acc_zy_rot   = -0.0021295f;
//	imu->acc_zx_rot   = 0.0064480f;

	// Temperature data
	imu->temp_C = 0.0f;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	649a      	str	r2, [r3, #72]	; 0x48

	// Gyro data in rps
	imu->gyr_rps[0] = 0.0f;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	64da      	str	r2, [r3, #76]	; 0x4c
	imu->gyr_rps[1] = 0.0f;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	651a      	str	r2, [r3, #80]	; 0x50
	imu->gyr_rps[2] = 0.0f;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	655a      	str	r2, [r3, #84]	; 0x54

	// Gyro sensitivity according to datasheet in +/-250dps range is 131 LSB/dps
	imu->gyr_scale[0] = 1.0f;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012a2:	659a      	str	r2, [r3, #88]	; 0x58
	imu->gyr_scale[1] = 1.0f;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012aa:	65da      	str	r2, [r3, #92]	; 0x5c
	imu->gyr_scale[2] = 1.0f;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012b2:	661a      	str	r2, [r3, #96]	; 0x60
	imu->gyr_bias[0]  = 0.0f;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	665a      	str	r2, [r3, #100]	; 0x64
	imu->gyr_bias[1]  = 0.0f;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	669a      	str	r2, [r3, #104]	; 0x68
	imu->gyr_bias[2]  = 0.0f;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	66da      	str	r2, [r3, #108]	; 0x6c
	/* Check WHO_AM_I ID */

	HAL_StatusTypeDef status;
	uint8_t write_data;

	status = HAL_I2C_Mem_Read(imu->i2c_handle, imu->device_addr, MPU6050_REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, imu->rx_buf, 1, HAL_MAX_DELAY);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	b299      	uxth	r1, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3305      	adds	r3, #5
 80012da:	f04f 32ff 	mov.w	r2, #4294967295
 80012de:	9202      	str	r2, [sp, #8]
 80012e0:	2201      	movs	r2, #1
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	2275      	movs	r2, #117	; 0x75
 80012ea:	f001 ffcb 	bl	8003284 <HAL_I2C_Mem_Read>
 80012ee:	4603      	mov	r3, r0
 80012f0:	75bb      	strb	r3, [r7, #22]
	while (HAL_I2C_IsDeviceReady(imu->i2c_handle, imu->device_addr, 1, HAL_MAX_DELAY) != HAL_OK);
 80012f2:	bf00      	nop
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	b299      	uxth	r1, r3
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	2201      	movs	r2, #1
 8001304:	f002 f9be 	bl	8003684 <HAL_I2C_IsDeviceReady>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f2      	bne.n	80012f4 <MPU6050_Init+0x118>
	HAL_Delay(10);
 800130e:	200a      	movs	r0, #10
 8001310:	f001 f914 	bl	800253c <HAL_Delay>

	if(status != HAL_OK)
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d008      	beq.n	800132c <MPU6050_Init+0x150>
	{
		UART_println(&uart, "WHO_AM_I Read Failed.");
 800131a:	4977      	ldr	r1, [pc, #476]	; (80014f8 <MPU6050_Init+0x31c>)
 800131c:	4877      	ldr	r0, [pc, #476]	; (80014fc <MPU6050_Init+0x320>)
 800131e:	f000 fa7d 	bl	800181c <UART_println>
		imu->success_flag = 0;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	755a      	strb	r2, [r3, #21]
		return 255; // TODO return err_num?
 8001328:	23ff      	movs	r3, #255	; 0xff
 800132a:	e0cf      	b.n	80014cc <MPU6050_Init+0x2f0>
	}

	if (!(imu->rx_buf[0] == MPU6050_WHO_AM_I_ID || imu->rx_buf[0] == MPU6050_WHO_AM_I_ID_ALT))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	795b      	ldrb	r3, [r3, #5]
 8001330:	2b68      	cmp	r3, #104	; 0x68
 8001332:	d00c      	beq.n	800134e <MPU6050_Init+0x172>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	795b      	ldrb	r3, [r3, #5]
 8001338:	2b72      	cmp	r3, #114	; 0x72
 800133a:	d008      	beq.n	800134e <MPU6050_Init+0x172>
	{
		UART_println(&uart, "WHO_AM_I ID Check Failed.");
 800133c:	4970      	ldr	r1, [pc, #448]	; (8001500 <MPU6050_Init+0x324>)
 800133e:	486f      	ldr	r0, [pc, #444]	; (80014fc <MPU6050_Init+0x320>)
 8001340:	f000 fa6c 	bl	800181c <UART_println>
		imu->success_flag = 0;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	755a      	strb	r2, [r3, #21]
		return 255; // TODO return err_num?
 800134a:	23ff      	movs	r3, #255	; 0xff
 800134c:	e0be      	b.n	80014cc <MPU6050_Init+0x2f0>
	}

	/* Register Setup */

	write_data = 0x02;
 800134e:	2302      	movs	r3, #2
 8001350:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Mem_Write(imu->i2c_handle, imu->device_addr, MPU6050_REG_CONFIG, I2C_MEMADD_SIZE_8BIT, &write_data, 1, HAL_MAX_DELAY);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	791b      	ldrb	r3, [r3, #4]
 800135a:	b299      	uxth	r1, r3
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2301      	movs	r3, #1
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 0315 	add.w	r3, r7, #21
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	221a      	movs	r2, #26
 8001370:	f001 fe74 	bl	800305c <HAL_I2C_Mem_Write>
 8001374:	4603      	mov	r3, r0
 8001376:	75bb      	strb	r3, [r7, #22]
	while (HAL_I2C_IsDeviceReady(imu->i2c_handle, imu->device_addr, 1, HAL_MAX_DELAY) != HAL_OK);
 8001378:	bf00      	nop
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	791b      	ldrb	r3, [r3, #4]
 8001382:	b299      	uxth	r1, r3
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	2201      	movs	r2, #1
 800138a:	f002 f97b 	bl	8003684 <HAL_I2C_IsDeviceReady>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f2      	bne.n	800137a <MPU6050_Init+0x19e>
	if (status != HAL_OK)
 8001394:	7dbb      	ldrb	r3, [r7, #22]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <MPU6050_Init+0x1c4>
		imu->success_flag = 0;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	755a      	strb	r2, [r3, #21]
	HAL_Delay(5);
 80013a0:	2005      	movs	r0, #5
 80013a2:	f001 f8cb 	bl	800253c <HAL_Delay>

	write_data = 0x10;
 80013a6:	2310      	movs	r3, #16
 80013a8:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Mem_Write(imu->i2c_handle, imu->device_addr, MPU6050_REG_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &write_data, 1, HAL_MAX_DELAY);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	791b      	ldrb	r3, [r3, #4]
 80013b2:	b299      	uxth	r1, r3
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	f107 0315 	add.w	r3, r7, #21
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	2237      	movs	r2, #55	; 0x37
 80013c8:	f001 fe48 	bl	800305c <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	75bb      	strb	r3, [r7, #22]
	while (HAL_I2C_IsDeviceReady(imu->i2c_handle, imu->device_addr, 1, HAL_MAX_DELAY) != HAL_OK);
 80013d0:	bf00      	nop
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	b299      	uxth	r1, r3
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	2201      	movs	r2, #1
 80013e2:	f002 f94f 	bl	8003684 <HAL_I2C_IsDeviceReady>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f2      	bne.n	80013d2 <MPU6050_Init+0x1f6>
	if (status != HAL_OK)
 80013ec:	7dbb      	ldrb	r3, [r7, #22]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <MPU6050_Init+0x21c>
		imu->success_flag = 0;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	755a      	strb	r2, [r3, #21]
	HAL_Delay(5);
 80013f8:	2005      	movs	r0, #5
 80013fa:	f001 f89f 	bl	800253c <HAL_Delay>

	write_data = 0x01;
 80013fe:	2301      	movs	r3, #1
 8001400:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Mem_Write(imu->i2c_handle, imu->device_addr, MPU6050_REG_INT_ENABLE, I2C_MEMADD_SIZE_8BIT, &write_data, 1, HAL_MAX_DELAY);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	b299      	uxth	r1, r3
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2301      	movs	r3, #1
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	f107 0315 	add.w	r3, r7, #21
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	2238      	movs	r2, #56	; 0x38
 8001420:	f001 fe1c 	bl	800305c <HAL_I2C_Mem_Write>
 8001424:	4603      	mov	r3, r0
 8001426:	75bb      	strb	r3, [r7, #22]
	while (HAL_I2C_IsDeviceReady(imu->i2c_handle, imu->device_addr, 1, HAL_MAX_DELAY) != HAL_OK);
 8001428:	bf00      	nop
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	b299      	uxth	r1, r3
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2201      	movs	r2, #1
 800143a:	f002 f923 	bl	8003684 <HAL_I2C_IsDeviceReady>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f2      	bne.n	800142a <MPU6050_Init+0x24e>
	if (status != HAL_OK)
 8001444:	7dbb      	ldrb	r3, [r7, #22]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <MPU6050_Init+0x274>
		imu->success_flag = 0;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	755a      	strb	r2, [r3, #21]
	HAL_Delay(5);
 8001450:	2005      	movs	r0, #5
 8001452:	f001 f873 	bl	800253c <HAL_Delay>

	write_data = 0x00;
 8001456:	2300      	movs	r3, #0
 8001458:	757b      	strb	r3, [r7, #21]
	status = HAL_I2C_Mem_Write(imu->i2c_handle, imu->device_addr, MPU6050_REG_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &write_data, 1, HAL_MAX_DELAY);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	791b      	ldrb	r3, [r3, #4]
 8001462:	b299      	uxth	r1, r3
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	2301      	movs	r3, #1
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	f107 0315 	add.w	r3, r7, #21
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	226b      	movs	r2, #107	; 0x6b
 8001478:	f001 fdf0 	bl	800305c <HAL_I2C_Mem_Write>
 800147c:	4603      	mov	r3, r0
 800147e:	75bb      	strb	r3, [r7, #22]
	while (HAL_I2C_IsDeviceReady(imu->i2c_handle, imu->device_addr, 1, HAL_MAX_DELAY) != HAL_OK);
 8001480:	bf00      	nop
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	b299      	uxth	r1, r3
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	2201      	movs	r2, #1
 8001492:	f002 f8f7 	bl	8003684 <HAL_I2C_IsDeviceReady>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f2      	bne.n	8001482 <MPU6050_Init+0x2a6>
	if (status != HAL_OK)
 800149c:	7dbb      	ldrb	r3, [r7, #22]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <MPU6050_Init+0x2cc>
		imu->success_flag = 0;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	755a      	strb	r2, [r3, #21]
	HAL_Delay(5);
 80014a8:	2005      	movs	r0, #5
 80014aa:	f001 f847 	bl	800253c <HAL_Delay>

	if (imu->success_flag)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	7d5b      	ldrb	r3, [r3, #21]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <MPU6050_Init+0x2e6>
	{
		UART_println(&uart, "Initialization Succeeded.");
 80014b8:	4912      	ldr	r1, [pc, #72]	; (8001504 <MPU6050_Init+0x328>)
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <MPU6050_Init+0x320>)
 80014bc:	f000 f9ae 	bl	800181c <UART_println>
 80014c0:	e003      	b.n	80014ca <MPU6050_Init+0x2ee>
	}
	else
	{
		UART_println(&uart, "Initialization Failed.");
 80014c2:	4911      	ldr	r1, [pc, #68]	; (8001508 <MPU6050_Init+0x32c>)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <MPU6050_Init+0x320>)
 80014c6:	f000 f9a9 	bl	800181c <UART_println>
	}

	return 0;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	3f7eb352 	.word	0x3f7eb352
 80014d8:	3f7fb1c5 	.word	0x3f7fb1c5
 80014dc:	3f7e8c8b 	.word	0x3f7e8c8b
 80014e0:	c0d00005 	.word	0xc0d00005
 80014e4:	c2870000 	.word	0xc2870000
 80014e8:	c404e000 	.word	0xc404e000
 80014ec:	39a77524 	.word	0x39a77524
 80014f0:	bb0b8f15 	.word	0xbb0b8f15
 80014f4:	3bd349bf 	.word	0x3bd349bf
 80014f8:	0800e300 	.word	0x0800e300
 80014fc:	20000370 	.word	0x20000370
 8001500:	0800e318 	.word	0x0800e318
 8001504:	0800e334 	.word	0x0800e334
 8001508:	0800e350 	.word	0x0800e350

0800150c <MPU6050_Read_DMA>:

uint8_t MPU6050_Read_DMA(MPU6050 *imu)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
 8001512:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read_DMA(imu->i2c_handle, imu->device_addr, MPU6050_REG_DATA_START, I2C_MEMADD_SIZE_8BIT, imu->rx_buf, 14);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	b299      	uxth	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3305      	adds	r3, #5
 8001522:	220e      	movs	r2, #14
 8001524:	9201      	str	r2, [sp, #4]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	223b      	movs	r2, #59	; 0x3b
 800152c:	f001 ffc4 	bl	80034b8 <HAL_I2C_Mem_Read_DMA>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <MPU6050_Read_DMA+0x40>
	{
		imu->success_flag = 0;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
		UART_log_error(&uart, status, "DMA Read Failed.");
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <MPU6050_Read_DMA+0x58>)
 8001544:	4619      	mov	r1, r3
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <MPU6050_Read_DMA+0x5c>)
 8001548:	f000 f9b0 	bl	80018ac <UART_log_error>
	}

//	imu->dma_rx_flag = (status == HAL_OK);
	imu->dma_rx_flag = 1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	74da      	strb	r2, [r3, #19]
	imu->data_ready_flag = 0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	751a      	strb	r2, [r3, #20]

	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	0800e368 	.word	0x0800e368
 8001568:	20000370 	.word	0x20000370

0800156c <MPU6050_Process_Data>:

void MPU6050_Process_Data(MPU6050 *imu)
{
 800156c:	b480      	push	{r7}
 800156e:	b08b      	sub	sp, #44	; 0x2c
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	/* Read Accelerometer */

	int16_t acc_raw_signed[3];
	acc_raw_signed[0] = (int16_t) ((imu->rx_buf[0] << 8) | imu->rx_buf[1]); // X-axis
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	799b      	ldrb	r3, [r3, #6]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21b      	sxth	r3, r3
 8001586:	843b      	strh	r3, [r7, #32]
	acc_raw_signed[1] = (int16_t) ((imu->rx_buf[2] << 8) | imu->rx_buf[3]); // Y-axis
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	79db      	ldrb	r3, [r3, #7]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7a1b      	ldrb	r3, [r3, #8]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21b      	sxth	r3, r3
 800159a:	847b      	strh	r3, [r7, #34]	; 0x22
	acc_raw_signed[2] = (int16_t) ((imu->rx_buf[4] << 8) | imu->rx_buf[5]); // Z-axis
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a5b      	ldrb	r3, [r3, #9]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7a9b      	ldrb	r3, [r3, #10]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	84bb      	strh	r3, [r7, #36]	; 0x24

	// Accelerometer model: a_cal = T * K * (a_raw + b)
	float K_a_b[3];
	K_a_b[0] = imu->acc_scale[0] * ((float) acc_raw_signed[0] + imu->acc_bias[0]);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80015c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a05 	vstr	s15, [r7, #20]
	K_a_b[1] = imu->acc_scale[1] * ((float) acc_raw_signed[1] + imu->acc_bias[1]);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80015da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	edc7 7a06 	vstr	s15, [r7, #24]
	K_a_b[2] = imu->acc_scale[2] * ((float) acc_raw_signed[2] + imu->acc_bias[2]);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80015fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a07 	vstr	s15, [r7, #28]

	imu->acc_mps2[0] = K_a_b[0] - imu->acc_yz_rot * K_a_b[1] + imu->acc_zy_rot * K_a_b[2];
 800161c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001638:	edd7 7a07 	vldr	s15, [r7, #28]
 800163c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc_mps2[1] = K_a_b[1] - imu->acc_zx_rot * K_a_b[2];
 800164a:	ed97 7a06 	vldr	s14, [r7, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001654:	edd7 7a07 	vldr	s15, [r7, #28]
 8001658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->acc_mps2[2] = K_a_b[2];
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	621a      	str	r2, [r3, #32]

	imu->acc_mps2[0] *= 1.0f / DEFAULT_ACC_SCALE_LSB_G;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001672:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80017d4 <MPU6050_Process_Data+0x268>
 8001676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc_mps2[1] *= 1.0f / DEFAULT_ACC_SCALE_LSB_G;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 7a07 	vldr	s15, [r3, #28]
 8001686:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80017d4 <MPU6050_Process_Data+0x268>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->acc_mps2[2] *= 1.0f / DEFAULT_ACC_SCALE_LSB_G;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	edd3 7a08 	vldr	s15, [r3, #32]
 800169a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80017d4 <MPU6050_Process_Data+0x268>
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edc3 7a08 	vstr	s15, [r3, #32]
//	imu->acc_mps2[1] *= G_MPS2 / DEFAULT_ACC_SCALE_LSB_G;
//	imu->acc_mps2[2] *= G_MPS2 / DEFAULT_ACC_SCALE_LSB_G;

	/* Read Temperature */

	int16_t temp_raw_signed = (int16_t) ((imu->rx_buf[6] << 8) | imu->rx_buf[7]);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7adb      	ldrb	r3, [r3, #11]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7b1b      	ldrb	r3, [r3, #12]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	imu->temp_C = (float) temp_raw_signed / 340.0f + 36.53f;
 80016ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80017d8 <MPU6050_Process_Data+0x26c>
 80016ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ce:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80017dc <MPU6050_Process_Data+0x270>
 80016d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	/* Read Gyroscope */
	int16_t gyr_raw_signed[3];
	gyr_raw_signed[0] = (int16_t) ((imu->rx_buf[ 8] << 8) | imu->rx_buf[ 9]); // X-axis
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7b5b      	ldrb	r3, [r3, #13]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b9b      	ldrb	r3, [r3, #14]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	81bb      	strh	r3, [r7, #12]
	gyr_raw_signed[1] = (int16_t) ((imu->rx_buf[10] << 8) | imu->rx_buf[11]); // Y-axis
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7bdb      	ldrb	r3, [r3, #15]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7c1b      	ldrb	r3, [r3, #16]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	81fb      	strh	r3, [r7, #14]
	gyr_raw_signed[2] = (int16_t) ((imu->rx_buf[12] << 8) | imu->rx_buf[13]); // Z-axis
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7c5b      	ldrb	r3, [r3, #17]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7c9b      	ldrb	r3, [r3, #18]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21b      	sxth	r3, r3
 8001716:	823b      	strh	r3, [r7, #16]

	imu->gyr_rps[0] = imu->gyr_scale[0] * ((float) gyr_raw_signed[0] + imu->gyr_bias[0]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800171e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	imu->gyr_rps[1] = imu->gyr_scale[1] * ((float) gyr_raw_signed[1] + imu->gyr_bias[1]);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	imu->gyr_rps[2] = imu->gyr_scale[2] * ((float) gyr_raw_signed[2] + imu->gyr_bias[2]);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800176a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800177c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

//	imu->gyr_rps[0] *= 1.0f / DEFAULT_GYR_SCALE_LSB_DPS;
//	imu->gyr_rps[1] *= 1.0f / DEFAULT_GYR_SCALE_LSB_DPS;
//	imu->gyr_rps[2] *= 1.0f / DEFAULT_GYR_SCALE_LSB_DPS;
	imu->gyr_rps[0] *= DEG_TO_RAD / DEFAULT_GYR_SCALE_LSB_DPS;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001790:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80017e0 <MPU6050_Process_Data+0x274>
 8001794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	imu->gyr_rps[1] *= DEG_TO_RAD / DEFAULT_GYR_SCALE_LSB_DPS;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80017a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017e0 <MPU6050_Process_Data+0x274>
 80017a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	imu->gyr_rps[2] *= DEG_TO_RAD / DEFAULT_GYR_SCALE_LSB_DPS;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80017b8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80017e0 <MPU6050_Process_Data+0x274>
 80017bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 80017c6:	bf00      	nop
 80017c8:	372c      	adds	r7, #44	; 0x2c
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	38800000 	.word	0x38800000
 80017d8:	43aa0000 	.word	0x43aa0000
 80017dc:	42121eb8 	.word	0x42121eb8
 80017e0:	390bb3fd 	.word	0x390bb3fd

080017e4 <UART_Init>:
#include "UART_API.h"

void UART_Init(UART_API *uart, UART_HandleTypeDef *huart, uint16_t max_len)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
	uart->huart = huart;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	601a      	str	r2, [r3, #0]
	uart->log_buf[0] = '\0'; // null terminate
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	711a      	strb	r2, [r3, #4]
	uart->log_buf_len = 1;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2201      	movs	r2, #1
 8001802:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	uart->max_len = max_len;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	88fa      	ldrh	r2, [r7, #6]
 800180a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <UART_println>:
}



void UART_println(UART_API *uart, char *msg)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	if (strlen(msg) < uart->max_len)
 8001826:	6838      	ldr	r0, [r7, #0]
 8001828:	f7fe fcd2 	bl	80001d0 <strlen>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001834:	429a      	cmp	r2, r3
 8001836:	d217      	bcs.n	8001868 <UART_println+0x4c>
	{
		uart->log_buf_len = sprintf(uart->log_buf, "%s\r\n", msg);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3304      	adds	r3, #4
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	4919      	ldr	r1, [pc, #100]	; (80018a4 <UART_println+0x88>)
 8001840:	4618      	mov	r0, r3
 8001842:	f009 fb45 	bl	800aed0 <siprintf>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	1d19      	adds	r1, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	f005 fa55 	bl	8006d10 <HAL_UART_Transmit>
	else
	{
		uart->log_buf_len = sprintf(uart->log_buf, "Message needs to be less than %d characters long.\r\n", uart->max_len);
		HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
	}
}
 8001866:	e018      	b.n	800189a <UART_println+0x7e>
		uart->log_buf_len = sprintf(uart->log_buf, "Message needs to be less than %d characters long.\r\n", uart->max_len);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	1d18      	adds	r0, r3, #4
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001872:	461a      	mov	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <UART_println+0x8c>)
 8001876:	f009 fb2b 	bl	800aed0 <siprintf>
 800187a:	4603      	mov	r3, r0
 800187c:	b29a      	uxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1d19      	adds	r1, r3, #4
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	f005 fa3b 	bl	8006d10 <HAL_UART_Transmit>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	0800e3b0 	.word	0x0800e3b0
 80018a8:	0800e37c 	.word	0x0800e37c

080018ac <UART_log_error>:



void UART_log_error(UART_API *uart, HAL_StatusTypeDef status, char *error_msg)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	460b      	mov	r3, r1
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	72fb      	strb	r3, [r7, #11]
	switch(status)
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d83f      	bhi.n	8001940 <UART_log_error+0x94>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <UART_log_error+0x1c>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	080018d9 	.word	0x080018d9
 80018cc:	080018f3 	.word	0x080018f3
 80018d0:	0800190d 	.word	0x0800190d
 80018d4:	08001927 	.word	0x08001927
	{
	case(HAL_OK): // TODO get rid of this case?
		uart->log_buf_len = sprintf(uart->log_buf, "%s\r\n", error_msg);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3304      	adds	r3, #4
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4925      	ldr	r1, [pc, #148]	; (8001974 <UART_log_error+0xc8>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f009 faf5 	bl	800aed0 <siprintf>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 80018f0:	e031      	b.n	8001956 <UART_log_error+0xaa>
	case(HAL_ERROR):
		uart->log_buf_len = sprintf(uart->log_buf, "%s Status: Error\r\n", error_msg);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3304      	adds	r3, #4
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	491f      	ldr	r1, [pc, #124]	; (8001978 <UART_log_error+0xcc>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f009 fae8 	bl	800aed0 <siprintf>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 800190a:	e024      	b.n	8001956 <UART_log_error+0xaa>
	case(HAL_BUSY):
		uart->log_buf_len = sprintf(uart->log_buf, "%s Status: Busy\r\n", error_msg);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3304      	adds	r3, #4
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	491a      	ldr	r1, [pc, #104]	; (800197c <UART_log_error+0xd0>)
 8001914:	4618      	mov	r0, r3
 8001916:	f009 fadb 	bl	800aed0 <siprintf>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 8001924:	e017      	b.n	8001956 <UART_log_error+0xaa>
	case(HAL_TIMEOUT):
		uart->log_buf_len = sprintf(uart->log_buf, "%s Status: Timeout\r\n", error_msg);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3304      	adds	r3, #4
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4914      	ldr	r1, [pc, #80]	; (8001980 <UART_log_error+0xd4>)
 800192e:	4618      	mov	r0, r3
 8001930:	f009 face 	bl	800aed0 <siprintf>
 8001934:	4603      	mov	r3, r0
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 800193e:	e00a      	b.n	8001956 <UART_log_error+0xaa>
	default:
		uart->log_buf_len = sprintf(uart->log_buf, "Unknown Status Value\r\n");
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3304      	adds	r3, #4
 8001944:	490f      	ldr	r1, [pc, #60]	; (8001984 <UART_log_error+0xd8>)
 8001946:	4618      	mov	r0, r3
 8001948:	f009 fac2 	bl	800aed0 <siprintf>
 800194c:	4603      	mov	r3, r0
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	}
	HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1d19      	adds	r1, r3, #4
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	f005 f9d2 	bl	8006d10 <HAL_UART_Transmit>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800e3b0 	.word	0x0800e3b0
 8001978:	0800e3b8 	.word	0x0800e3b8
 800197c:	0800e3cc 	.word	0x0800e3cc
 8001980:	0800e3e0 	.word	0x0800e3e0
 8001984:	0800e3f8 	.word	0x0800e3f8

08001988 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == MPU6050_INT_Pin)
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	2b10      	cmp	r3, #16
 8001996:	d102      	bne.n	800199e <HAL_GPIO_EXTI_Callback+0x16>
	{
		imu.data_ready_flag = 1;
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <HAL_GPIO_EXTI_Callback+0x24>)
 800199a:	2201      	movs	r2, #1
 800199c:	751a      	strb	r2, [r3, #20]
	}
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200003f8 	.word	0x200003f8

080019b0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_I2C_MemRxCpltCallback+0x34>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10a      	bne.n	80019da <HAL_I2C_MemRxCpltCallback+0x2a>
	{
		MPU6050_Process_Data(&imu);
 80019c4:	4808      	ldr	r0, [pc, #32]	; (80019e8 <HAL_I2C_MemRxCpltCallback+0x38>)
 80019c6:	f7ff fdd1 	bl	800156c <MPU6050_Process_Data>
		CompFilterRollPitch_Update(&comp_filter, imu.acc_mps2, imu.gyr_rps);
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_I2C_MemRxCpltCallback+0x3c>)
 80019cc:	4908      	ldr	r1, [pc, #32]	; (80019f0 <HAL_I2C_MemRxCpltCallback+0x40>)
 80019ce:	4809      	ldr	r0, [pc, #36]	; (80019f4 <HAL_I2C_MemRxCpltCallback+0x44>)
 80019d0:	f7ff fab4 	bl	8000f3c <CompFilterRollPitch_Update>
		imu.dma_rx_flag = 0;
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_I2C_MemRxCpltCallback+0x38>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	74da      	strb	r2, [r3, #19]
	}
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001fc 	.word	0x200001fc
 80019e8:	200003f8 	.word	0x200003f8
 80019ec:	20000444 	.word	0x20000444
 80019f0:	20000410 	.word	0x20000410
 80019f4:	20000468 	.word	0x20000468

080019f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fc:	f000 fd65 	bl	80024ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a00:	f000 f864 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a04:	f000 f95a 	bl	8001cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a08:	f000 f932 	bl	8001c70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a0c:	f000 f900 	bl	8001c10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a10:	f000 f8be 	bl	8001b90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10);
 8001a14:	200a      	movs	r0, #10
 8001a16:	f000 fd91 	bl	800253c <HAL_Delay>

	UART_Init(&uart, &huart2, 128);
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	491c      	ldr	r1, [pc, #112]	; (8001a90 <main+0x98>)
 8001a1e:	481d      	ldr	r0, [pc, #116]	; (8001a94 <main+0x9c>)
 8001a20:	f7ff fee0 	bl	80017e4 <UART_Init>
	HAL_Delay(10);
 8001a24:	200a      	movs	r0, #10
 8001a26:	f000 fd89 	bl	800253c <HAL_Delay>

	MPU6050_Init(&imu, &hi2c1, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	491a      	ldr	r1, [pc, #104]	; (8001a98 <main+0xa0>)
 8001a2e:	481b      	ldr	r0, [pc, #108]	; (8001a9c <main+0xa4>)
 8001a30:	f7ff fbd4 	bl	80011dc <MPU6050_Init>
	HAL_Delay(10);
 8001a34:	200a      	movs	r0, #10
 8001a36:	f000 fd81 	bl	800253c <HAL_Delay>

	CompFilterRollPitch_Init(&comp_filter, COMP_FILTER_ALPHA, SAMPLE_TIME_MS, LPF_ACC_ALPHA, LPF_GYR_ALPHA);
 8001a3a:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001aa0 <main+0xa8>
 8001a3e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001a42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a46:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8001aa0 <main+0xa8>
 8001a4a:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <main+0xac>)
 8001a4c:	f7ff fa2e 	bl	8000eac <CompFilterRollPitch_Init>
	HAL_Delay(10);
 8001a50:	200a      	movs	r0, #10
 8001a52:	f000 fd73 	bl	800253c <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a56:	f005 fe0f 	bl	8007678 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkLEDTask */
  blinkLEDTaskHandle = osThreadNew(BlinkLEDTask, NULL, &blinkLEDTask_attributes);
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <main+0xb0>)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4813      	ldr	r0, [pc, #76]	; (8001aac <main+0xb4>)
 8001a60:	f005 fe54 	bl	800770c <osThreadNew>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <main+0xb8>)
 8001a68:	6013      	str	r3, [r2, #0]

  /* creation of logOutputTask */
  logOutputTaskHandle = osThreadNew(LogOutputTask, NULL, &logOutputTask_attributes);
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <main+0xbc>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <main+0xc0>)
 8001a70:	f005 fe4c 	bl	800770c <osThreadNew>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <main+0xc4>)
 8001a78:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(ReadIMUTask, NULL, &readIMUTask_attributes);
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <main+0xc8>)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <main+0xcc>)
 8001a80:	f005 fe44 	bl	800770c <osThreadNew>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <main+0xd0>)
 8001a88:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a8a:	f005 fe19 	bl	80076c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <main+0x96>
 8001a90:	200002e0 	.word	0x200002e0
 8001a94:	20000370 	.word	0x20000370
 8001a98:	200001fc 	.word	0x200001fc
 8001a9c:	200003f8 	.word	0x200003f8
 8001aa0:	3dcccccd 	.word	0x3dcccccd
 8001aa4:	20000468 	.word	0x20000468
 8001aa8:	0800e4d0 	.word	0x0800e4d0
 8001aac:	08001da9 	.word	0x08001da9
 8001ab0:	20000364 	.word	0x20000364
 8001ab4:	0800e4f4 	.word	0x0800e4f4
 8001ab8:	08001dd1 	.word	0x08001dd1
 8001abc:	20000368 	.word	0x20000368
 8001ac0:	0800e518 	.word	0x0800e518
 8001ac4:	08001e21 	.word	0x08001e21
 8001ac8:	2000036c 	.word	0x2000036c

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	; 0x58
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2244      	movs	r2, #68	; 0x44
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 fc77 	bl	800a3ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af2:	f003 fc87 	bl	8005404 <HAL_PWREx_ControlVoltageScaling>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001afc:	f000 f9b0 	bl	8001e60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b00:	f003 fc62 	bl	80053c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <SystemClock_Config+0xc0>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <SystemClock_Config+0xc0>)
 8001b0c:	f023 0318 	bic.w	r3, r3, #24
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b14:	2314      	movs	r3, #20
 8001b16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b34:	2328      	movs	r3, #40	; 0x28
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fcb1 	bl	80054b0 <HAL_RCC_OscConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b54:	f000 f984 	bl	8001e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b58:	230f      	movs	r3, #15
 8001b5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	2104      	movs	r1, #4
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 f8b1 	bl	8005cd8 <HAL_RCC_ClockConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b7c:	f000 f970 	bl	8001e60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b80:	f004 fcf6 	bl	8006570 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b84:	bf00      	nop
 8001b86:	3758      	adds	r7, #88	; 0x58
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000

08001b90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <MX_I2C1_Init+0x78>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <MX_I2C1_Init+0x7c>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bca:	480e      	ldr	r0, [pc, #56]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bcc:	f001 f9b6 	bl	8002f3c <HAL_I2C_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bd6:	f000 f943 	bl	8001e60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bde:	f003 fb5b 	bl	8005298 <HAL_I2CEx_ConfigAnalogFilter>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001be8:	f000 f93a 	bl	8001e60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bec:	2100      	movs	r1, #0
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_I2C1_Init+0x74>)
 8001bf0:	f003 fb9d 	bl	800532e <HAL_I2CEx_ConfigDigitalFilter>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bfa:	f000 f931 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200001fc 	.word	0x200001fc
 8001c08:	40005400 	.word	0x40005400
 8001c0c:	00702991 	.word	0x00702991

08001c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c16:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <MX_USART2_UART_Init+0x5c>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART2_UART_Init+0x58>)
 8001c54:	f005 f80e 	bl	8006c74 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c5e:	f000 f8ff 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200002e0 	.word	0x200002e0
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_DMA_Init+0x48>)
 8001c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <MX_DMA_Init+0x48>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6493      	str	r3, [r2, #72]	; 0x48
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <MX_DMA_Init+0x48>)
 8001c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2105      	movs	r1, #5
 8001c92:	2010      	movs	r0, #16
 8001c94:	f000 fd2e 	bl	80026f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c98:	2010      	movs	r0, #16
 8001c9a:	f000 fd47 	bl	800272c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	2011      	movs	r0, #17
 8001ca4:	f000 fd26 	bl	80026f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ca8:	2011      	movs	r0, #17
 8001caa:	f000 fd3f 	bl	800272c <HAL_NVIC_EnableIRQ>

}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b33      	ldr	r3, [pc, #204]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a32      	ldr	r2, [pc, #200]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a2c      	ldr	r2, [pc, #176]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <MX_GPIO_Init+0xe4>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2108      	movs	r1, #8
 8001d1e:	4821      	ldr	r0, [pc, #132]	; (8001da4 <MX_GPIO_Init+0xe8>)
 8001d20:	f001 f8c2 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001d24:	2302      	movs	r3, #2
 8001d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f000 ff4a 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001d40:	2308      	movs	r3, #8
 8001d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_GPIO_Init+0xe8>)
 8001d58:	f000 ff3c 	bl	8002bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_GPIO_Init+0xe8>)
 8001d72:	f000 ff2f 	bl	8002bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	2007      	movs	r0, #7
 8001d7c:	f000 fcba 	bl	80026f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d80:	2007      	movs	r0, #7
 8001d82:	f000 fcd3 	bl	800272c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f000 fcb2 	bl	80026f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d90:	200a      	movs	r0, #10
 8001d92:	f000 fccb 	bl	800272c <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	48000400 	.word	0x48000400

08001da8 <BlinkLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlinkLEDTask */
void BlinkLEDTask(void *argument)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001db0:	2108      	movs	r1, #8
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <BlinkLEDTask+0x20>)
 8001db4:	f001 f890 	bl	8002ed8 <HAL_GPIO_TogglePin>
  	imu.data_ready_flag = 0; // reset here
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <BlinkLEDTask+0x24>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	751a      	strb	r2, [r3, #20]
    osDelay(LED_TIME_MS);
 8001dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc2:	f005 fd35 	bl	8007830 <osDelay>
  	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001dc6:	e7f3      	b.n	8001db0 <BlinkLEDTask+0x8>
 8001dc8:	48000400 	.word	0x48000400
 8001dcc:	200003f8 	.word	0x200003f8

08001dd0 <LogOutputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LogOutputTask */
void LogOutputTask(void *argument)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LogOutputTask */
  /* Infinite loop */
  for(;;)
  {
//  	uart.log_buf_len = sprintf(uart.log_buf, "value: %.3f\r\n", -comp_filter.roll_rad * RAD_TO_DEG);
  	uart.log_buf_len = sprintf(uart.log_buf, "data ready flag: %d\r\n", imu.data_ready_flag);
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <LogOutputTask+0x3c>)
 8001dda:	7d1b      	ldrb	r3, [r3, #20]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	490b      	ldr	r1, [pc, #44]	; (8001e10 <LogOutputTask+0x40>)
 8001de2:	480c      	ldr	r0, [pc, #48]	; (8001e14 <LogOutputTask+0x44>)
 8001de4:	f009 f874 	bl	800aed0 <siprintf>
 8001de8:	4603      	mov	r3, r0
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <LogOutputTask+0x48>)
 8001dee:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
  	HAL_UART_Transmit(&huart2, (uint8_t *)uart.log_buf, uart.log_buf_len, HAL_MAX_DELAY);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <LogOutputTask+0x48>)
 8001df4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	4905      	ldr	r1, [pc, #20]	; (8001e14 <LogOutputTask+0x44>)
 8001dfe:	4807      	ldr	r0, [pc, #28]	; (8001e1c <LogOutputTask+0x4c>)
 8001e00:	f004 ff86 	bl	8006d10 <HAL_UART_Transmit>
    osDelay(LOG_TIME_MS);
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f005 fd13 	bl	8007830 <osDelay>
  	uart.log_buf_len = sprintf(uart.log_buf, "data ready flag: %d\r\n", imu.data_ready_flag);
 8001e0a:	e7e5      	b.n	8001dd8 <LogOutputTask+0x8>
 8001e0c:	200003f8 	.word	0x200003f8
 8001e10:	0800e490 	.word	0x0800e490
 8001e14:	20000374 	.word	0x20000374
 8001e18:	20000370 	.word	0x20000370
 8001e1c:	200002e0 	.word	0x200002e0

08001e20 <ReadIMUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadIMUTask */
void ReadIMUTask(void *argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//		if (imu.data_ready_flag && !imu.dma_rx_flag)
//		{
			MPU6050_Read_DMA(&imu);
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <ReadIMUTask+0x18>)
 8001e2a:	f7ff fb6f 	bl	800150c <MPU6050_Read_DMA>
//		}
    osDelay(SAMPLE_TIME_MS);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f005 fcfe 	bl	8007830 <osDelay>
			MPU6050_Read_DMA(&imu);
 8001e34:	e7f8      	b.n	8001e28 <ReadIMUTask+0x8>
 8001e36:	bf00      	nop
 8001e38:	200003f8 	.word	0x200003f8

08001e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4e:	f000 fb55 	bl	80024fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40001000 	.word	0x40001000

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	UART_println(&uart, "Error_Handler()");
 8001e68:	4902      	ldr	r1, [pc, #8]	; (8001e74 <Error_Handler+0x14>)
 8001e6a:	4803      	ldr	r0, [pc, #12]	; (8001e78 <Error_Handler+0x18>)
 8001e6c:	f7ff fcd6 	bl	800181c <UART_println>
 8001e70:	e7fa      	b.n	8001e68 <Error_Handler+0x8>
 8001e72:	bf00      	nop
 8001e74:	0800e4a8 	.word	0x0800e4a8
 8001e78:	20000370 	.word	0x20000370

08001e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_MspInit+0x4c>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	f06f 0001 	mvn.w	r0, #1
 8001eba:	f000 fc1b 	bl	80026f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b09e      	sub	sp, #120	; 0x78
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2254      	movs	r2, #84	; 0x54
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 fa6e 	bl	800a3ce <memset>
  if(hi2c->Instance==I2C1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_I2C_MspInit+0x16c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	f040 8098 	bne.w	800202e <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001efe:	2340      	movs	r3, #64	; 0x40
 8001f00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f004 f93a 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f16:	f7ff ffa3 	bl	8001e60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	4b48      	ldr	r3, [pc, #288]	; (800203c <HAL_I2C_MspInit+0x170>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	4a47      	ldr	r2, [pc, #284]	; (800203c <HAL_I2C_MspInit+0x170>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f26:	4b45      	ldr	r3, [pc, #276]	; (800203c <HAL_I2C_MspInit+0x170>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23c0      	movs	r3, #192	; 0xc0
 8001f34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f36:	2312      	movs	r3, #18
 8001f38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f42:	2304      	movs	r3, #4
 8001f44:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	483c      	ldr	r0, [pc, #240]	; (8002040 <HAL_I2C_MspInit+0x174>)
 8001f4e:	f000 fe41 	bl	8002bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <HAL_I2C_MspInit+0x170>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	4a39      	ldr	r2, [pc, #228]	; (800203c <HAL_I2C_MspInit+0x170>)
 8001f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_I2C_MspInit+0x170>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001f6a:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f6c:	4a36      	ldr	r2, [pc, #216]	; (8002048 <HAL_I2C_MspInit+0x17c>)
 8001f6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f72:	2203      	movs	r2, #3
 8001f74:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001fa0:	4828      	ldr	r0, [pc, #160]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001fa2:	f000 fbd1 	bl	8002748 <HAL_DMA_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8001fac:	f7ff ff58 	bl	8001e60 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fb6:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_I2C_MspInit+0x178>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_I2C_MspInit+0x184>)
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fca:	2210      	movs	r2, #16
 8001fcc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ff2:	4816      	ldr	r0, [pc, #88]	; (800204c <HAL_I2C_MspInit+0x180>)
 8001ff4:	f000 fba8 	bl	8002748 <HAL_DMA_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001ffe:	f7ff ff2f 	bl	8001e60 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_I2C_MspInit+0x180>)
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
 8002008:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_I2C_MspInit+0x180>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2105      	movs	r1, #5
 8002012:	201f      	movs	r0, #31
 8002014:	f000 fb6e 	bl	80026f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002018:	201f      	movs	r0, #31
 800201a:	f000 fb87 	bl	800272c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2105      	movs	r1, #5
 8002022:	2020      	movs	r0, #32
 8002024:	f000 fb66 	bl	80026f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002028:	2020      	movs	r0, #32
 800202a:	f000 fb7f 	bl	800272c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3778      	adds	r7, #120	; 0x78
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40005400 	.word	0x40005400
 800203c:	40021000 	.word	0x40021000
 8002040:	48000400 	.word	0x48000400
 8002044:	20000250 	.word	0x20000250
 8002048:	40020080 	.word	0x40020080
 800204c:	20000298 	.word	0x20000298
 8002050:	4002006c 	.word	0x4002006c

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b09e      	sub	sp, #120	; 0x78
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	2254      	movs	r2, #84	; 0x54
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f008 f9aa 	bl	800a3ce <memset>
  if(huart->Instance==USART2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_UART_MspInit+0xcc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d148      	bne.n	8002116 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002084:	2302      	movs	r3, #2
 8002086:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4618      	mov	r0, r3
 8002092:	f004 f877 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800209c:	f7ff fee0 	bl	8001e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_UART_MspInit+0xd0>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_UART_MspInit+0xd0>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_UART_MspInit+0xd0>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_UART_MspInit+0xd0>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_UART_MspInit+0xd0>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_UART_MspInit+0xd0>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80020d0:	2304      	movs	r3, #4
 80020d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e0:	2307      	movs	r3, #7
 80020e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f000 fd71 	bl	8002bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80020f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002104:	2303      	movs	r3, #3
 8002106:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800210c:	4619      	mov	r1, r3
 800210e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002112:	f000 fd5f 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3778      	adds	r7, #120	; 0x78
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40004400 	.word	0x40004400
 8002124:	40021000 	.word	0x40021000

08002128 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08e      	sub	sp, #56	; 0x38
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002136:	4b34      	ldr	r3, [pc, #208]	; (8002208 <HAL_InitTick+0xe0>)
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a33      	ldr	r2, [pc, #204]	; (8002208 <HAL_InitTick+0xe0>)
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_InitTick+0xe0>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214e:	f107 0210 	add.w	r2, r7, #16
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f003 ff81 	bl	8006060 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002168:	f003 ff4e 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 800216c:	6378      	str	r0, [r7, #52]	; 0x34
 800216e:	e004      	b.n	800217a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002170:	f003 ff4a 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8002174:	4603      	mov	r3, r0
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800217a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <HAL_InitTick+0xe4>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9b      	lsrs	r3, r3, #18
 8002184:	3b01      	subs	r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_InitTick+0xe8>)
 800218a:	4a22      	ldr	r2, [pc, #136]	; (8002214 <HAL_InitTick+0xec>)
 800218c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_InitTick+0xe8>)
 8002190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002194:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002196:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_InitTick+0xe8>)
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_InitTick+0xe8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_InitTick+0xe8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_InitTick+0xe8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021ae:	4818      	ldr	r0, [pc, #96]	; (8002210 <HAL_InitTick+0xe8>)
 80021b0:	f004 fae0 	bl	8006774 <HAL_TIM_Base_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80021ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11b      	bne.n	80021fa <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021c2:	4813      	ldr	r0, [pc, #76]	; (8002210 <HAL_InitTick+0xe8>)
 80021c4:	f004 fb38 	bl	8006838 <HAL_TIM_Base_Start_IT>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d111      	bne.n	80021fa <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d6:	2036      	movs	r0, #54	; 0x36
 80021d8:	f000 faa8 	bl	800272c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	d808      	bhi.n	80021f4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021e2:	2200      	movs	r2, #0
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	2036      	movs	r0, #54	; 0x36
 80021e8:	f000 fa84 	bl	80026f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <HAL_InitTick+0xf0>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e002      	b.n	80021fa <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3738      	adds	r7, #56	; 0x38
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	431bde83 	.word	0x431bde83
 8002210:	200004a8 	.word	0x200004a8
 8002214:	40001000 	.word	0x40001000
 8002218:	20000004 	.word	0x20000004

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 800224c:	2002      	movs	r0, #2
 800224e:	f000 fe5d 	bl	8002f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}

08002256 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 800225a:	2010      	movs	r0, #16
 800225c:	f000 fe56 	bl	8002f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}

08002264 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <DMA1_Channel6_IRQHandler+0x10>)
 800226a:	f000 fbc6 	bl	80029fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000298 	.word	0x20000298

08002278 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA1_Channel7_IRQHandler+0x10>)
 800227e:	f000 fbbc 	bl	80029fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000250 	.word	0x20000250

0800228c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <I2C1_EV_IRQHandler+0x10>)
 8002292:	f001 fafe 	bl	8003892 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200001fc 	.word	0x200001fc

080022a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <I2C1_ER_IRQHandler+0x10>)
 80022a6:	f001 fb0e 	bl	80038c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200001fc 	.word	0x200001fc

080022b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <TIM6_DAC_IRQHandler+0x10>)
 80022ba:	f004 fb11 	bl	80068e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200004a8 	.word	0x200004a8

080022c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return 1;
 80022cc:	2301      	movs	r3, #1
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_kill>:

int _kill(int pid, int sig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022e2:	f007 ff43 	bl	800a16c <__errno>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2216      	movs	r2, #22
 80022ea:	601a      	str	r2, [r3, #0]
  return -1;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_exit>:

void _exit (int status)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ffe7 	bl	80022d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800230a:	e7fe      	b.n	800230a <_exit+0x12>

0800230c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e00a      	b.n	8002334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800231e:	f3af 8000 	nop.w
 8002322:	4601      	mov	r1, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	60ba      	str	r2, [r7, #8]
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf0      	blt.n	800231e <_read+0x12>
  }

  return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e009      	b.n	800236c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	60ba      	str	r2, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbf1      	blt.n	8002358 <_write+0x12>
  }
  return len;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_close>:

int _close(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a6:	605a      	str	r2, [r3, #4]
  return 0;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_isatty>:

int _isatty(int file)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023be:	2301      	movs	r3, #1
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002418:	f007 fea8 	bl	800a16c <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20010000 	.word	0x20010000
 8002448:	00000400 	.word	0x00000400
 800244c:	200004f4 	.word	0x200004f4
 8002450:	20001ed8 	.word	0x20001ed8

08002454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <SystemInit+0x20>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	4a05      	ldr	r2, [pc, #20]	; (8002474 <SystemInit+0x20>)
 8002460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800247c:	f7ff ffea 	bl	8002454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <LoopForever+0xe>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <LoopForever+0x16>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a6:	f007 ff5d 	bl	800a364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024aa:	f7ff faa5 	bl	80019f8 <main>

080024ae <LoopForever>:

LoopForever:
    b LoopForever
 80024ae:	e7fe      	b.n	80024ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024bc:	0800ed74 	.word	0x0800ed74
  ldr r2, =_sbss
 80024c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024c4:	20001ed4 	.word	0x20001ed4

080024c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC1_IRQHandler>

080024ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 f902 	bl	80026de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024da:	200f      	movs	r0, #15
 80024dc:	f7ff fe24 	bl	8002128 <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	e001      	b.n	80024f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ec:	f7ff fcc6 	bl	8001e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f0:	79fb      	ldrb	r3, [r7, #7]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008
 8002520:	200004f8 	.word	0x200004f8

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	200004f8 	.word	0x200004f8

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffee 	bl	8002524 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffde 	bl	8002524 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000008 	.word	0x20000008

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <__NVIC_EnableIRQ+0x38>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db0a      	blt.n	800264e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <__NVIC_SetPriority+0x4c>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	440b      	add	r3, r1
 8002648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800264c:	e00a      	b.n	8002664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4908      	ldr	r1, [pc, #32]	; (8002674 <__NVIC_SetPriority+0x50>)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	3b04      	subs	r3, #4
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	440b      	add	r3, r1
 8002662:	761a      	strb	r2, [r3, #24]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f1c3 0307 	rsb	r3, r3, #7
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf28      	it	cs
 8002696:	2304      	movcs	r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <NVIC_EncodePriority+0x30>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b03      	subs	r3, #3
 80026a6:	e000      	b.n	80026aa <NVIC_EncodePriority+0x32>
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	4313      	orrs	r3, r2
         );
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff4c 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002706:	f7ff ff61 	bl	80025cc <__NVIC_GetPriorityGrouping>
 800270a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f7ff ffb1 	bl	8002678 <NVIC_EncodePriority>
 8002716:	4602      	mov	r2, r0
 8002718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ff80 	bl	8002624 <__NVIC_SetPriority>
}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff54 	bl	80025e8 <__NVIC_EnableIRQ>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e098      	b.n	800288c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <HAL_DMA_Init+0x150>)
 8002762:	429a      	cmp	r2, r3
 8002764:	d80f      	bhi.n	8002786 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	4b4b      	ldr	r3, [pc, #300]	; (800289c <HAL_DMA_Init+0x154>)
 800276e:	4413      	add	r3, r2
 8002770:	4a4b      	ldr	r2, [pc, #300]	; (80028a0 <HAL_DMA_Init+0x158>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	009a      	lsls	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_DMA_Init+0x15c>)
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
 8002784:	e00e      	b.n	80027a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_DMA_Init+0x160>)
 800278e:	4413      	add	r3, r2
 8002790:	4a43      	ldr	r2, [pc, #268]	; (80028a0 <HAL_DMA_Init+0x158>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	009a      	lsls	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a42      	ldr	r2, [pc, #264]	; (80028ac <HAL_DMA_Init+0x164>)
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fe:	d039      	beq.n	8002874 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_DMA_Init+0x15c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d11a      	bne.n	8002840 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_DMA_Init+0x168>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f003 031c 	and.w	r3, r3, #28
 8002816:	210f      	movs	r1, #15
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	4924      	ldr	r1, [pc, #144]	; (80028b0 <HAL_DMA_Init+0x168>)
 8002820:	4013      	ands	r3, r2
 8002822:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_DMA_Init+0x168>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f003 031c 	and.w	r3, r3, #28
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	491d      	ldr	r1, [pc, #116]	; (80028b0 <HAL_DMA_Init+0x168>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
 800283e:	e019      	b.n	8002874 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002840:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <HAL_DMA_Init+0x16c>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f003 031c 	and.w	r3, r3, #28
 800284c:	210f      	movs	r1, #15
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	4917      	ldr	r1, [pc, #92]	; (80028b4 <HAL_DMA_Init+0x16c>)
 8002856:	4013      	ands	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_DMA_Init+0x16c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f003 031c 	and.w	r3, r3, #28
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	4911      	ldr	r1, [pc, #68]	; (80028b4 <HAL_DMA_Init+0x16c>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40020407 	.word	0x40020407
 800289c:	bffdfff8 	.word	0xbffdfff8
 80028a0:	cccccccd 	.word	0xcccccccd
 80028a4:	40020000 	.word	0x40020000
 80028a8:	bffdfbf8 	.word	0xbffdfbf8
 80028ac:	40020400 	.word	0x40020400
 80028b0:	400200a8 	.word	0x400200a8
 80028b4:	400204a8 	.word	0x400204a8

080028b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_DMA_Start_IT+0x20>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e04b      	b.n	8002970 <HAL_DMA_Start_IT+0xb8>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d13a      	bne.n	8002962 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f92f 	bl	8002b74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 020e 	orr.w	r2, r2, #14
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e00f      	b.n	8002950 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 020a 	orr.w	r2, r2, #10
 800294e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e005      	b.n	800296e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d005      	beq.n	800299c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2204      	movs	r2, #4
 8002994:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e029      	b.n	80029f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020e 	bic.w	r2, r2, #14
 80029aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f003 021c 	and.w	r2, r3, #28
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2101      	movs	r1, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
    }
  }
  return status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f003 031c 	and.w	r3, r3, #28
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d026      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x7a>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d021      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0204 	bic.w	r2, r2, #4
 8002a4c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f003 021c 	and.w	r2, r3, #28
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d071      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	e06c      	b.n	8002b4e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f003 031c 	and.w	r3, r3, #28
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02e      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0xec>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d029      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 020a 	bic.w	r2, r2, #10
 8002aae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f003 021c 	and.w	r2, r3, #28
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d038      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ae4:	e033      	b.n	8002b4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f003 031c 	and.w	r3, r3, #28
 8002aee:	2208      	movs	r2, #8
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d02a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x156>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d025      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 020e 	bic.w	r2, r2, #14
 8002b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f003 021c 	and.w	r2, r3, #28
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f202 	lsl.w	r2, r1, r2
 8002b26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
}
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b66:	b2db      	uxtb	r3, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f003 021c 	and.w	r2, r3, #28
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d108      	bne.n	8002bb8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bb6:	e007      	b.n	8002bc8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be2:	e148      	b.n	8002e76 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 813a 	beq.w	8002e70 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d005      	beq.n	8002c14 <HAL_GPIO_Init+0x40>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d130      	bne.n	8002c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 0201 	and.w	r2, r3, #1
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d017      	beq.n	8002cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d123      	bne.n	8002d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	08da      	lsrs	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3208      	adds	r2, #8
 8002cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	6939      	ldr	r1, [r7, #16]
 8002d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	2203      	movs	r2, #3
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0203 	and.w	r2, r3, #3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8094 	beq.w	8002e70 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d48:	4b52      	ldr	r3, [pc, #328]	; (8002e94 <HAL_GPIO_Init+0x2c0>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <HAL_GPIO_Init+0x2c0>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6613      	str	r3, [r2, #96]	; 0x60
 8002d54:	4b4f      	ldr	r3, [pc, #316]	; (8002e94 <HAL_GPIO_Init+0x2c0>)
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_GPIO_Init+0x2c4>)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	3302      	adds	r3, #2
 8002d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d8a:	d00d      	beq.n	8002da8 <HAL_GPIO_Init+0x1d4>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <HAL_GPIO_Init+0x2c8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <HAL_GPIO_Init+0x1d0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a42      	ldr	r2, [pc, #264]	; (8002ea0 <HAL_GPIO_Init+0x2cc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_GPIO_Init+0x1cc>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e004      	b.n	8002daa <HAL_GPIO_Init+0x1d6>
 8002da0:	2307      	movs	r3, #7
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x1d6>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_GPIO_Init+0x1d6>
 8002da8:	2300      	movs	r3, #0
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	f002 0203 	and.w	r2, r2, #3
 8002db0:	0092      	lsls	r2, r2, #2
 8002db2:	4093      	lsls	r3, r2
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dba:	4937      	ldr	r1, [pc, #220]	; (8002e98 <HAL_GPIO_Init+0x2c4>)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc8:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dec:	4a2d      	ldr	r2, [pc, #180]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002df2:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e16:	4a23      	ldr	r2, [pc, #140]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3301      	adds	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f47f aeaf 	bne.w	8002be4 <HAL_GPIO_Init+0x10>
  }
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	48000400 	.word	0x48000400
 8002ea0:	48000800 	.word	0x48000800
 8002ea4:	40010400 	.word	0x40010400

08002ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec4:	e002      	b.n	8002ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	041a      	lsls	r2, r3, #16
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43d9      	mvns	r1, r3
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	400b      	ands	r3, r1
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	619a      	str	r2, [r3, #24]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fd2c 	bl	8001988 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e081      	b.n	8003052 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe ffb2 	bl	8001ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	e006      	b.n	8002fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d104      	bne.n	8002fd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69d9      	ldr	r1, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1a      	ldr	r2, [r3, #32]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	461a      	mov	r2, r3
 800306a:	4603      	mov	r3, r0
 800306c:	817b      	strh	r3, [r7, #10]
 800306e:	460b      	mov	r3, r1
 8003070:	813b      	strh	r3, [r7, #8]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	f040 80f9 	bne.w	8003276 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_I2C_Mem_Write+0x34>
 800308a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0ed      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_I2C_Mem_Write+0x4e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0e6      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030b2:	f7ff fa37 	bl	8002524 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2319      	movs	r3, #25
 80030be:	2201      	movs	r2, #1
 80030c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f001 fe44 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d1      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2221      	movs	r2, #33	; 0x21
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2240      	movs	r2, #64	; 0x40
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030fc:	88f8      	ldrh	r0, [r7, #6]
 80030fe:	893a      	ldrh	r2, [r7, #8]
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	4603      	mov	r3, r0
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f001 f893 	bl	8004238 <I2C_RequestMemoryWrite>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0a9      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2bff      	cmp	r3, #255	; 0xff
 800312c:	d90e      	bls.n	800314c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	; 0xff
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	b2da      	uxtb	r2, r3
 800313a:	8979      	ldrh	r1, [r7, #10]
 800313c:	2300      	movs	r3, #0
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f001 ffad 	bl	80050a4 <I2C_TransferConfig>
 800314a:	e00f      	b.n	800316c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	b2da      	uxtb	r2, r3
 800315c:	8979      	ldrh	r1, [r7, #10]
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f001 ff9c 	bl	80050a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f001 fe2e 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e07b      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d034      	beq.n	8003224 <HAL_I2C_Mem_Write+0x1c8>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d130      	bne.n	8003224 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	2200      	movs	r2, #0
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f001 fdc0 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e04d      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2bff      	cmp	r3, #255	; 0xff
 80031e4:	d90e      	bls.n	8003204 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	22ff      	movs	r2, #255	; 0xff
 80031ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	8979      	ldrh	r1, [r7, #10]
 80031f4:	2300      	movs	r3, #0
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f001 ff51 	bl	80050a4 <I2C_TransferConfig>
 8003202:	e00f      	b.n	8003224 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003212:	b2da      	uxtb	r2, r3
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	2300      	movs	r3, #0
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f001 ff40 	bl	80050a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d19e      	bne.n	800316c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f001 fe0d 	bl	8004e52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e01a      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2220      	movs	r2, #32
 8003248:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_I2C_Mem_Write+0x224>)
 8003256:	400b      	ands	r3, r1
 8003258:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	fe00e800 	.word	0xfe00e800

08003284 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	4608      	mov	r0, r1
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	4603      	mov	r3, r0
 8003294:	817b      	strh	r3, [r7, #10]
 8003296:	460b      	mov	r3, r1
 8003298:	813b      	strh	r3, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	f040 80fd 	bne.w	80034a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_I2C_Mem_Read+0x34>
 80032b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0f1      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Mem_Read+0x4e>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0ea      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032da:	f7ff f923 	bl	8002524 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2319      	movs	r3, #25
 80032e6:	2201      	movs	r2, #1
 80032e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f001 fd30 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0d5      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2222      	movs	r2, #34	; 0x22
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003324:	88f8      	ldrh	r0, [r7, #6]
 8003326:	893a      	ldrh	r2, [r7, #8]
 8003328:	8979      	ldrh	r1, [r7, #10]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	4603      	mov	r3, r0
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 ffd3 	bl	80042e0 <I2C_RequestMemoryRead>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0ad      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	2bff      	cmp	r3, #255	; 0xff
 8003354:	d90e      	bls.n	8003374 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	b2da      	uxtb	r2, r3
 8003362:	8979      	ldrh	r1, [r7, #10]
 8003364:	4b52      	ldr	r3, [pc, #328]	; (80034b0 <HAL_I2C_Mem_Read+0x22c>)
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f001 fe99 	bl	80050a4 <I2C_TransferConfig>
 8003372:	e00f      	b.n	8003394 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	b2da      	uxtb	r2, r3
 8003384:	8979      	ldrh	r1, [r7, #10]
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <HAL_I2C_Mem_Read+0x22c>)
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f001 fe88 	bl	80050a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	2200      	movs	r2, #0
 800339c:	2104      	movs	r1, #4
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f001 fcd7 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07c      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d034      	beq.n	8003454 <HAL_I2C_Mem_Read+0x1d0>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d130      	bne.n	8003454 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f001 fca8 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e04d      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2bff      	cmp	r3, #255	; 0xff
 8003414:	d90e      	bls.n	8003434 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	b2da      	uxtb	r2, r3
 8003422:	8979      	ldrh	r1, [r7, #10]
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f001 fe39 	bl	80050a4 <I2C_TransferConfig>
 8003432:	e00f      	b.n	8003454 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	b2da      	uxtb	r2, r3
 8003444:	8979      	ldrh	r1, [r7, #10]
 8003446:	2300      	movs	r3, #0
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f001 fe28 	bl	80050a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d19a      	bne.n	8003394 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f001 fcf5 	bl	8004e52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e01a      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2220      	movs	r2, #32
 8003478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_I2C_Mem_Read+0x230>)
 8003486:	400b      	ands	r3, r1
 8003488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	80002400 	.word	0x80002400
 80034b4:	fe00e800 	.word	0xfe00e800

080034b8 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 80c2 	bne.w	8003664 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_I2C_Mem_Read_DMA+0x34>
 80034e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0b6      	b.n	8003666 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003506:	d101      	bne.n	800350c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	e0ac      	b.n	8003666 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_I2C_Mem_Read_DMA+0x62>
 8003516:	2302      	movs	r3, #2
 8003518:	e0a5      	b.n	8003666 <HAL_I2C_Mem_Read_DMA+0x1ae>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2222      	movs	r2, #34	; 0x22
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2240      	movs	r2, #64	; 0x40
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8003548:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a49      	ldr	r2, [pc, #292]	; (8003674 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 800354e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003550:	897a      	ldrh	r2, [r7, #10]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	2bff      	cmp	r3, #255	; 0xff
 800355e:	d903      	bls.n	8003568 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	22ff      	movs	r2, #255	; 0xff
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
 8003566:	e004      	b.n	8003572 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d109      	bne.n	800358c <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f04f 32ff 	mov.w	r2, #4294967295
 8003588:	651a      	str	r2, [r3, #80]	; 0x50
 800358a:	e00b      	b.n	80035a4 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	b29b      	uxth	r3, r3
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800359a:	893b      	ldrh	r3, [r7, #8]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d020      	beq.n	80035ee <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	4a31      	ldr	r2, [pc, #196]	; (8003678 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	4a30      	ldr	r2, [pc, #192]	; (800367c <HAL_I2C_Mem_Read_DMA+0x1c4>)
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3324      	adds	r3, #36	; 0x24
 80035d6:	4619      	mov	r1, r3
 80035d8:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80035de:	f7ff f96b 	bl	80028b8 <HAL_DMA_Start_IT>
 80035e2:	4603      	mov	r3, r0
 80035e4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d127      	bne.n	800363c <HAL_I2C_Mem_Read_DMA+0x184>
 80035ec:	e013      	b.n	8003616 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e027      	b.n	8003666 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2300      	movs	r3, #0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f001 fd3e 	bl	80050a4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003630:	2101      	movs	r1, #1
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f001 fd68 	bl	8005108 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	e014      	b.n	8003666 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	ffff0000 	.word	0xffff0000
 8003674:	08003e31 	.word	0x08003e31
 8003678:	08004c53 	.word	0x08004c53
 800367c:	08004ce9 	.word	0x08004ce9
 8003680:	80002000 	.word	0x80002000

08003684 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	460b      	mov	r3, r1
 8003692:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	f040 80f1 	bne.w	8003888 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b4:	d101      	bne.n	80036ba <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
 80036b8:	e0e7      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_I2C_IsDeviceReady+0x44>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e0e0      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2224      	movs	r2, #36	; 0x24
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_I2C_IsDeviceReady+0x72>
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036f4:	e004      	b.n	8003700 <HAL_I2C_IsDeviceReady+0x7c>
 80036f6:	897b      	ldrh	r3, [r7, #10]
 80036f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003706:	f7fe ff0d 	bl	8002524 <HAL_GetTick>
 800370a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b20      	cmp	r3, #32
 8003718:	bf0c      	ite	eq
 800371a:	2301      	moveq	r3, #1
 800371c:	2300      	movne	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b10      	cmp	r3, #16
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003738:	e034      	b.n	80037a4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d01a      	beq.n	8003778 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe feef 	bl	8002524 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <HAL_I2C_IsDeviceReady+0xd4>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e088      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b20      	cmp	r3, #32
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b10      	cmp	r3, #16
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80037a4:	7ffb      	ldrb	r3, [r7, #31]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_I2C_IsDeviceReady+0x12c>
 80037aa:	7fbb      	ldrb	r3, [r7, #30]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0c4      	beq.n	800373a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d01a      	beq.n	80037f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2120      	movs	r1, #32
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f001 fac2 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e058      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2220      	movs	r2, #32
 80037de:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e04a      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2120      	movs	r1, #32
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f001 faa7 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e03d      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2210      	movs	r2, #16
 8003814:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2220      	movs	r2, #32
 800381c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d118      	bne.n	8003858 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003834:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	2120      	movs	r1, #32
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f001 fa86 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e01c      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2220      	movs	r2, #32
 8003856:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3301      	adds	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	f63f af3b 	bhi.w	80036de <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	68f9      	ldr	r1, [r7, #12]
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
  }
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	09db      	lsrs	r3, r3, #7
 80038ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800390a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	09db      	lsrs	r3, r3, #7
 800391c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f043 0208 	orr.w	r2, r3, #8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003938:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	0a5b      	lsrs	r3, r3, #9
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	09db      	lsrs	r3, r3, #7
 800394a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003966:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 030b 	and.w	r3, r3, #11
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f001 f84e 	bl	8004a1c <I2C_ITError>
  }
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	70fb      	strb	r3, [r7, #3]
 80039e4:	4613      	mov	r3, r2
 80039e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <I2C_Slave_ISR_IT+0x24>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e0ec      	b.n	8003c42 <I2C_Slave_ISR_IT+0x1fe>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fe66 	bl	800475c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d04d      	beq.n	8003b38 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d047      	beq.n	8003b38 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d128      	bne.n	8003b04 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b28      	cmp	r3, #40	; 0x28
 8003abc:	d108      	bne.n	8003ad0 <I2C_Slave_ISR_IT+0x8c>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac4:	d104      	bne.n	8003ad0 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ac6:	6939      	ldr	r1, [r7, #16]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 ff51 	bl	8004970 <I2C_ITListenCplt>
 8003ace:	e032      	b.n	8003b36 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b29      	cmp	r3, #41	; 0x29
 8003ada:	d10e      	bne.n	8003afa <I2C_Slave_ISR_IT+0xb6>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ae2:	d00a      	beq.n	8003afa <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2210      	movs	r2, #16
 8003aea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f001 f88c 	bl	8004c0a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fd09 	bl	800450a <I2C_ITSlaveSeqCplt>
 8003af8:	e01d      	b.n	8003b36 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2210      	movs	r2, #16
 8003b00:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003b02:	e096      	b.n	8003c32 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2210      	movs	r2, #16
 8003b0a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f043 0204 	orr.w	r2, r3, #4
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <I2C_Slave_ISR_IT+0xe4>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b24:	f040 8085 	bne.w	8003c32 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 ff74 	bl	8004a1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b34:	e07d      	b.n	8003c32 <I2C_Slave_ISR_IT+0x1ee>
 8003b36:	e07c      	b.n	8003c32 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d030      	beq.n	8003ba6 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02a      	beq.n	8003ba6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d018      	beq.n	8003b8c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d14f      	bne.n	8003c36 <I2C_Slave_ISR_IT+0x1f2>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b9c:	d04b      	beq.n	8003c36 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fcb3 	bl	800450a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003ba4:	e047      	b.n	8003c36 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	08db      	lsrs	r3, r3, #3
 8003bb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003bbe:	6939      	ldr	r1, [r7, #16]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fbe1 	bl	8004388 <I2C_ITAddrCplt>
 8003bc6:	e037      	b.n	8003c38 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d031      	beq.n	8003c38 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d02b      	beq.n	8003c38 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c1a:	e00d      	b.n	8003c38 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c22:	d002      	beq.n	8003c2a <I2C_Slave_ISR_IT+0x1e6>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fc6d 	bl	800450a <I2C_ITSlaveSeqCplt>
 8003c30:	e002      	b.n	8003c38 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003c36:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b088      	sub	sp, #32
 8003c4e:	af02      	add	r7, sp, #8
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <I2C_Master_ISR_DMA+0x1a>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e0e1      	b.n	8003e28 <I2C_Master_ISR_DMA+0x1de>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d011      	beq.n	8003ca8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003c98:	2120      	movs	r1, #32
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f001 fa34 	bl	8005108 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 ffb2 	bl	8004c0a <I2C_Flush_TXDR>
 8003ca6:	e0ba      	b.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d072      	beq.n	8003d9a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	099b      	lsrs	r3, r3, #6
 8003cb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d06c      	beq.n	8003d9a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04e      	beq.n	8003d78 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2bff      	cmp	r3, #255	; 0xff
 8003cf0:	d906      	bls.n	8003d00 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e010      	b.n	8003d22 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d12:	d003      	beq.n	8003d1c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e002      	b.n	8003d22 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d20:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	8a79      	ldrh	r1, [r7, #18]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f001 f9b7 	bl	80050a4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b22      	cmp	r3, #34	; 0x22
 8003d52:	d108      	bne.n	8003d66 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d64:	e05b      	b.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d76:	e052      	b.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d86:	d003      	beq.n	8003d90 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fb81 	bl	8004490 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003d8e:	e046      	b.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d90:	2140      	movs	r1, #64	; 0x40
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fe42 	bl	8004a1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003d98:	e041      	b.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d029      	beq.n	8003dfa <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d023      	beq.n	8003dfa <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d119      	bne.n	8003df0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dca:	d027      	beq.n	8003e1c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dd4:	d108      	bne.n	8003de8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003de6:	e019      	b.n	8003e1c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fb51 	bl	8004490 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003dee:	e015      	b.n	8003e1c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003df0:	2140      	movs	r1, #64	; 0x40
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fe12 	bl	8004a1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003df8:	e010      	b.n	8003e1c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fbd7 	bl	80045c8 <I2C_ITMasterCplt>
 8003e1a:	e000      	b.n	8003e1e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003e1c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003e3c:	4b8c      	ldr	r3, [pc, #560]	; (8004070 <I2C_Mem_ISR_DMA+0x240>)
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <I2C_Mem_ISR_DMA+0x1e>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e10c      	b.n	8004068 <I2C_Mem_ISR_DMA+0x238>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d017      	beq.n	8003e92 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2210      	movs	r2, #16
 8003e74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0204 	orr.w	r2, r3, #4
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e82:	2120      	movs	r1, #32
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f001 f93f 	bl	8005108 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 febd 	bl	8004c0a <I2C_Flush_TXDR>
 8003e90:	e0e5      	b.n	800405e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00f      	beq.n	8003ebe <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50
 8003ebc:	e0cf      	b.n	800405e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	09db      	lsrs	r3, r3, #7
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d05c      	beq.n	8003f84 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d056      	beq.n	8003f84 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003ed6:	2110      	movs	r1, #16
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f001 f915 	bl	8005108 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d048      	beq.n	8003f7a <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2bff      	cmp	r3, #255	; 0xff
 8003ef0:	d910      	bls.n	8003f14 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	22ff      	movs	r2, #255	; 0xff
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efc:	b299      	uxth	r1, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f001 f8c9 	bl	80050a4 <I2C_TransferConfig>
 8003f12:	e011      	b.n	8003f38 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	b299      	uxth	r1, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f001 f8b6 	bl	80050a4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b22      	cmp	r3, #34	; 0x22
 8003f54:	d108      	bne.n	8003f68 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f66:	e07a      	b.n	800405e <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f78:	e071      	b.n	800405e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fd4d 	bl	8004a1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f82:	e06c      	b.n	800405e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d056      	beq.n	800403e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d050      	beq.n	800403e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b22      	cmp	r3, #34	; 0x22
 8003fa6:	d101      	bne.n	8003fac <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8003fa8:	4b32      	ldr	r3, [pc, #200]	; (8004074 <I2C_Mem_ISR_DMA+0x244>)
 8003faa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2bff      	cmp	r3, #255	; 0xff
 8003fb4:	d910      	bls.n	8003fd8 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc0:	b299      	uxth	r1, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f001 f867 	bl	80050a4 <I2C_TransferConfig>
 8003fd6:	e011      	b.n	8003ffc <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	b299      	uxth	r1, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f001 f854 	bl	80050a4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b22      	cmp	r3, #34	; 0x22
 8004018:	d108      	bne.n	800402c <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004028:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800402a:	e018      	b.n	800405e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800403c:	e00f      	b.n	800405e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fab5 	bl	80045c8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	80002000 	.word	0x80002000
 8004074:	80002400 	.word	0x80002400

08004078 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <I2C_Slave_ISR_DMA+0x24>
 8004098:	2302      	movs	r3, #2
 800409a:	e0c9      	b.n	8004230 <I2C_Slave_ISR_DMA+0x1b8>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fb4c 	bl	800475c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 809a 	beq.w	8004206 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8093 	beq.w	8004206 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0b9b      	lsrs	r3, r3, #14
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d105      	bne.n	80040f8 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0bdb      	lsrs	r3, r3, #15
 80040f0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d07f      	beq.n	80041f8 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0bdb      	lsrs	r3, r3, #15
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004118:	2301      	movs	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	0b9b      	lsrs	r3, r3, #14
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800413c:	2301      	movs	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d128      	bne.n	8004198 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b28      	cmp	r3, #40	; 0x28
 8004150:	d108      	bne.n	8004164 <I2C_Slave_ISR_DMA+0xec>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004158:	d104      	bne.n	8004164 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fc07 	bl	8004970 <I2C_ITListenCplt>
 8004162:	e048      	b.n	80041f6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b29      	cmp	r3, #41	; 0x29
 800416e:	d10e      	bne.n	800418e <I2C_Slave_ISR_DMA+0x116>
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004176:	d00a      	beq.n	800418e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2210      	movs	r2, #16
 800417e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fd42 	bl	8004c0a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f9bf 	bl	800450a <I2C_ITSlaveSeqCplt>
 800418c:	e033      	b.n	80041f6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2210      	movs	r2, #16
 8004194:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004196:	e034      	b.n	8004202 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2210      	movs	r2, #16
 800419e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <I2C_Slave_ISR_DMA+0x14a>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041c0:	d11f      	bne.n	8004202 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b21      	cmp	r3, #33	; 0x21
 80041c6:	d002      	beq.n	80041ce <I2C_Slave_ISR_DMA+0x156>
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	2b29      	cmp	r3, #41	; 0x29
 80041cc:	d103      	bne.n	80041d6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2221      	movs	r2, #33	; 0x21
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
 80041d4:	e008      	b.n	80041e8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	2b22      	cmp	r3, #34	; 0x22
 80041da:	d002      	beq.n	80041e2 <I2C_Slave_ISR_DMA+0x16a>
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b2a      	cmp	r3, #42	; 0x2a
 80041e0:	d102      	bne.n	80041e8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2222      	movs	r2, #34	; 0x22
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	4619      	mov	r1, r3
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fc14 	bl	8004a1c <I2C_ITError>
      if (treatdmanack == 1U)
 80041f4:	e005      	b.n	8004202 <I2C_Slave_ISR_DMA+0x18a>
 80041f6:	e004      	b.n	8004202 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2210      	movs	r2, #16
 80041fe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004200:	e011      	b.n	8004226 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004202:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004204:	e00f      	b.n	8004226 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f8b1 	bl	8004388 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	4608      	mov	r0, r1
 8004242:	4611      	mov	r1, r2
 8004244:	461a      	mov	r2, r3
 8004246:	4603      	mov	r3, r0
 8004248:	817b      	strh	r3, [r7, #10]
 800424a:	460b      	mov	r3, r1
 800424c:	813b      	strh	r3, [r7, #8]
 800424e:	4613      	mov	r3, r2
 8004250:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	8979      	ldrh	r1, [r7, #10]
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <I2C_RequestMemoryWrite+0xa4>)
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 ff1f 	bl	80050a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	69b9      	ldr	r1, [r7, #24]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fdb1 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e02c      	b.n	80042d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d105      	bne.n	800428c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004280:	893b      	ldrh	r3, [r7, #8]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
 800428a:	e015      	b.n	80042b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800428c:	893b      	ldrh	r3, [r7, #8]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	b29b      	uxth	r3, r3
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fd97 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e012      	b.n	80042d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ae:	893b      	ldrh	r3, [r7, #8]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2200      	movs	r2, #0
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fd45 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	80002000 	.word	0x80002000

080042e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	4608      	mov	r0, r1
 80042ea:	4611      	mov	r1, r2
 80042ec:	461a      	mov	r2, r3
 80042ee:	4603      	mov	r3, r0
 80042f0:	817b      	strh	r3, [r7, #10]
 80042f2:	460b      	mov	r3, r1
 80042f4:	813b      	strh	r3, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	8979      	ldrh	r1, [r7, #10]
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <I2C_RequestMemoryRead+0xa4>)
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2300      	movs	r3, #0
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fecc 	bl	80050a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fd5e 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e02c      	b.n	800437a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004326:	893b      	ldrh	r3, [r7, #8]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
 8004330:	e015      	b.n	800435e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004332:	893b      	ldrh	r3, [r7, #8]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	b29b      	uxth	r3, r3
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	69b9      	ldr	r1, [r7, #24]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fd44 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e012      	b.n	800437a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004354:	893b      	ldrh	r3, [r7, #8]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2200      	movs	r2, #0
 8004366:	2140      	movs	r1, #64	; 0x40
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fcf2 	bl	8004d52 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	80002000 	.word	0x80002000

08004388 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800439e:	2b28      	cmp	r3, #40	; 0x28
 80043a0:	d16a      	bne.n	8004478 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80043c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80043dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d138      	bne.n	8004458 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80043e6:	897b      	ldrh	r3, [r7, #10]
 80043e8:	09db      	lsrs	r3, r3, #7
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	89bb      	ldrh	r3, [r7, #12]
 80043ee:	4053      	eors	r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	f003 0306 	and.w	r3, r3, #6
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11c      	bne.n	8004434 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	2b02      	cmp	r3, #2
 800440e:	d13b      	bne.n	8004488 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2208      	movs	r2, #8
 800441c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004426:	89ba      	ldrh	r2, [r7, #12]
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fad3 	bl	80039d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004432:	e029      	b.n	8004488 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fecd 	bl	80051dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800444a:	89ba      	ldrh	r2, [r7, #12]
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fac1 	bl	80039d8 <HAL_I2C_AddrCallback>
}
 8004456:	e017      	b.n	8004488 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 febd 	bl	80051dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800446a:	89ba      	ldrh	r2, [r7, #12]
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff fab1 	bl	80039d8 <HAL_I2C_AddrCallback>
}
 8004476:	e007      	b.n	8004488 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2208      	movs	r2, #8
 800447e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b21      	cmp	r3, #33	; 0x21
 80044aa:	d115      	bne.n	80044d8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2211      	movs	r2, #17
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044c0:	2101      	movs	r1, #1
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fe8a 	bl	80051dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fa59 	bl	8003988 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044d6:	e014      	b.n	8004502 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2212      	movs	r2, #18
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044ec:	2102      	movs	r1, #2
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fe74 	bl	80051dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff fa4d 	bl	800399c <HAL_I2C_MasterRxCpltCallback>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0b9b      	lsrs	r3, r3, #14
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e00d      	b.n	800455c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	0bdb      	lsrs	r3, r3, #15
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b29      	cmp	r3, #41	; 0x29
 8004566:	d112      	bne.n	800458e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2228      	movs	r2, #40	; 0x28
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2221      	movs	r2, #33	; 0x21
 8004574:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004576:	2101      	movs	r1, #1
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fe2f 	bl	80051dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fa12 	bl	80039b0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800458c:	e017      	b.n	80045be <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b2a      	cmp	r3, #42	; 0x2a
 8004598:	d111      	bne.n	80045be <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2228      	movs	r2, #40	; 0x28
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2222      	movs	r2, #34	; 0x22
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045a8:	2102      	movs	r1, #2
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fe16 	bl	80051dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fa03 	bl	80039c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2220      	movs	r2, #32
 80045dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b21      	cmp	r3, #33	; 0x21
 80045e8:	d107      	bne.n	80045fa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045ea:	2101      	movs	r1, #1
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fdf5 	bl	80051dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2211      	movs	r2, #17
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
 80045f8:	e00c      	b.n	8004614 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b22      	cmp	r3, #34	; 0x22
 8004604:	d106      	bne.n	8004614 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004606:	2102      	movs	r1, #2
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fde7 	bl	80051dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2212      	movs	r2, #18
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b4d      	ldr	r3, [pc, #308]	; (8004754 <I2C_ITMasterCplt+0x18c>)
 8004620:	400b      	ands	r3, r1
 8004622:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a4a      	ldr	r2, [pc, #296]	; (8004758 <I2C_ITMasterCplt+0x190>)
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2210      	movs	r2, #16
 8004642:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	f043 0204 	orr.w	r2, r3, #4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d10b      	bne.n	8004674 <I2C_ITMasterCplt+0xac>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	b2db      	uxtb	r3, r3
 8004670:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004672:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fac8 	bl	8004c0a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b60      	cmp	r3, #96	; 0x60
 800468a:	d002      	beq.n	8004692 <I2C_ITMasterCplt+0xca>
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9bf 	bl	8004a1c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800469e:	e054      	b.n	800474a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b21      	cmp	r3, #33	; 0x21
 80046aa:	d124      	bne.n	80046f6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d10b      	bne.n	80046de <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff f996 	bl	8003a08 <HAL_I2C_MemTxCpltCallback>
}
 80046dc:	e035      	b.n	800474a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff f94a 	bl	8003988 <HAL_I2C_MasterTxCpltCallback>
}
 80046f4:	e029      	b.n	800474a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b22      	cmp	r3, #34	; 0x22
 8004700:	d123      	bne.n	800474a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d10b      	bne.n	8004734 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7fd f93f 	bl	80019b0 <HAL_I2C_MemRxCpltCallback>
}
 8004732:	e00a      	b.n	800474a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff f929 	bl	800399c <HAL_I2C_MasterRxCpltCallback>
}
 800474a:	bf00      	nop
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	fe00e800 	.word	0xfe00e800
 8004758:	ffff0000 	.word	0xffff0000

0800475c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004778:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2220      	movs	r2, #32
 8004780:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b21      	cmp	r3, #33	; 0x21
 8004786:	d002      	beq.n	800478e <I2C_ITSlaveCplt+0x32>
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b29      	cmp	r3, #41	; 0x29
 800478c:	d108      	bne.n	80047a0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800478e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fd22 	bl	80051dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2221      	movs	r2, #33	; 0x21
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
 800479e:	e00d      	b.n	80047bc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b22      	cmp	r3, #34	; 0x22
 80047a4:	d002      	beq.n	80047ac <I2C_ITSlaveCplt+0x50>
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b2a      	cmp	r3, #42	; 0x2a
 80047aa:	d107      	bne.n	80047bc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80047ac:	f248 0102 	movw	r1, #32770	; 0x8002
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fd13 	bl	80051dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2222      	movs	r2, #34	; 0x22
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ca:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b64      	ldr	r3, [pc, #400]	; (8004968 <I2C_ITSlaveCplt+0x20c>)
 80047d8:	400b      	ands	r3, r1
 80047da:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa14 	bl	8004c0a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	0b9b      	lsrs	r3, r3, #14
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d013      	beq.n	8004816 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	2b00      	cmp	r3, #0
 8004804:	d020      	beq.n	8004848 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004814:	e018      	b.n	8004848 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	0bdb      	lsrs	r3, r3, #15
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d012      	beq.n	8004848 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004830:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d006      	beq.n	8004848 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	089b      	lsrs	r3, r3, #2
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0304 	bic.w	r3, r3, #4
 800485a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a4:	f043 0204 	orr.w	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d010      	beq.n	80048e4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f8a7 	bl	8004a1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b28      	cmp	r3, #40	; 0x28
 80048d8:	d141      	bne.n	800495e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f847 	bl	8004970 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048e2:	e03c      	b.n	800495e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048ec:	d014      	beq.n	8004918 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fe0b 	bl	800450a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a1d      	ldr	r2, [pc, #116]	; (800496c <I2C_ITSlaveCplt+0x210>)
 80048f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff f86f 	bl	80039f4 <HAL_I2C_ListenCpltCallback>
}
 8004916:	e022      	b.n	800495e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b22      	cmp	r3, #34	; 0x22
 8004922:	d10e      	bne.n	8004942 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff f842 	bl	80039c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004940:	e00d      	b.n	800495e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff f829 	bl	80039b0 <HAL_I2C_SlaveTxCpltCallback>
}
 800495e:	bf00      	nop
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	fe00e800 	.word	0xfe00e800
 800496c:	ffff0000 	.word	0xffff0000

08004970 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <I2C_ITListenCplt+0xa8>)
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049ee:	f248 0103 	movw	r1, #32771	; 0x8003
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fbf2 	bl	80051dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2210      	movs	r2, #16
 80049fe:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fe fff3 	bl	80039f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	ffff0000 	.word	0xffff0000

08004a1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a5d      	ldr	r2, [pc, #372]	; (8004bb0 <I2C_ITError+0x194>)
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b28      	cmp	r3, #40	; 0x28
 8004a52:	d005      	beq.n	8004a60 <I2C_ITError+0x44>
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b29      	cmp	r3, #41	; 0x29
 8004a58:	d002      	beq.n	8004a60 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5e:	d10b      	bne.n	8004a78 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a60:	2103      	movs	r1, #3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fbba 	bl	80051dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2228      	movs	r2, #40	; 0x28
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a50      	ldr	r2, [pc, #320]	; (8004bb4 <I2C_ITError+0x198>)
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34
 8004a76:	e011      	b.n	8004a9c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a78:	f248 0103 	movw	r1, #32771	; 0x8003
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fbad 	bl	80051dc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b60      	cmp	r3, #96	; 0x60
 8004a8c:	d003      	beq.n	8004a96 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d039      	beq.n	8004b1e <I2C_ITError+0x102>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b11      	cmp	r3, #17
 8004aae:	d002      	beq.n	8004ab6 <I2C_ITError+0x9a>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b21      	cmp	r3, #33	; 0x21
 8004ab4:	d133      	bne.n	8004b1e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac4:	d107      	bne.n	8004ad6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ad4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe f83c 	bl	8002b58 <HAL_DMA_GetState>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d017      	beq.n	8004b16 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	4a33      	ldr	r2, [pc, #204]	; (8004bb8 <I2C_ITError+0x19c>)
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd ff3c 	bl	8002978 <HAL_DMA_Abort_IT>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04d      	beq.n	8004ba2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b10:	4610      	mov	r0, r2
 8004b12:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b14:	e045      	b.n	8004ba2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f850 	bl	8004bbc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b1c:	e041      	b.n	8004ba2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d039      	beq.n	8004b9a <I2C_ITError+0x17e>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b12      	cmp	r3, #18
 8004b2a:	d002      	beq.n	8004b32 <I2C_ITError+0x116>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b22      	cmp	r3, #34	; 0x22
 8004b30:	d133      	bne.n	8004b9a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b40:	d107      	bne.n	8004b52 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b50:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fffe 	bl	8002b58 <HAL_DMA_GetState>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d017      	beq.n	8004b92 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <I2C_ITError+0x19c>)
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fefe 	bl	8002978 <HAL_DMA_Abort_IT>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d011      	beq.n	8004ba6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b90:	e009      	b.n	8004ba6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f812 	bl	8004bbc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b98:	e005      	b.n	8004ba6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f80e 	bl	8004bbc <I2C_TreatErrorCallback>
  }
}
 8004ba0:	e002      	b.n	8004ba8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ba6:	bf00      	nop
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	ffff0000 	.word	0xffff0000
 8004bb4:	08003a45 	.word	0x08003a45
 8004bb8:	08004d17 	.word	0x08004d17

08004bbc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d10e      	bne.n	8004bee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fe ff22 	bl	8003a30 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bec:	e009      	b.n	8004c02 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fe ff0d 	bl	8003a1c <HAL_I2C_ErrorCallback>
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d103      	bne.n	8004c28 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d007      	beq.n	8004c46 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	619a      	str	r2, [r3, #24]
  }
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c6e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c7a:	2120      	movs	r1, #32
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fa43 	bl	8005108 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004c82:	e02d      	b.n	8004ce0 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004c8c:	441a      	add	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2bff      	cmp	r3, #255	; 0xff
 8004c9a:	d903      	bls.n	8004ca4 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	22ff      	movs	r2, #255	; 0xff
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ca2:	e004      	b.n	8004cae <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3324      	adds	r3, #36	; 0x24
 8004cb8:	4619      	mov	r1, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004cc4:	f7fd fdf8 	bl	80028b8 <HAL_DMA_Start_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004cce:	2110      	movs	r1, #16
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff fea3 	bl	8004a1c <I2C_ITError>
}
 8004cd6:	e003      	b.n	8004ce0 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fa14 	bl	8005108 <I2C_Enable_IRQ>
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d04:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004d06:	2110      	movs	r1, #16
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fe87 	bl	8004a1c <I2C_ITError>
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	2200      	movs	r2, #0
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d40:	2200      	movs	r2, #0
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff ff39 	bl	8004bbc <I2C_TreatErrorCallback>
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d62:	e022      	b.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d01e      	beq.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6c:	f7fd fbda 	bl	8002524 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d302      	bcc.n	8004d82 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d113      	bne.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e00f      	b.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699a      	ldr	r2, [r3, #24]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	bf0c      	ite	eq
 8004dba:	2301      	moveq	r3, #1
 8004dbc:	2300      	movne	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d0cd      	beq.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dde:	e02c      	b.n	8004e3a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f871 	bl	8004ecc <I2C_IsErrorOccurred>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e02a      	b.n	8004e4a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d01e      	beq.n	8004e3a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfc:	f7fd fb92 	bl	8002524 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d113      	bne.n	8004e3a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e007      	b.n	8004e4a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d1cb      	bne.n	8004de0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e5e:	e028      	b.n	8004eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f831 	bl	8004ecc <I2C_IsErrorOccurred>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e026      	b.n	8004ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e74:	f7fd fb56 	bl	8002524 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d302      	bcc.n	8004e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d113      	bne.n	8004eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	f043 0220 	orr.w	r2, r3, #32
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e007      	b.n	8004ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d1cf      	bne.n	8004e60 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d075      	beq.n	8004fe4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2210      	movs	r2, #16
 8004efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f00:	e056      	b.n	8004fb0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d052      	beq.n	8004fb0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7fd fb0b 	bl	8002524 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <I2C_IsErrorOccurred+0x54>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d147      	bne.n	8004fb0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d12e      	bne.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d02a      	beq.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d027      	beq.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f62:	f7fd fadf 	bl	8002524 <HAL_GetTick>
 8004f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f68:	e01b      	b.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f6a:	f7fd fadb 	bl	8002524 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b19      	cmp	r3, #25
 8004f76:	d914      	bls.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d1dc      	bne.n	8004f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d003      	beq.n	8004fc6 <I2C_IsErrorOccurred+0xfa>
 8004fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d09d      	beq.n	8004f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005006:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f043 0308 	orr.w	r3, r3, #8
 800501e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01c      	beq.n	8005094 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fdd5 	bl	8004c0a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <I2C_IsErrorOccurred+0x1d4>)
 800506c:	400b      	ands	r3, r1
 800506e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	431a      	orrs	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	; 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	fe00e800 	.word	0xfe00e800

080050a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	817b      	strh	r3, [r7, #10]
 80050b2:	4613      	mov	r3, r2
 80050b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050bc:	7a7b      	ldrb	r3, [r7, #9]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	0d5b      	lsrs	r3, r3, #21
 80050de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <I2C_TransferConfig+0x60>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	43db      	mvns	r3, r3
 80050e8:	ea02 0103 	and.w	r1, r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	03ff63ff 	.word	0x03ff63ff

08005108 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511c:	4a2d      	ldr	r2, [pc, #180]	; (80051d4 <I2C_Enable_IRQ+0xcc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d004      	beq.n	800512c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005126:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <I2C_Enable_IRQ+0xd0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d11d      	bne.n	8005168 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800512c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005130:	2b00      	cmp	r3, #0
 8005132:	da03      	bge.n	800513c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800513a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	2b10      	cmp	r3, #16
 8005140:	d103      	bne.n	800514a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005148:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	2b20      	cmp	r3, #32
 800514e:	d103      	bne.n	8005158 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005156:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005158:	887b      	ldrh	r3, [r7, #2]
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	d12c      	bne.n	80051b8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005164:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005166:	e027      	b.n	80051b8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da03      	bge.n	8005178 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005176:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005178:	887b      	ldrh	r3, [r7, #2]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005188:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800518a:	887b      	ldrh	r3, [r7, #2]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800519a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800519c:	887b      	ldrh	r3, [r7, #2]
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d103      	bne.n	80051aa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80051a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051aa:	887b      	ldrh	r3, [r7, #2]
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d103      	bne.n	80051b8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f043 0320 	orr.w	r3, r3, #32
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6819      	ldr	r1, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	08003c4b 	.word	0x08003c4b
 80051d8:	08004079 	.word	0x08004079

080051dc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051ec:	887b      	ldrh	r3, [r7, #2]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00f      	beq.n	8005216 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80051fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800520a:	2b28      	cmp	r3, #40	; 0x28
 800520c:	d003      	beq.n	8005216 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005214:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005216:	887b      	ldrh	r3, [r7, #2]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00f      	beq.n	8005240 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005226:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005234:	2b28      	cmp	r3, #40	; 0x28
 8005236:	d003      	beq.n	8005240 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800523e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005240:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da03      	bge.n	8005250 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800524e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005250:	887b      	ldrh	r3, [r7, #2]
 8005252:	2b10      	cmp	r3, #16
 8005254:	d103      	bne.n	800525e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800525c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800525e:	887b      	ldrh	r3, [r7, #2]
 8005260:	2b20      	cmp	r3, #32
 8005262:	d103      	bne.n	800526c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f043 0320 	orr.w	r3, r3, #32
 800526a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800526c:	887b      	ldrh	r3, [r7, #2]
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d103      	bne.n	800527a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005278:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	43da      	mvns	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	400a      	ands	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d138      	bne.n	8005320 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e032      	b.n	8005322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	e000      	b.n	8005322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	d139      	bne.n	80053b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800534e:	2302      	movs	r3, #2
 8005350:	e033      	b.n	80053ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2224      	movs	r2, #36	; 0x24
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005380:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e000      	b.n	80053ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053b8:	2302      	movs	r3, #2
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d6:	6013      	str	r3, [r2, #0]
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40007000 	.word	0x40007000

080053e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053ec:	4b04      	ldr	r3, [pc, #16]	; (8005400 <HAL_PWREx_GetVoltageRange+0x18>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40007000 	.word	0x40007000

08005404 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005412:	d130      	bne.n	8005476 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005414:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800541c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005420:	d038      	beq.n	8005494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005422:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800542a:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005430:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005432:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2232      	movs	r2, #50	; 0x32
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	4a1b      	ldr	r2, [pc, #108]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	0c9b      	lsrs	r3, r3, #18
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005448:	e002      	b.n	8005450 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3b01      	subs	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545c:	d102      	bne.n	8005464 <HAL_PWREx_ControlVoltageScaling+0x60>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f2      	bne.n	800544a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005470:	d110      	bne.n	8005494 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d007      	beq.n	8005494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800548c:	4a05      	ldr	r2, [pc, #20]	; (80054a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005492:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40007000 	.word	0x40007000
 80054a8:	20000000 	.word	0x20000000
 80054ac:	431bde83 	.word	0x431bde83

080054b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d102      	bne.n	80054c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f000 bc02 	b.w	8005cc8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c4:	4b96      	ldr	r3, [pc, #600]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ce:	4b94      	ldr	r3, [pc, #592]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80e4 	beq.w	80056ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d007      	beq.n	80054fc <HAL_RCC_OscConfig+0x4c>
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b0c      	cmp	r3, #12
 80054f0:	f040 808b 	bne.w	800560a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	f040 8087 	bne.w	800560a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054fc:	4b88      	ldr	r3, [pc, #544]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_OscConfig+0x64>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e3d9      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	4b81      	ldr	r3, [pc, #516]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_RCC_OscConfig+0x7e>
 8005524:	4b7e      	ldr	r3, [pc, #504]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800552c:	e005      	b.n	800553a <HAL_RCC_OscConfig+0x8a>
 800552e:	4b7c      	ldr	r3, [pc, #496]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553a:	4293      	cmp	r3, r2
 800553c:	d223      	bcs.n	8005586 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fdbe 	bl	80060c4 <RCC_SetFlashLatencyFromMSIRange>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e3ba      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005552:	4b73      	ldr	r3, [pc, #460]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a72      	ldr	r2, [pc, #456]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005558:	f043 0308 	orr.w	r3, r3, #8
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4b70      	ldr	r3, [pc, #448]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	496d      	ldr	r1, [pc, #436]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800556c:	4313      	orrs	r3, r2
 800556e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005570:	4b6b      	ldr	r3, [pc, #428]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	4968      	ldr	r1, [pc, #416]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]
 8005584:	e025      	b.n	80055d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005586:	4b66      	ldr	r3, [pc, #408]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a65      	ldr	r2, [pc, #404]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800558c:	f043 0308 	orr.w	r3, r3, #8
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	4b63      	ldr	r3, [pc, #396]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	4960      	ldr	r1, [pc, #384]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055a4:	4b5e      	ldr	r3, [pc, #376]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	495b      	ldr	r1, [pc, #364]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fd7e 	bl	80060c4 <RCC_SetFlashLatencyFromMSIRange>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e37a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055d2:	f000 fc81 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 80055d6:	4602      	mov	r2, r0
 80055d8:	4b51      	ldr	r3, [pc, #324]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	4950      	ldr	r1, [pc, #320]	; (8005724 <HAL_RCC_OscConfig+0x274>)
 80055e4:	5ccb      	ldrb	r3, [r1, r3]
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	4a4e      	ldr	r2, [pc, #312]	; (8005728 <HAL_RCC_OscConfig+0x278>)
 80055f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055f2:	4b4e      	ldr	r3, [pc, #312]	; (800572c <HAL_RCC_OscConfig+0x27c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fc fd96 	bl	8002128 <HAL_InitTick>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d052      	beq.n	80056ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	e35e      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d032      	beq.n	8005678 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005612:	4b43      	ldr	r3, [pc, #268]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a42      	ldr	r2, [pc, #264]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800561e:	f7fc ff81 	bl	8002524 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005626:	f7fc ff7d 	bl	8002524 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e347      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005638:	4b39      	ldr	r3, [pc, #228]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005644:	4b36      	ldr	r3, [pc, #216]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a35      	ldr	r2, [pc, #212]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800564a:	f043 0308 	orr.w	r3, r3, #8
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	4b33      	ldr	r3, [pc, #204]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4930      	ldr	r1, [pc, #192]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005662:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	492b      	ldr	r1, [pc, #172]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005672:	4313      	orrs	r3, r2
 8005674:	604b      	str	r3, [r1, #4]
 8005676:	e01a      	b.n	80056ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005678:	4b29      	ldr	r3, [pc, #164]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a28      	ldr	r2, [pc, #160]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005684:	f7fc ff4e 	bl	8002524 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800568c:	f7fc ff4a 	bl	8002524 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e314      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x1dc>
 80056aa:	e000      	b.n	80056ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d073      	beq.n	80057a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d005      	beq.n	80056cc <HAL_RCC_OscConfig+0x21c>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d10e      	bne.n	80056e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d10b      	bne.n	80056e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056cc:	4b14      	ldr	r3, [pc, #80]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d063      	beq.n	80057a0 <HAL_RCC_OscConfig+0x2f0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d15f      	bne.n	80057a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e2f1      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ec:	d106      	bne.n	80056fc <HAL_RCC_OscConfig+0x24c>
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 80056f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	e025      	b.n	8005748 <HAL_RCC_OscConfig+0x298>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005704:	d114      	bne.n	8005730 <HAL_RCC_OscConfig+0x280>
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a05      	ldr	r2, [pc, #20]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 800570c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	4b03      	ldr	r3, [pc, #12]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a02      	ldr	r2, [pc, #8]	; (8005720 <HAL_RCC_OscConfig+0x270>)
 8005718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	e013      	b.n	8005748 <HAL_RCC_OscConfig+0x298>
 8005720:	40021000 	.word	0x40021000
 8005724:	0800e53c 	.word	0x0800e53c
 8005728:	20000000 	.word	0x20000000
 800572c:	20000004 	.word	0x20000004
 8005730:	4ba0      	ldr	r3, [pc, #640]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a9f      	ldr	r2, [pc, #636]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	4b9d      	ldr	r3, [pc, #628]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a9c      	ldr	r2, [pc, #624]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d013      	beq.n	8005778 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fc fee8 	bl	8002524 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005758:	f7fc fee4 	bl	8002524 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	; 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e2ae      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800576a:	4b92      	ldr	r3, [pc, #584]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x2a8>
 8005776:	e014      	b.n	80057a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc fed4 	bl	8002524 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7fc fed0 	bl	8002524 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e29a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005792:	4b88      	ldr	r3, [pc, #544]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x2d0>
 800579e:	e000      	b.n	80057a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d060      	beq.n	8005870 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_OscConfig+0x310>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b0c      	cmp	r3, #12
 80057b8:	d119      	bne.n	80057ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d116      	bne.n	80057ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c0:	4b7c      	ldr	r3, [pc, #496]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_OscConfig+0x328>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e277      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b76      	ldr	r3, [pc, #472]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	4973      	ldr	r1, [pc, #460]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ec:	e040      	b.n	8005870 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d023      	beq.n	800583e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f6:	4b6f      	ldr	r3, [pc, #444]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6e      	ldr	r2, [pc, #440]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80057fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005802:	f7fc fe8f 	bl	8002524 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800580a:	f7fc fe8b 	bl	8002524 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e255      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800581c:	4b65      	ldr	r3, [pc, #404]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005828:	4b62      	ldr	r3, [pc, #392]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	495f      	ldr	r1, [pc, #380]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]
 800583c:	e018      	b.n	8005870 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583e:	4b5d      	ldr	r3, [pc, #372]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a5c      	ldr	r2, [pc, #368]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fc fe6b 	bl	8002524 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005852:	f7fc fe67 	bl	8002524 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e231      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005864:	4b53      	ldr	r3, [pc, #332]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f0      	bne.n	8005852 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d03c      	beq.n	80058f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01c      	beq.n	80058be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005884:	4b4b      	ldr	r3, [pc, #300]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588a:	4a4a      	ldr	r2, [pc, #296]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fc fe46 	bl	8002524 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800589c:	f7fc fe42 	bl	8002524 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e20c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058ae:	4b41      	ldr	r3, [pc, #260]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80058b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ef      	beq.n	800589c <HAL_RCC_OscConfig+0x3ec>
 80058bc:	e01b      	b.n	80058f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058be:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80058c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c4:	4a3b      	ldr	r2, [pc, #236]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ce:	f7fc fe29 	bl	8002524 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d6:	f7fc fe25 	bl	8002524 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1ef      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058e8:	4b32      	ldr	r3, [pc, #200]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80058ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ef      	bne.n	80058d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80a6 	beq.w	8005a50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005904:	2300      	movs	r3, #0
 8005906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005908:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591e:	6593      	str	r3, [r2, #88]	; 0x58
 8005920:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800592c:	2301      	movs	r3, #1
 800592e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005930:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_RCC_OscConfig+0x508>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d118      	bne.n	800596e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800593c:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <HAL_RCC_OscConfig+0x508>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <HAL_RCC_OscConfig+0x508>)
 8005942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005948:	f7fc fdec 	bl	8002524 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005950:	f7fc fde8 	bl	8002524 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e1b2      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <HAL_RCC_OscConfig+0x508>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d108      	bne.n	8005988 <HAL_RCC_OscConfig+0x4d8>
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597c:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 800597e:	f043 0301 	orr.w	r3, r3, #1
 8005982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005986:	e029      	b.n	80059dc <HAL_RCC_OscConfig+0x52c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b05      	cmp	r3, #5
 800598e:	d115      	bne.n	80059bc <HAL_RCC_OscConfig+0x50c>
 8005990:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005996:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 8005998:	f043 0304 	orr.w	r3, r3, #4
 800599c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	4a03      	ldr	r2, [pc, #12]	; (80059b4 <HAL_RCC_OscConfig+0x504>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b0:	e014      	b.n	80059dc <HAL_RCC_OscConfig+0x52c>
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000
 80059b8:	40007000 	.word	0x40007000
 80059bc:	4b9a      	ldr	r3, [pc, #616]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	4a99      	ldr	r2, [pc, #612]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059cc:	4b96      	ldr	r3, [pc, #600]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	4a95      	ldr	r2, [pc, #596]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 80059d4:	f023 0304 	bic.w	r3, r3, #4
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d016      	beq.n	8005a12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fc fd9e 	bl	8002524 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fc fd9a 	bl	8002524 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e162      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a02:	4b89      	ldr	r3, [pc, #548]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0ed      	beq.n	80059ec <HAL_RCC_OscConfig+0x53c>
 8005a10:	e015      	b.n	8005a3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a12:	f7fc fd87 	bl	8002524 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a18:	e00a      	b.n	8005a30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1a:	f7fc fd83 	bl	8002524 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e14b      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a30:	4b7d      	ldr	r3, [pc, #500]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ed      	bne.n	8005a1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a3e:	7ffb      	ldrb	r3, [r7, #31]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d105      	bne.n	8005a50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a44:	4b78      	ldr	r3, [pc, #480]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a48:	4a77      	ldr	r2, [pc, #476]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d03c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01c      	beq.n	8005a9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a64:	4b70      	ldr	r3, [pc, #448]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a6a:	4a6f      	ldr	r2, [pc, #444]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a74:	f7fc fd56 	bl	8002524 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a7c:	f7fc fd52 	bl	8002524 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e11c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a8e:	4b66      	ldr	r3, [pc, #408]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0ef      	beq.n	8005a7c <HAL_RCC_OscConfig+0x5cc>
 8005a9c:	e01b      	b.n	8005ad6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a9e:	4b62      	ldr	r3, [pc, #392]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aa4:	4a60      	ldr	r2, [pc, #384]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aae:	f7fc fd39 	bl	8002524 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ab6:	f7fc fd35 	bl	8002524 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0ff      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ac8:	4b57      	ldr	r3, [pc, #348]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1ef      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80f3 	beq.w	8005cc6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	f040 80c9 	bne.w	8005c7c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005aea:	4b4f      	ldr	r3, [pc, #316]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f003 0203 	and.w	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d12c      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d123      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d11b      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d113      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d109      	bne.n	8005b58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	3b01      	subs	r3, #1
 8005b52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d06b      	beq.n	8005c30 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d062      	beq.n	8005c24 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b5e:	4b32      	ldr	r3, [pc, #200]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0ac      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b6e:	4b2e      	ldr	r3, [pc, #184]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2d      	ldr	r2, [pc, #180]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b7a:	f7fc fcd3 	bl	8002524 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b82:	f7fc fccf 	bl	8002524 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e099      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b94:	4b24      	ldr	r3, [pc, #144]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f0      	bne.n	8005b82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <HAL_RCC_OscConfig+0x77c>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bb0:	3a01      	subs	r2, #1
 8005bb2:	0112      	lsls	r2, r2, #4
 8005bb4:	4311      	orrs	r1, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bba:	0212      	lsls	r2, r2, #8
 8005bbc:	4311      	orrs	r1, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bc2:	0852      	lsrs	r2, r2, #1
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	0552      	lsls	r2, r2, #21
 8005bc8:	4311      	orrs	r1, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bce:	0852      	lsrs	r2, r2, #1
 8005bd0:	3a01      	subs	r2, #1
 8005bd2:	0652      	lsls	r2, r2, #25
 8005bd4:	4311      	orrs	r1, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bda:	06d2      	lsls	r2, r2, #27
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	4912      	ldr	r1, [pc, #72]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005be4:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4a0c      	ldr	r2, [pc, #48]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bfc:	f7fc fc92 	bl	8002524 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c04:	f7fc fc8e 	bl	8002524 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e058      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c16:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <HAL_RCC_OscConfig+0x778>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c22:	e050      	b.n	8005cc6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e04f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c30:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d144      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c3c:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c48:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c54:	f7fc fc66 	bl	8002524 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c5c:	f7fc fc62 	bl	8002524 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e02c      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c6e:	4b18      	ldr	r3, [pc, #96]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0x7ac>
 8005c7a:	e024      	b.n	8005cc6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d01f      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c82:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8e:	f7fc fc49 	bl	8002524 <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c96:	f7fc fc45 	bl	8002524 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e00f      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f0      	bne.n	8005c96 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	4905      	ldr	r1, [pc, #20]	; (8005cd0 <HAL_RCC_OscConfig+0x820>)
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_RCC_OscConfig+0x824>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60cb      	str	r3, [r1, #12]
 8005cc0:	e001      	b.n	8005cc6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	feeefffc 	.word	0xfeeefffc

08005cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0e7      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cec:	4b75      	ldr	r3, [pc, #468]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d910      	bls.n	8005d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfa:	4b72      	ldr	r3, [pc, #456]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f023 0207 	bic.w	r2, r3, #7
 8005d02:	4970      	ldr	r1, [pc, #448]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d0a:	4b6e      	ldr	r3, [pc, #440]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0cf      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	4b66      	ldr	r3, [pc, #408]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d908      	bls.n	8005d4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d38:	4b63      	ldr	r3, [pc, #396]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4960      	ldr	r1, [pc, #384]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d04c      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d5e:	4b5a      	ldr	r3, [pc, #360]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d121      	bne.n	8005dae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e0a6      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d107      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d76:	4b54      	ldr	r3, [pc, #336]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d115      	bne.n	8005dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e09a      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d8e:	4b4e      	ldr	r3, [pc, #312]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e08e      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d9e:	4b4a      	ldr	r3, [pc, #296]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e086      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dae:	4b46      	ldr	r3, [pc, #280]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f023 0203 	bic.w	r2, r3, #3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4943      	ldr	r1, [pc, #268]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc0:	f7fc fbb0 	bl	8002524 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc6:	e00a      	b.n	8005dde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc8:	f7fc fbac 	bl	8002524 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e06e      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dde:	4b3a      	ldr	r3, [pc, #232]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 020c 	and.w	r2, r3, #12
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d1eb      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d208      	bcs.n	8005e1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	492b      	ldr	r1, [pc, #172]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e1e:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d210      	bcs.n	8005e4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2c:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 0207 	bic.w	r2, r3, #7
 8005e34:	4923      	ldr	r1, [pc, #140]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3c:	4b21      	ldr	r3, [pc, #132]	; (8005ec4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d001      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e036      	b.n	8005ebc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4918      	ldr	r1, [pc, #96]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e78:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4910      	ldr	r1, [pc, #64]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e8c:	f000 f824 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	490b      	ldr	r1, [pc, #44]	; (8005ecc <HAL_RCC_ClockConfig+0x1f4>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f8>)
 8005eaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <HAL_RCC_ClockConfig+0x1fc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fc f939 	bl	8002128 <HAL_InitTick>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005eba:	7afb      	ldrb	r3, [r7, #11]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40022000 	.word	0x40022000
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	0800e53c 	.word	0x0800e53c
 8005ed0:	20000000 	.word	0x20000000
 8005ed4:	20000004 	.word	0x20000004

08005ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61fb      	str	r3, [r7, #28]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee6:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef0:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <HAL_RCC_GetSysClockFreq+0x34>
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b0c      	cmp	r3, #12
 8005f04:	d121      	bne.n	8005f4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d11e      	bne.n	8005f4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f0c:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d107      	bne.n	8005f28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f18:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	e005      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f28:	4b2d      	ldr	r3, [pc, #180]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f34:	4a2b      	ldr	r2, [pc, #172]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10d      	bne.n	8005f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f48:	e00a      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d102      	bne.n	8005f56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	e004      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d101      	bne.n	8005f60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f5c:	4b23      	ldr	r3, [pc, #140]	; (8005fec <HAL_RCC_GetSysClockFreq+0x114>)
 8005f5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d134      	bne.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f66:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d003      	beq.n	8005f7e <HAL_RCC_GetSysClockFreq+0xa6>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d003      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0xac>
 8005f7c:	e005      	b.n	8005f8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f7e:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f80:	617b      	str	r3, [r7, #20]
      break;
 8005f82:	e005      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f84:	4b19      	ldr	r3, [pc, #100]	; (8005fec <HAL_RCC_GetSysClockFreq+0x114>)
 8005f86:	617b      	str	r3, [r7, #20]
      break;
 8005f88:	e002      	b.n	8005f90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	617b      	str	r3, [r7, #20]
      break;
 8005f8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f90:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	fb03 f202 	mul.w	r2, r3, r2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	0e5b      	lsrs	r3, r3, #25
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3724      	adds	r7, #36	; 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	0800e554 	.word	0x0800e554
 8005fe8:	00f42400 	.word	0x00f42400
 8005fec:	007a1200 	.word	0x007a1200

08005ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff4:	4b03      	ldr	r3, [pc, #12]	; (8006004 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000

08006008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800600c:	f7ff fff0 	bl	8005ff0 <HAL_RCC_GetHCLKFreq>
 8006010:	4602      	mov	r2, r0
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	4904      	ldr	r1, [pc, #16]	; (8006030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800601e:	5ccb      	ldrb	r3, [r1, r3]
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40021000 	.word	0x40021000
 8006030:	0800e54c 	.word	0x0800e54c

08006034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006038:	f7ff ffda 	bl	8005ff0 <HAL_RCC_GetHCLKFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	0adb      	lsrs	r3, r3, #11
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	4904      	ldr	r1, [pc, #16]	; (800605c <HAL_RCC_GetPCLK2Freq+0x28>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40021000 	.word	0x40021000
 800605c:	0800e54c 	.word	0x0800e54c

08006060 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	220f      	movs	r2, #15
 800606e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006070:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0203 	and.w	r2, r3, #3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800607c:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <HAL_RCC_GetClockConfig+0x5c>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	08db      	lsrs	r3, r3, #3
 800609a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <HAL_RCC_GetClockConfig+0x60>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0207 	and.w	r2, r3, #7
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40022000 	.word	0x40022000

080060c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060d0:	4b2a      	ldr	r3, [pc, #168]	; (800617c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060dc:	f7ff f984 	bl	80053e8 <HAL_PWREx_GetVoltageRange>
 80060e0:	6178      	str	r0, [r7, #20]
 80060e2:	e014      	b.n	800610e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e4:	4b25      	ldr	r3, [pc, #148]	; (800617c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e8:	4a24      	ldr	r2, [pc, #144]	; (800617c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ee:	6593      	str	r3, [r2, #88]	; 0x58
 80060f0:	4b22      	ldr	r3, [pc, #136]	; (800617c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060fc:	f7ff f974 	bl	80053e8 <HAL_PWREx_GetVoltageRange>
 8006100:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006106:	4a1d      	ldr	r2, [pc, #116]	; (800617c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800610c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006114:	d10b      	bne.n	800612e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d919      	bls.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2ba0      	cmp	r3, #160	; 0xa0
 8006120:	d902      	bls.n	8006128 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006122:	2302      	movs	r3, #2
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	e013      	b.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006128:	2301      	movs	r3, #1
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	e010      	b.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	d902      	bls.n	800613a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006134:	2303      	movs	r3, #3
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	e00a      	b.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	d102      	bne.n	8006146 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006140:	2302      	movs	r3, #2
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e004      	b.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b70      	cmp	r3, #112	; 0x70
 800614a:	d101      	bne.n	8006150 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800614c:	2301      	movs	r3, #1
 800614e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f023 0207 	bic.w	r2, r3, #7
 8006158:	4909      	ldr	r1, [pc, #36]	; (8006180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006160:	4b07      	ldr	r3, [pc, #28]	; (8006180 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	429a      	cmp	r2, r3
 800616c:	d001      	beq.n	8006172 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40021000 	.word	0x40021000
 8006180:	40022000 	.word	0x40022000

08006184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800618c:	2300      	movs	r3, #0
 800618e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006190:	2300      	movs	r3, #0
 8006192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619c:	2b00      	cmp	r3, #0
 800619e:	d031      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061a8:	d01a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80061aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061ae:	d814      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061b8:	d10f      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80061ba:	4b5d      	ldr	r3, [pc, #372]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4a5c      	ldr	r2, [pc, #368]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061c6:	e00c      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	2100      	movs	r1, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f9de 	bl	8006590 <RCCEx_PLLSAI1_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d8:	e003      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	74fb      	strb	r3, [r7, #19]
      break;
 80061de:	e000      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80061e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e2:	7cfb      	ldrb	r3, [r7, #19]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061e8:	4b51      	ldr	r3, [pc, #324]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	494e      	ldr	r1, [pc, #312]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061fe:	e001      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 809e 	beq.w	800634e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006212:	2300      	movs	r3, #0
 8006214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006216:	4b46      	ldr	r3, [pc, #280]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800622c:	4b40      	ldr	r3, [pc, #256]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	4a3f      	ldr	r2, [pc, #252]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006236:	6593      	str	r3, [r2, #88]	; 0x58
 8006238:	4b3d      	ldr	r3, [pc, #244]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006244:	2301      	movs	r3, #1
 8006246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006248:	4b3a      	ldr	r3, [pc, #232]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a39      	ldr	r2, [pc, #228]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800624e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006254:	f7fc f966 	bl	8002524 <HAL_GetTick>
 8006258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800625a:	e009      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625c:	f7fc f962 	bl	8002524 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d902      	bls.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	74fb      	strb	r3, [r7, #19]
        break;
 800626e:	e005      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006270:	4b30      	ldr	r3, [pc, #192]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ef      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800627c:	7cfb      	ldrb	r3, [r7, #19]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d15a      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006282:	4b2b      	ldr	r3, [pc, #172]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01e      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	429a      	cmp	r2, r3
 800629c:	d019      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800629e:	4b24      	ldr	r3, [pc, #144]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b0:	4a1f      	ldr	r2, [pc, #124]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ba:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062ca:	4a19      	ldr	r2, [pc, #100]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d016      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fc f922 	bl	8002524 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062e2:	e00b      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e4:	f7fc f91e 	bl	8002524 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d902      	bls.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	74fb      	strb	r3, [r7, #19]
            break;
 80062fa:	e006      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fc:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0ec      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800630a:	7cfb      	ldrb	r3, [r7, #19]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10b      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631e:	4904      	ldr	r1, [pc, #16]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006326:	e009      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	74bb      	strb	r3, [r7, #18]
 800632c:	e006      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800632e:	bf00      	nop
 8006330:	40021000 	.word	0x40021000
 8006334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800633c:	7c7b      	ldrb	r3, [r7, #17]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d105      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006342:	4b8a      	ldr	r3, [pc, #552]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	4a89      	ldr	r2, [pc, #548]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800634c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800635a:	4b84      	ldr	r3, [pc, #528]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f023 0203 	bic.w	r2, r3, #3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	4980      	ldr	r1, [pc, #512]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800637c:	4b7b      	ldr	r3, [pc, #492]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	f023 020c 	bic.w	r2, r3, #12
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	4978      	ldr	r1, [pc, #480]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800639e:	4b73      	ldr	r3, [pc, #460]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	496f      	ldr	r1, [pc, #444]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063c0:	4b6a      	ldr	r3, [pc, #424]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	4967      	ldr	r1, [pc, #412]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063e2:	4b62      	ldr	r3, [pc, #392]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	495e      	ldr	r1, [pc, #376]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006404:	4b59      	ldr	r3, [pc, #356]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	4956      	ldr	r1, [pc, #344]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006426:	4b51      	ldr	r3, [pc, #324]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006434:	494d      	ldr	r1, [pc, #308]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d028      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006448:	4b48      	ldr	r3, [pc, #288]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	4945      	ldr	r1, [pc, #276]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006466:	d106      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006468:	4b40      	ldr	r3, [pc, #256]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4a3f      	ldr	r2, [pc, #252]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006472:	60d3      	str	r3, [r2, #12]
 8006474:	e011      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800647e:	d10c      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	2101      	movs	r1, #1
 8006486:	4618      	mov	r0, r3
 8006488:	f000 f882 	bl	8006590 <RCCEx_PLLSAI1_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006490:	7cfb      	ldrb	r3, [r7, #19]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006496:	7cfb      	ldrb	r3, [r7, #19]
 8006498:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d028      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a6:	4b31      	ldr	r3, [pc, #196]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	492d      	ldr	r1, [pc, #180]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c4:	d106      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c6:	4b29      	ldr	r3, [pc, #164]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4a28      	ldr	r2, [pc, #160]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d0:	60d3      	str	r3, [r2, #12]
 80064d2:	e011      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3304      	adds	r3, #4
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f853 	bl	8006590 <RCCEx_PLLSAI1_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064ee:	7cfb      	ldrb	r3, [r7, #19]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80064f4:	7cfb      	ldrb	r3, [r7, #19]
 80064f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01c      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006504:	4b19      	ldr	r3, [pc, #100]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006512:	4916      	ldr	r1, [pc, #88]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006522:	d10c      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	2102      	movs	r1, #2
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f830 	bl	8006590 <RCCEx_PLLSAI1_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006558:	4904      	ldr	r1, [pc, #16]	; (800656c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006560:	7cbb      	ldrb	r3, [r7, #18]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40021000 	.word	0x40021000

08006570 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a04      	ldr	r2, [pc, #16]	; (800658c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800657a:	f043 0304 	orr.w	r3, r3, #4
 800657e:	6013      	str	r3, [r2, #0]
}
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000

08006590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800659e:	4b74      	ldr	r3, [pc, #464]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d018      	beq.n	80065dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065aa:	4b71      	ldr	r3, [pc, #452]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f003 0203 	and.w	r2, r3, #3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d10d      	bne.n	80065d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
       ||
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065c2:	4b6b      	ldr	r3, [pc, #428]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
       ||
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d047      	beq.n	8006666 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
 80065da:	e044      	b.n	8006666 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d018      	beq.n	8006616 <RCCEx_PLLSAI1_Config+0x86>
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d825      	bhi.n	8006634 <RCCEx_PLLSAI1_Config+0xa4>
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d002      	beq.n	80065f2 <RCCEx_PLLSAI1_Config+0x62>
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d009      	beq.n	8006604 <RCCEx_PLLSAI1_Config+0x74>
 80065f0:	e020      	b.n	8006634 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065f2:	4b5f      	ldr	r3, [pc, #380]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11d      	bne.n	800663a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006602:	e01a      	b.n	800663a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006604:	4b5a      	ldr	r3, [pc, #360]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660c:	2b00      	cmp	r3, #0
 800660e:	d116      	bne.n	800663e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006614:	e013      	b.n	800663e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006616:	4b56      	ldr	r3, [pc, #344]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10f      	bne.n	8006642 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006622:	4b53      	ldr	r3, [pc, #332]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006632:	e006      	b.n	8006642 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
      break;
 8006638:	e004      	b.n	8006644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800663a:	bf00      	nop
 800663c:	e002      	b.n	8006644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800663e:	bf00      	nop
 8006640:	e000      	b.n	8006644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006642:	bf00      	nop
    }

    if(status == HAL_OK)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800664a:	4b49      	ldr	r3, [pc, #292]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	3b01      	subs	r3, #1
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	430b      	orrs	r3, r1
 8006660:	4943      	ldr	r1, [pc, #268]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d17c      	bne.n	8006766 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800666c:	4b40      	ldr	r3, [pc, #256]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3f      	ldr	r2, [pc, #252]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006678:	f7fb ff54 	bl	8002524 <HAL_GetTick>
 800667c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800667e:	e009      	b.n	8006694 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006680:	f7fb ff50 	bl	8002524 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d902      	bls.n	8006694 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	73fb      	strb	r3, [r7, #15]
        break;
 8006692:	e005      	b.n	80066a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006694:	4b36      	ldr	r3, [pc, #216]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ef      	bne.n	8006680 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d15f      	bne.n	8006766 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d110      	bne.n	80066ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066ac:	4b30      	ldr	r3, [pc, #192]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80066b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6892      	ldr	r2, [r2, #8]
 80066bc:	0211      	lsls	r1, r2, #8
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	68d2      	ldr	r2, [r2, #12]
 80066c2:	06d2      	lsls	r2, r2, #27
 80066c4:	430a      	orrs	r2, r1
 80066c6:	492a      	ldr	r1, [pc, #168]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	610b      	str	r3, [r1, #16]
 80066cc:	e027      	b.n	800671e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d112      	bne.n	80066fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066d4:	4b26      	ldr	r3, [pc, #152]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80066dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6892      	ldr	r2, [r2, #8]
 80066e4:	0211      	lsls	r1, r2, #8
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6912      	ldr	r2, [r2, #16]
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0552      	lsls	r2, r2, #21
 80066f0:	430a      	orrs	r2, r1
 80066f2:	491f      	ldr	r1, [pc, #124]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]
 80066f8:	e011      	b.n	800671e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066fa:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6892      	ldr	r2, [r2, #8]
 800670a:	0211      	lsls	r1, r2, #8
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6952      	ldr	r2, [r2, #20]
 8006710:	0852      	lsrs	r2, r2, #1
 8006712:	3a01      	subs	r2, #1
 8006714:	0652      	lsls	r2, r2, #25
 8006716:	430a      	orrs	r2, r1
 8006718:	4915      	ldr	r1, [pc, #84]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800671a:	4313      	orrs	r3, r2
 800671c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a13      	ldr	r2, [pc, #76]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006724:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006728:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672a:	f7fb fefb 	bl	8002524 <HAL_GetTick>
 800672e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006730:	e009      	b.n	8006746 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006732:	f7fb fef7 	bl	8002524 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d902      	bls.n	8006746 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	73fb      	strb	r3, [r7, #15]
          break;
 8006744:	e005      	b.n	8006752 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006746:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0ef      	beq.n	8006732 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	4903      	ldr	r1, [pc, #12]	; (8006770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006762:	4313      	orrs	r3, r2
 8006764:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40021000 	.word	0x40021000

08006774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e049      	b.n	800681a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f841 	bl	8006822 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f000 f9dc 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800682a:	bf00      	nop
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d001      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e03b      	b.n	80068c8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <HAL_TIM_Base_Start_IT+0x9c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_TIM_Base_Start_IT+0x4e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687a:	d004      	beq.n	8006886 <HAL_TIM_Base_Start_IT+0x4e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d115      	bne.n	80068b2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <HAL_TIM_Base_Start_IT+0xa4>)
 800688e:	4013      	ands	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b06      	cmp	r3, #6
 8006896:	d015      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x8c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689e:	d011      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b0:	e008      	b.n	80068c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0201 	orr.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e000      	b.n	80068c6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40012c00 	.word	0x40012c00
 80068d8:	40014000 	.word	0x40014000
 80068dc:	00010007 	.word	0x00010007

080068e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d122      	bne.n	800693c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b02      	cmp	r3, #2
 8006902:	d11b      	bne.n	800693c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0202 	mvn.w	r2, #2
 800690c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f905 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 8006928:	e005      	b.n	8006936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f8f7 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f908 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b04      	cmp	r3, #4
 8006948:	d122      	bne.n	8006990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d11b      	bne.n	8006990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0204 	mvn.w	r2, #4
 8006960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f8db 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 800697c:	e005      	b.n	800698a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8cd 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f8de 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b08      	cmp	r3, #8
 800699c:	d122      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d11b      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0208 	mvn.w	r2, #8
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2204      	movs	r2, #4
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8b1 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8a3 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f8b4 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d122      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b10      	cmp	r3, #16
 80069fe:	d11b      	bne.n	8006a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0210 	mvn.w	r2, #16
 8006a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f887 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 8006a24:	e005      	b.n	8006a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f879 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f88a 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10e      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d107      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0201 	mvn.w	r2, #1
 8006a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fb f9ec 	bl	8001e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6e:	2b80      	cmp	r3, #128	; 0x80
 8006a70:	d10e      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	d107      	bne.n	8006a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8de 	bl	8006c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d10e      	bne.n	8006abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aaa:	2b80      	cmp	r3, #128	; 0x80
 8006aac:	d107      	bne.n	8006abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f8d1 	bl	8006c60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b40      	cmp	r3, #64	; 0x40
 8006aca:	d10e      	bne.n	8006aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d107      	bne.n	8006aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f838 	bl	8006b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d10e      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f003 0320 	and.w	r3, r3, #32
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d107      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f06f 0220 	mvn.w	r2, #32
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f891 	bl	8006c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <TIM_Base_SetConfig+0xbc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_Base_SetConfig+0x20>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8e:	d108      	bne.n	8006ba2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a21      	ldr	r2, [pc, #132]	; (8006c2c <TIM_Base_SetConfig+0xbc>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00b      	beq.n	8006bc2 <TIM_Base_SetConfig+0x52>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb0:	d007      	beq.n	8006bc2 <TIM_Base_SetConfig+0x52>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <TIM_Base_SetConfig+0xc0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_Base_SetConfig+0x52>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1d      	ldr	r2, [pc, #116]	; (8006c34 <TIM_Base_SetConfig+0xc4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d108      	bne.n	8006bd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <TIM_Base_SetConfig+0xbc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_Base_SetConfig+0xa0>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <TIM_Base_SetConfig+0xc0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_Base_SetConfig+0xa0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <TIM_Base_SetConfig+0xc4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d103      	bne.n	8006c18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	615a      	str	r2, [r3, #20]
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40012c00 	.word	0x40012c00
 8006c30:	40014000 	.word	0x40014000
 8006c34:	40014400 	.word	0x40014400

08006c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e040      	b.n	8006d08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fb f9dc 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2224      	movs	r2, #36	; 0x24
 8006ca0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f8c0 	bl	8006e38 <UART_SetConfig>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e022      	b.n	8006d08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fae0 	bl	8007290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb67 	bl	80073d4 <UART_CheckIdleState>
 8006d06:	4603      	mov	r3, r0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	f040 8082 	bne.w	8006e2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_UART_Transmit+0x26>
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e07a      	b.n	8006e30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_UART_Transmit+0x38>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e073      	b.n	8006e30 <HAL_UART_Transmit+0x120>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2221      	movs	r2, #33	; 0x21
 8006d5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d5e:	f7fb fbe1 	bl	8002524 <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	88fa      	ldrh	r2, [r7, #6]
 8006d70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7c:	d108      	bne.n	8006d90 <HAL_UART_Transmit+0x80>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e003      	b.n	8006d98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006da0:	e02d      	b.n	8006dfe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2200      	movs	r2, #0
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fb5a 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e039      	b.n	8006e30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	881a      	ldrh	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dce:	b292      	uxth	r2, r2
 8006dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	61bb      	str	r3, [r7, #24]
 8006dd8:	e008      	b.n	8006dec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	b292      	uxth	r2, r2
 8006de4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3301      	adds	r3, #1
 8006dea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1cb      	bne.n	8006da2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2200      	movs	r2, #0
 8006e12:	2140      	movs	r1, #64	; 0x40
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fb26 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e005      	b.n	8006e30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006e2e:	2302      	movs	r3, #2
  }
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e3c:	b08a      	sub	sp, #40	; 0x28
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4bb4      	ldr	r3, [pc, #720]	; (8007138 <UART_SetConfig+0x300>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4aa9      	ldr	r2, [pc, #676]	; (800713c <UART_SetConfig+0x304>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d004      	beq.n	8006ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4aa0      	ldr	r2, [pc, #640]	; (8007140 <UART_SetConfig+0x308>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d126      	bne.n	8006f10 <UART_SetConfig+0xd8>
 8006ec2:	4ba0      	ldr	r3, [pc, #640]	; (8007144 <UART_SetConfig+0x30c>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d81b      	bhi.n	8006f08 <UART_SetConfig+0xd0>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0xa0>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006ee9 	.word	0x08006ee9
 8006edc:	08006ef9 	.word	0x08006ef9
 8006ee0:	08006ef1 	.word	0x08006ef1
 8006ee4:	08006f01 	.word	0x08006f01
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eee:	e080      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef6:	e07c      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efe:	e078      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f06:	e074      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0e:	e070      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a8c      	ldr	r2, [pc, #560]	; (8007148 <UART_SetConfig+0x310>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d138      	bne.n	8006f8c <UART_SetConfig+0x154>
 8006f1a:	4b8a      	ldr	r3, [pc, #552]	; (8007144 <UART_SetConfig+0x30c>)
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f20:	f003 030c 	and.w	r3, r3, #12
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	d82d      	bhi.n	8006f84 <UART_SetConfig+0x14c>
 8006f28:	a201      	add	r2, pc, #4	; (adr r2, 8006f30 <UART_SetConfig+0xf8>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f65 	.word	0x08006f65
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f85 	.word	0x08006f85
 8006f3c:	08006f85 	.word	0x08006f85
 8006f40:	08006f75 	.word	0x08006f75
 8006f44:	08006f85 	.word	0x08006f85
 8006f48:	08006f85 	.word	0x08006f85
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f85 	.word	0x08006f85
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	08006f85 	.word	0x08006f85
 8006f60:	08006f7d 	.word	0x08006f7d
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6a:	e042      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f72:	e03e      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f7a:	e03a      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f82:	e036      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f8a:	e032      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6a      	ldr	r2, [pc, #424]	; (800713c <UART_SetConfig+0x304>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d12a      	bne.n	8006fec <UART_SetConfig+0x1b4>
 8006f96:	4b6b      	ldr	r3, [pc, #428]	; (8007144 <UART_SetConfig+0x30c>)
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fa4:	d01a      	beq.n	8006fdc <UART_SetConfig+0x1a4>
 8006fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006faa:	d81b      	bhi.n	8006fe4 <UART_SetConfig+0x1ac>
 8006fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb0:	d00c      	beq.n	8006fcc <UART_SetConfig+0x194>
 8006fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb6:	d815      	bhi.n	8006fe4 <UART_SetConfig+0x1ac>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <UART_SetConfig+0x18c>
 8006fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc0:	d008      	beq.n	8006fd4 <UART_SetConfig+0x19c>
 8006fc2:	e00f      	b.n	8006fe4 <UART_SetConfig+0x1ac>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fca:	e012      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fd2:	e00e      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fda:	e00a      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe2:	e006      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fea:	e002      	b.n	8006ff2 <UART_SetConfig+0x1ba>
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a51      	ldr	r2, [pc, #324]	; (800713c <UART_SetConfig+0x304>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d17a      	bne.n	80070f2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007000:	2b08      	cmp	r3, #8
 8007002:	d824      	bhi.n	800704e <UART_SetConfig+0x216>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <UART_SetConfig+0x1d4>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007031 	.word	0x08007031
 8007010:	0800704f 	.word	0x0800704f
 8007014:	08007039 	.word	0x08007039
 8007018:	0800704f 	.word	0x0800704f
 800701c:	0800703f 	.word	0x0800703f
 8007020:	0800704f 	.word	0x0800704f
 8007024:	0800704f 	.word	0x0800704f
 8007028:	0800704f 	.word	0x0800704f
 800702c:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007030:	f7fe ffea 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8007034:	61f8      	str	r0, [r7, #28]
        break;
 8007036:	e010      	b.n	800705a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b44      	ldr	r3, [pc, #272]	; (800714c <UART_SetConfig+0x314>)
 800703a:	61fb      	str	r3, [r7, #28]
        break;
 800703c:	e00d      	b.n	800705a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fe ff4b 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 8007042:	61f8      	str	r0, [r7, #28]
        break;
 8007044:	e009      	b.n	800705a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704a:	61fb      	str	r3, [r7, #28]
        break;
 800704c:	e005      	b.n	800705a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007058:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8107 	beq.w	8007270 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	429a      	cmp	r2, r3
 8007070:	d305      	bcc.n	800707e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	429a      	cmp	r2, r3
 800707c:	d903      	bls.n	8007086 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007084:	e0f4      	b.n	8007270 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	2200      	movs	r2, #0
 800708a:	461c      	mov	r4, r3
 800708c:	4615      	mov	r5, r2
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	f04f 0300 	mov.w	r3, #0
 8007096:	022b      	lsls	r3, r5, #8
 8007098:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800709c:	0222      	lsls	r2, r4, #8
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	6849      	ldr	r1, [r1, #4]
 80070a2:	0849      	lsrs	r1, r1, #1
 80070a4:	2000      	movs	r0, #0
 80070a6:	4688      	mov	r8, r1
 80070a8:	4681      	mov	r9, r0
 80070aa:	eb12 0a08 	adds.w	sl, r2, r8
 80070ae:	eb43 0b09 	adc.w	fp, r3, r9
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c0:	4650      	mov	r0, sl
 80070c2:	4659      	mov	r1, fp
 80070c4:	f7f9 fd70 	bl	8000ba8 <__aeabi_uldivmod>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4613      	mov	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d6:	d308      	bcc.n	80070ea <UART_SetConfig+0x2b2>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070de:	d204      	bcs.n	80070ea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	60da      	str	r2, [r3, #12]
 80070e8:	e0c2      	b.n	8007270 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070f0:	e0be      	b.n	8007270 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fa:	d16a      	bne.n	80071d2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80070fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007100:	2b08      	cmp	r3, #8
 8007102:	d834      	bhi.n	800716e <UART_SetConfig+0x336>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x2d4>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007131 	.word	0x08007131
 8007110:	08007151 	.word	0x08007151
 8007114:	08007159 	.word	0x08007159
 8007118:	0800716f 	.word	0x0800716f
 800711c:	0800715f 	.word	0x0800715f
 8007120:	0800716f 	.word	0x0800716f
 8007124:	0800716f 	.word	0x0800716f
 8007128:	0800716f 	.word	0x0800716f
 800712c:	08007167 	.word	0x08007167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fe ff6a 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8007134:	61f8      	str	r0, [r7, #28]
        break;
 8007136:	e020      	b.n	800717a <UART_SetConfig+0x342>
 8007138:	efff69f3 	.word	0xefff69f3
 800713c:	40008000 	.word	0x40008000
 8007140:	40013800 	.word	0x40013800
 8007144:	40021000 	.word	0x40021000
 8007148:	40004400 	.word	0x40004400
 800714c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007150:	f7fe ff70 	bl	8006034 <HAL_RCC_GetPCLK2Freq>
 8007154:	61f8      	str	r0, [r7, #28]
        break;
 8007156:	e010      	b.n	800717a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007158:	4b4c      	ldr	r3, [pc, #304]	; (800728c <UART_SetConfig+0x454>)
 800715a:	61fb      	str	r3, [r7, #28]
        break;
 800715c:	e00d      	b.n	800717a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715e:	f7fe febb 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 8007162:	61f8      	str	r0, [r7, #28]
        break;
 8007164:	e009      	b.n	800717a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716a:	61fb      	str	r3, [r7, #28]
        break;
 800716c:	e005      	b.n	800717a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d077      	beq.n	8007270 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	005a      	lsls	r2, r3, #1
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b0f      	cmp	r3, #15
 800719a:	d916      	bls.n	80071ca <UART_SetConfig+0x392>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a2:	d212      	bcs.n	80071ca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f023 030f 	bic.w	r3, r3, #15
 80071ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	8afb      	ldrh	r3, [r7, #22]
 80071bc:	4313      	orrs	r3, r2
 80071be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	8afa      	ldrh	r2, [r7, #22]
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	e052      	b.n	8007270 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071d0:	e04e      	b.n	8007270 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d827      	bhi.n	800722a <UART_SetConfig+0x3f2>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <UART_SetConfig+0x3a8>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007205 	.word	0x08007205
 80071e4:	0800720d 	.word	0x0800720d
 80071e8:	08007215 	.word	0x08007215
 80071ec:	0800722b 	.word	0x0800722b
 80071f0:	0800721b 	.word	0x0800721b
 80071f4:	0800722b 	.word	0x0800722b
 80071f8:	0800722b 	.word	0x0800722b
 80071fc:	0800722b 	.word	0x0800722b
 8007200:	08007223 	.word	0x08007223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007204:	f7fe ff00 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8007208:	61f8      	str	r0, [r7, #28]
        break;
 800720a:	e014      	b.n	8007236 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720c:	f7fe ff12 	bl	8006034 <HAL_RCC_GetPCLK2Freq>
 8007210:	61f8      	str	r0, [r7, #28]
        break;
 8007212:	e010      	b.n	8007236 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <UART_SetConfig+0x454>)
 8007216:	61fb      	str	r3, [r7, #28]
        break;
 8007218:	e00d      	b.n	8007236 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800721a:	f7fe fe5d 	bl	8005ed8 <HAL_RCC_GetSysClockFreq>
 800721e:	61f8      	str	r0, [r7, #28]
        break;
 8007220:	e009      	b.n	8007236 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007226:	61fb      	str	r3, [r7, #28]
        break;
 8007228:	e005      	b.n	8007236 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007234:	bf00      	nop
    }

    if (pclk != 0U)
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d019      	beq.n	8007270 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	085a      	lsrs	r2, r3, #1
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	441a      	add	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	fbb2 f3f3 	udiv	r3, r2, r3
 800724e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b0f      	cmp	r3, #15
 8007254:	d909      	bls.n	800726a <UART_SetConfig+0x432>
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800725c:	d205      	bcs.n	800726a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60da      	str	r2, [r3, #12]
 8007268:	e002      	b.n	8007270 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800727c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007280:	4618      	mov	r0, r3
 8007282:	3728      	adds	r7, #40	; 0x28
 8007284:	46bd      	mov	sp, r7
 8007286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728a:	bf00      	nop
 800728c:	00f42400 	.word	0x00f42400

08007290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	f003 0308 	and.w	r3, r3, #8
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738e:	d10a      	bne.n	80073a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af02      	add	r7, sp, #8
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073e4:	f7fb f89e 	bl	8002524 <HAL_GetTick>
 80073e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d10e      	bne.n	8007416 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f82d 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e023      	b.n	800745e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b04      	cmp	r3, #4
 8007422:	d10e      	bne.n	8007442 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f817 	bl	8007466 <UART_WaitOnFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e00d      	b.n	800745e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2220      	movs	r2, #32
 800744c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b09c      	sub	sp, #112	; 0x70
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	603b      	str	r3, [r7, #0]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007476:	e0a5      	b.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	f000 80a1 	beq.w	80075c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007482:	f7fb f84f 	bl	8002524 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800748e:	429a      	cmp	r2, r3
 8007490:	d302      	bcc.n	8007498 <UART_WaitOnFlagUntilTimeout+0x32>
 8007492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007494:	2b00      	cmp	r3, #0
 8007496:	d13e      	bne.n	8007516 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074ac:	667b      	str	r3, [r7, #100]	; 0x64
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e6      	bne.n	8007498 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3308      	adds	r3, #8
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	f023 0301 	bic.w	r3, r3, #1
 80074e0:	663b      	str	r3, [r7, #96]	; 0x60
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80074ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e5      	bne.n	80074ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2220      	movs	r2, #32
 8007508:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e067      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d04f      	beq.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800752e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007532:	d147      	bne.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800753c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
 800755e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e6      	bne.n	800753e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3308      	adds	r3, #8
 8007576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	613b      	str	r3, [r7, #16]
   return(result);
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	66bb      	str	r3, [r7, #104]	; 0x68
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3308      	adds	r3, #8
 800758e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007590:	623a      	str	r2, [r7, #32]
 8007592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	69f9      	ldr	r1, [r7, #28]
 8007596:	6a3a      	ldr	r2, [r7, #32]
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	61bb      	str	r3, [r7, #24]
   return(result);
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e5      	bne.n	8007570 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e010      	b.n	80075e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69da      	ldr	r2, [r3, #28]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4013      	ands	r3, r2
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	429a      	cmp	r2, r3
 80075e0:	f43f af4a 	beq.w	8007478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3770      	adds	r7, #112	; 0x70
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <__NVIC_SetPriority>:
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007600:	2b00      	cmp	r3, #0
 8007602:	db0a      	blt.n	800761a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	490c      	ldr	r1, [pc, #48]	; (800763c <__NVIC_SetPriority+0x4c>)
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	0112      	lsls	r2, r2, #4
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	440b      	add	r3, r1
 8007614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007618:	e00a      	b.n	8007630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	4908      	ldr	r1, [pc, #32]	; (8007640 <__NVIC_SetPriority+0x50>)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	3b04      	subs	r3, #4
 8007628:	0112      	lsls	r2, r2, #4
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	440b      	add	r3, r1
 800762e:	761a      	strb	r2, [r3, #24]
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	e000e100 	.word	0xe000e100
 8007640:	e000ed00 	.word	0xe000ed00

08007644 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007648:	4b05      	ldr	r3, [pc, #20]	; (8007660 <SysTick_Handler+0x1c>)
 800764a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800764c:	f001 fd28 	bl	80090a0 <xTaskGetSchedulerState>
 8007650:	4603      	mov	r3, r0
 8007652:	2b01      	cmp	r3, #1
 8007654:	d001      	beq.n	800765a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007656:	f002 fb0f 	bl	8009c78 <xPortSysTickHandler>
  }
}
 800765a:	bf00      	nop
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	e000e010 	.word	0xe000e010

08007664 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007668:	2100      	movs	r1, #0
 800766a:	f06f 0004 	mvn.w	r0, #4
 800766e:	f7ff ffbf 	bl	80075f0 <__NVIC_SetPriority>
#endif
}
 8007672:	bf00      	nop
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800767e:	f3ef 8305 	mrs	r3, IPSR
 8007682:	603b      	str	r3, [r7, #0]
  return(result);
 8007684:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800768a:	f06f 0305 	mvn.w	r3, #5
 800768e:	607b      	str	r3, [r7, #4]
 8007690:	e00c      	b.n	80076ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007692:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <osKernelInitialize+0x44>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800769a:	4b08      	ldr	r3, [pc, #32]	; (80076bc <osKernelInitialize+0x44>)
 800769c:	2201      	movs	r2, #1
 800769e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	607b      	str	r3, [r7, #4]
 80076a4:	e002      	b.n	80076ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295
 80076aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076ac:	687b      	ldr	r3, [r7, #4]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	200004fc 	.word	0x200004fc

080076c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076c6:	f3ef 8305 	mrs	r3, IPSR
 80076ca:	603b      	str	r3, [r7, #0]
  return(result);
 80076cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <osKernelStart+0x1a>
    stat = osErrorISR;
 80076d2:	f06f 0305 	mvn.w	r3, #5
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	e010      	b.n	80076fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <osKernelStart+0x48>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d109      	bne.n	80076f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076e2:	f7ff ffbf 	bl	8007664 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076e6:	4b08      	ldr	r3, [pc, #32]	; (8007708 <osKernelStart+0x48>)
 80076e8:	2202      	movs	r2, #2
 80076ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076ec:	f001 f87c 	bl	80087e8 <vTaskStartScheduler>
      stat = osOK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	607b      	str	r3, [r7, #4]
 80076f4:	e002      	b.n	80076fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076fc:	687b      	ldr	r3, [r7, #4]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	200004fc 	.word	0x200004fc

0800770c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800770c:	b580      	push	{r7, lr}
 800770e:	b08e      	sub	sp, #56	; 0x38
 8007710:	af04      	add	r7, sp, #16
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800771c:	f3ef 8305 	mrs	r3, IPSR
 8007720:	617b      	str	r3, [r7, #20]
  return(result);
 8007722:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007724:	2b00      	cmp	r3, #0
 8007726:	d17e      	bne.n	8007826 <osThreadNew+0x11a>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d07b      	beq.n	8007826 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800772e:	2380      	movs	r3, #128	; 0x80
 8007730:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007732:	2318      	movs	r3, #24
 8007734:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800773a:	f04f 33ff 	mov.w	r3, #4294967295
 800773e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d045      	beq.n	80077d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <osThreadNew+0x48>
        name = attr->name;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <osThreadNew+0x6e>
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b38      	cmp	r3, #56	; 0x38
 800776c:	d805      	bhi.n	800777a <osThreadNew+0x6e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <osThreadNew+0x72>
        return (NULL);
 800777a:	2300      	movs	r3, #0
 800777c:	e054      	b.n	8007828 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	089b      	lsrs	r3, r3, #2
 800778c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00e      	beq.n	80077b4 <osThreadNew+0xa8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2bbb      	cmp	r3, #187	; 0xbb
 800779c:	d90a      	bls.n	80077b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d006      	beq.n	80077b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <osThreadNew+0xa8>
        mem = 1;
 80077ae:	2301      	movs	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	e010      	b.n	80077d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10c      	bne.n	80077d6 <osThreadNew+0xca>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d108      	bne.n	80077d6 <osThreadNew+0xca>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <osThreadNew+0xca>
          mem = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61bb      	str	r3, [r7, #24]
 80077d0:	e001      	b.n	80077d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d110      	bne.n	80077fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077e4:	9202      	str	r2, [sp, #8]
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6a3a      	ldr	r2, [r7, #32]
 80077f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 fe0c 	bl	8008410 <xTaskCreateStatic>
 80077f8:	4603      	mov	r3, r0
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	e013      	b.n	8007826 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d110      	bne.n	8007826 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	b29a      	uxth	r2, r3
 8007808:	f107 0310 	add.w	r3, r7, #16
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fe57 	bl	80084ca <xTaskCreate>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d001      	beq.n	8007826 <osThreadNew+0x11a>
            hTask = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007826:	693b      	ldr	r3, [r7, #16]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3728      	adds	r7, #40	; 0x28
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007838:	f3ef 8305 	mrs	r3, IPSR
 800783c:	60bb      	str	r3, [r7, #8]
  return(result);
 800783e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <osDelay+0x1c>
    stat = osErrorISR;
 8007844:	f06f 0305 	mvn.w	r3, #5
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	e007      	b.n	800785c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 ff92 	bl	8008780 <vTaskDelay>
    }
  }

  return (stat);
 800785c:	68fb      	ldr	r3, [r7, #12]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a07      	ldr	r2, [pc, #28]	; (8007894 <vApplicationGetIdleTaskMemory+0x2c>)
 8007878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4a06      	ldr	r2, [pc, #24]	; (8007898 <vApplicationGetIdleTaskMemory+0x30>)
 800787e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2280      	movs	r2, #128	; 0x80
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000500 	.word	0x20000500
 8007898:	200005bc 	.word	0x200005bc

0800789c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a07      	ldr	r2, [pc, #28]	; (80078c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80078ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4a06      	ldr	r2, [pc, #24]	; (80078cc <vApplicationGetTimerTaskMemory+0x30>)
 80078b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078ba:	601a      	str	r2, [r3, #0]
}
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	200007bc 	.word	0x200007bc
 80078cc:	20000878 	.word	0x20000878

080078d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f103 0208 	add.w	r2, r3, #8
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f04f 32ff 	mov.w	r2, #4294967295
 80078e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f103 0208 	add.w	r2, r3, #8
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f103 0208 	add.w	r2, r3, #8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007988:	d103      	bne.n	8007992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e00c      	b.n	80079ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3308      	adds	r3, #8
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e002      	b.n	80079a0 <vListInsert+0x2e>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d2f6      	bcs.n	800799a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	601a      	str	r2, [r3, #0]
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6892      	ldr	r2, [r2, #8]
 80079fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6852      	ldr	r2, [r2, #4]
 8007a04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d103      	bne.n	8007a18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	1e5a      	subs	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a62:	f002 f877 	bl	8009b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	441a      	add	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	3b01      	subs	r3, #1
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a98:	fb01 f303 	mul.w	r3, r1, r3
 8007a9c:	441a      	add	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	22ff      	movs	r2, #255	; 0xff
 8007aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d114      	bne.n	8007ae2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01a      	beq.n	8007af6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3310      	adds	r3, #16
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 f929 	bl	8008d1c <xTaskRemoveFromEventList>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d012      	beq.n	8007af6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <xQueueGenericReset+0xcc>)
 8007ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	e009      	b.n	8007af6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3310      	adds	r3, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fef2 	bl	80078d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3324      	adds	r3, #36	; 0x24
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff feed 	bl	80078d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007af6:	f002 f85d 	bl	8009bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007afa:	2301      	movs	r3, #1
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08e      	sub	sp, #56	; 0x38
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <xQueueGenericCreateStatic+0x52>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <xQueueGenericCreateStatic+0x56>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <xQueueGenericCreateStatic+0x58>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	623b      	str	r3, [r7, #32]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <xQueueGenericCreateStatic+0x7e>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <xQueueGenericCreateStatic+0x82>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <xQueueGenericCreateStatic+0x84>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	61fb      	str	r3, [r7, #28]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ba6:	2350      	movs	r3, #80	; 0x50
 8007ba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b50      	cmp	r3, #80	; 0x50
 8007bae:	d00a      	beq.n	8007bc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	61bb      	str	r3, [r7, #24]
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4613      	mov	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f805 	bl	8007bf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3730      	adds	r7, #48	; 0x30
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e002      	b.n	8007c1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c26:	2101      	movs	r1, #1
 8007c28:	69b8      	ldr	r0, [r7, #24]
 8007c2a:	f7ff ff05 	bl	8007a38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	78fa      	ldrb	r2, [r7, #3]
 8007c32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08e      	sub	sp, #56	; 0x38
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xQueueGenericSend+0x32>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <xQueueGenericSend+0x40>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <xQueueGenericSend+0x44>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <xQueueGenericSend+0x46>
 8007c84:	2300      	movs	r3, #0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <xQueueGenericSend+0x60>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d103      	bne.n	8007cae <xQueueGenericSend+0x6e>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <xQueueGenericSend+0x72>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueGenericSend+0x74>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xQueueGenericSend+0x8e>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	623b      	str	r3, [r7, #32]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cce:	f001 f9e7 	bl	80090a0 <xTaskGetSchedulerState>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <xQueueGenericSend+0x9e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <xQueueGenericSend+0xa2>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e000      	b.n	8007ce4 <xQueueGenericSend+0xa4>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericSend+0xbe>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	61fb      	str	r3, [r7, #28]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cfe:	f001 ff29 	bl	8009b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <xQueueGenericSend+0xd4>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d129      	bne.n	8007d68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d1a:	f000 fa0b 	bl	8008134 <prvCopyDataToQueue>
 8007d1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d010      	beq.n	8007d4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	3324      	adds	r3, #36	; 0x24
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fff5 	bl	8008d1c <xTaskRemoveFromEventList>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d013      	beq.n	8007d60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d38:	4b3f      	ldr	r3, [pc, #252]	; (8007e38 <xQueueGenericSend+0x1f8>)
 8007d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	e00a      	b.n	8007d60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d50:	4b39      	ldr	r3, [pc, #228]	; (8007e38 <xQueueGenericSend+0x1f8>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d60:	f001 ff28 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e063      	b.n	8007e30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d6e:	f001 ff21 	bl	8009bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	e05c      	b.n	8007e30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d106      	bne.n	8007d8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d7c:	f107 0314 	add.w	r3, r7, #20
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 f82f 	bl	8008de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d8a:	f001 ff13 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d8e:	f000 fd9b 	bl	80088c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d92:	f001 fedf 	bl	8009b54 <vPortEnterCritical>
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d9c:	b25b      	sxtb	r3, r3
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da2:	d103      	bne.n	8007dac <xQueueGenericSend+0x16c>
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db2:	b25b      	sxtb	r3, r3
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d103      	bne.n	8007dc2 <xQueueGenericSend+0x182>
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dc2:	f001 fef7 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dc6:	1d3a      	adds	r2, r7, #4
 8007dc8:	f107 0314 	add.w	r3, r7, #20
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 f81e 	bl	8008e10 <xTaskCheckForTimeOut>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d124      	bne.n	8007e24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ddc:	f000 faa2 	bl	8008324 <prvIsQueueFull>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d018      	beq.n	8007e18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	3310      	adds	r3, #16
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	4611      	mov	r1, r2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 ff44 	bl	8008c7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df6:	f000 fa2d 	bl	8008254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dfa:	f000 fd73 	bl	80088e4 <xTaskResumeAll>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f47f af7c 	bne.w	8007cfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e06:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <xQueueGenericSend+0x1f8>)
 8007e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	e772      	b.n	8007cfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e1a:	f000 fa1b 	bl	8008254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e1e:	f000 fd61 	bl	80088e4 <xTaskResumeAll>
 8007e22:	e76c      	b.n	8007cfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e26:	f000 fa15 	bl	8008254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e2a:	f000 fd5b 	bl	80088e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3738      	adds	r7, #56	; 0x38
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b090      	sub	sp, #64	; 0x40
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10a      	bne.n	8007e6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d103      	bne.n	8007e78 <xQueueGenericSendFromISR+0x3c>
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <xQueueGenericSendFromISR+0x40>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e000      	b.n	8007e7e <xQueueGenericSendFromISR+0x42>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d103      	bne.n	8007ea6 <xQueueGenericSendFromISR+0x6a>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <xQueueGenericSendFromISR+0x6e>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <xQueueGenericSendFromISR+0x70>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	623b      	str	r3, [r7, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ec6:	f001 ff27 	bl	8009d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007eca:	f3ef 8211 	mrs	r2, BASEPRI
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	61fa      	str	r2, [r7, #28]
 8007ee0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ee4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d302      	bcc.n	8007ef8 <xQueueGenericSendFromISR+0xbc>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d12f      	bne.n	8007f58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f0e:	f000 f911 	bl	8008134 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d112      	bne.n	8007f42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d016      	beq.n	8007f52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	3324      	adds	r3, #36	; 0x24
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 fef7 	bl	8008d1c <xTaskRemoveFromEventList>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	e007      	b.n	8007f52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f46:	3301      	adds	r3, #1
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	b25a      	sxtb	r2, r3
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f52:	2301      	movs	r3, #1
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f56:	e001      	b.n	8007f5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3740      	adds	r7, #64	; 0x40
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08c      	sub	sp, #48	; 0x30
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f80:	2300      	movs	r3, #0
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10a      	bne.n	8007fa4 <xQueueReceive+0x30>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	623b      	str	r3, [r7, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	e7fe      	b.n	8007fa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <xQueueReceive+0x3e>
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <xQueueReceive+0x42>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <xQueueReceive+0x44>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xQueueReceive+0x5e>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	61fb      	str	r3, [r7, #28]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fd2:	f001 f865 	bl	80090a0 <xTaskGetSchedulerState>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d102      	bne.n	8007fe2 <xQueueReceive+0x6e>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <xQueueReceive+0x72>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <xQueueReceive+0x74>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <xQueueReceive+0x8e>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	61bb      	str	r3, [r7, #24]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008002:	f001 fda7 	bl	8009b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01f      	beq.n	8008052 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008016:	f000 f8f7 	bl	8008208 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	1e5a      	subs	r2, r3, #1
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00f      	beq.n	800804a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	3310      	adds	r3, #16
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fe74 	bl	8008d1c <xTaskRemoveFromEventList>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800803a:	4b3d      	ldr	r3, [pc, #244]	; (8008130 <xQueueReceive+0x1bc>)
 800803c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800804a:	f001 fdb3 	bl	8009bb4 <vPortExitCritical>
				return pdPASS;
 800804e:	2301      	movs	r3, #1
 8008050:	e069      	b.n	8008126 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008058:	f001 fdac 	bl	8009bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800805c:	2300      	movs	r3, #0
 800805e:	e062      	b.n	8008126 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008066:	f107 0310 	add.w	r3, r7, #16
 800806a:	4618      	mov	r0, r3
 800806c:	f000 feba 	bl	8008de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008074:	f001 fd9e 	bl	8009bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008078:	f000 fc26 	bl	80088c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800807c:	f001 fd6a 	bl	8009b54 <vPortEnterCritical>
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008086:	b25b      	sxtb	r3, r3
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d103      	bne.n	8008096 <xQueueReceive+0x122>
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800809c:	b25b      	sxtb	r3, r3
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a2:	d103      	bne.n	80080ac <xQueueReceive+0x138>
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080ac:	f001 fd82 	bl	8009bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080b0:	1d3a      	adds	r2, r7, #4
 80080b2:	f107 0310 	add.w	r3, r7, #16
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fea9 	bl	8008e10 <xTaskCheckForTimeOut>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d123      	bne.n	800810c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080c6:	f000 f917 	bl	80082f8 <prvIsQueueEmpty>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d017      	beq.n	8008100 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	3324      	adds	r3, #36	; 0x24
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4611      	mov	r1, r2
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fdcf 	bl	8008c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e0:	f000 f8b8 	bl	8008254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080e4:	f000 fbfe 	bl	80088e4 <xTaskResumeAll>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d189      	bne.n	8008002 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80080ee:	4b10      	ldr	r3, [pc, #64]	; (8008130 <xQueueReceive+0x1bc>)
 80080f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	e780      	b.n	8008002 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f000 f8a7 	bl	8008254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008106:	f000 fbed 	bl	80088e4 <xTaskResumeAll>
 800810a:	e77a      	b.n	8008002 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800810c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800810e:	f000 f8a1 	bl	8008254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008112:	f000 fbe7 	bl	80088e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008118:	f000 f8ee 	bl	80082f8 <prvIsQueueEmpty>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	f43f af6f 	beq.w	8008002 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008124:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008126:	4618      	mov	r0, r3
 8008128:	3730      	adds	r7, #48	; 0x30
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10d      	bne.n	800816e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d14d      	bne.n	80081f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 ffbc 	bl	80090dc <xTaskPriorityDisinherit>
 8008164:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	609a      	str	r2, [r3, #8]
 800816c:	e043      	b.n	80081f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d119      	bne.n	80081a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6858      	ldr	r0, [r3, #4]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	461a      	mov	r2, r3
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	f002 f917 	bl	800a3b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	441a      	add	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	429a      	cmp	r2, r3
 800819c:	d32b      	bcc.n	80081f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	605a      	str	r2, [r3, #4]
 80081a6:	e026      	b.n	80081f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	68d8      	ldr	r0, [r3, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	461a      	mov	r2, r3
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	f002 f8fd 	bl	800a3b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68da      	ldr	r2, [r3, #12]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	425b      	negs	r3, r3
 80081c2:	441a      	add	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d207      	bcs.n	80081e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081dc:	425b      	negs	r3, r3
 80081de:	441a      	add	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d105      	bne.n	80081f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081fe:	697b      	ldr	r3, [r7, #20]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d018      	beq.n	800824c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	441a      	add	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	429a      	cmp	r2, r3
 8008232:	d303      	bcc.n	800823c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68d9      	ldr	r1, [r3, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	461a      	mov	r2, r3
 8008246:	6838      	ldr	r0, [r7, #0]
 8008248:	f002 f8b3 	bl	800a3b2 <memcpy>
	}
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800825c:	f001 fc7a 	bl	8009b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008268:	e011      	b.n	800828e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	d012      	beq.n	8008298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3324      	adds	r3, #36	; 0x24
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fd50 	bl	8008d1c <xTaskRemoveFromEventList>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008282:	f000 fe27 	bl	8008ed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	3b01      	subs	r3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800828e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008292:	2b00      	cmp	r3, #0
 8008294:	dce9      	bgt.n	800826a <prvUnlockQueue+0x16>
 8008296:	e000      	b.n	800829a <prvUnlockQueue+0x46>
					break;
 8008298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	22ff      	movs	r2, #255	; 0xff
 800829e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082a2:	f001 fc87 	bl	8009bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082a6:	f001 fc55 	bl	8009b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082b2:	e011      	b.n	80082d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d012      	beq.n	80082e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3310      	adds	r3, #16
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 fd2b 	bl	8008d1c <xTaskRemoveFromEventList>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082cc:	f000 fe02 	bl	8008ed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dce9      	bgt.n	80082b4 <prvUnlockQueue+0x60>
 80082e0:	e000      	b.n	80082e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	22ff      	movs	r2, #255	; 0xff
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082ec:	f001 fc62 	bl	8009bb4 <vPortExitCritical>
}
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008300:	f001 fc28 	bl	8009b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d102      	bne.n	8008312 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800830c:	2301      	movs	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e001      	b.n	8008316 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008316:	f001 fc4d 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800832c:	f001 fc12 	bl	8009b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008338:	429a      	cmp	r2, r3
 800833a:	d102      	bne.n	8008342 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800833c:	2301      	movs	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	e001      	b.n	8008346 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008346:	f001 fc35 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 800834a:	68fb      	ldr	r3, [r7, #12]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	e014      	b.n	800838e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008364:	4a0f      	ldr	r2, [pc, #60]	; (80083a4 <vQueueAddToRegistry+0x50>)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10b      	bne.n	8008388 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008370:	490c      	ldr	r1, [pc, #48]	; (80083a4 <vQueueAddToRegistry+0x50>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	683a      	ldr	r2, [r7, #0]
 8008376:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800837a:	4a0a      	ldr	r2, [pc, #40]	; (80083a4 <vQueueAddToRegistry+0x50>)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	4413      	add	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008386:	e006      	b.n	8008396 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3301      	adds	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b07      	cmp	r3, #7
 8008392:	d9e7      	bls.n	8008364 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20000c78 	.word	0x20000c78

080083a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083b8:	f001 fbcc 	bl	8009b54 <vPortEnterCritical>
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083c2:	b25b      	sxtb	r3, r3
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d103      	bne.n	80083d2 <vQueueWaitForMessageRestricted+0x2a>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d8:	b25b      	sxtb	r3, r3
 80083da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083de:	d103      	bne.n	80083e8 <vQueueWaitForMessageRestricted+0x40>
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e8:	f001 fbe4 	bl	8009bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	3324      	adds	r3, #36	; 0x24
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fc61 	bl	8008cc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008402:	6978      	ldr	r0, [r7, #20]
 8008404:	f7ff ff26 	bl	8008254 <prvUnlockQueue>
	}
 8008408:	bf00      	nop
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b08e      	sub	sp, #56	; 0x38
 8008414:	af04      	add	r7, sp, #16
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	623b      	str	r3, [r7, #32]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <xTaskCreateStatic+0x46>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	61fb      	str	r3, [r7, #28]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008456:	23bc      	movs	r3, #188	; 0xbc
 8008458:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2bbc      	cmp	r3, #188	; 0xbc
 800845e:	d00a      	beq.n	8008476 <xTaskCreateStatic+0x66>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	61bb      	str	r3, [r7, #24]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008476:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d01e      	beq.n	80084bc <xTaskCreateStatic+0xac>
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01b      	beq.n	80084bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800848c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	2202      	movs	r2, #2
 8008492:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008496:	2300      	movs	r3, #0
 8008498:	9303      	str	r3, [sp, #12]
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	9302      	str	r3, [sp, #8]
 800849e:	f107 0314 	add.w	r3, r7, #20
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 f850 	bl	8008554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b6:	f000 f8f3 	bl	80086a0 <prvAddNewTaskToReadyList>
 80084ba:	e001      	b.n	80084c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084bc:	2300      	movs	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084c0:	697b      	ldr	r3, [r7, #20]
	}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3728      	adds	r7, #40	; 0x28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b08c      	sub	sp, #48	; 0x30
 80084ce:	af04      	add	r7, sp, #16
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	4613      	mov	r3, r2
 80084d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 fc5a 	bl	8009d98 <pvPortMalloc>
 80084e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00e      	beq.n	800850a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084ec:	20bc      	movs	r0, #188	; 0xbc
 80084ee:	f001 fc53 	bl	8009d98 <pvPortMalloc>
 80084f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008500:	e005      	b.n	800850e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008502:	6978      	ldr	r0, [r7, #20]
 8008504:	f001 fd14 	bl	8009f30 <vPortFree>
 8008508:	e001      	b.n	800850e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d017      	beq.n	8008544 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800851c:	88fa      	ldrh	r2, [r7, #6]
 800851e:	2300      	movs	r3, #0
 8008520:	9303      	str	r3, [sp, #12]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	9302      	str	r3, [sp, #8]
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 f80e 	bl	8008554 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008538:	69f8      	ldr	r0, [r7, #28]
 800853a:	f000 f8b1 	bl	80086a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800853e:	2301      	movs	r3, #1
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	e002      	b.n	800854a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008544:	f04f 33ff 	mov.w	r3, #4294967295
 8008548:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800854a:	69bb      	ldr	r3, [r7, #24]
	}
 800854c:	4618      	mov	r0, r3
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	461a      	mov	r2, r3
 800856c:	21a5      	movs	r1, #165	; 0xa5
 800856e:	f001 ff2e 	bl	800a3ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800857c:	3b01      	subs	r3, #1
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	617b      	str	r3, [r7, #20]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01f      	beq.n	80085f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085b2:	2300      	movs	r3, #0
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	e012      	b.n	80085de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	4413      	add	r3, r2
 80085be:	7819      	ldrb	r1, [r3, #0]
 80085c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	3334      	adds	r3, #52	; 0x34
 80085c8:	460a      	mov	r2, r1
 80085ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d006      	beq.n	80085e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	3301      	adds	r3, #1
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	2b0f      	cmp	r3, #15
 80085e2:	d9e9      	bls.n	80085b8 <prvInitialiseNewTask+0x64>
 80085e4:	e000      	b.n	80085e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80085e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085f0:	e003      	b.n	80085fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	2b37      	cmp	r3, #55	; 0x37
 80085fe:	d901      	bls.n	8008604 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008600:	2337      	movs	r3, #55	; 0x37
 8008602:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008608:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800860e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	2200      	movs	r2, #0
 8008614:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	3304      	adds	r3, #4
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff f978 	bl	8007910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	3318      	adds	r3, #24
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff f973 	bl	8007910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	2200      	movs	r2, #0
 800864c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	3354      	adds	r3, #84	; 0x54
 8008654:	2260      	movs	r2, #96	; 0x60
 8008656:	2100      	movs	r1, #0
 8008658:	4618      	mov	r0, r3
 800865a:	f001 feb8 	bl	800a3ce <memset>
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	4a0c      	ldr	r2, [pc, #48]	; (8008694 <prvInitialiseNewTask+0x140>)
 8008662:	659a      	str	r2, [r3, #88]	; 0x58
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	4a0c      	ldr	r2, [pc, #48]	; (8008698 <prvInitialiseNewTask+0x144>)
 8008668:	65da      	str	r2, [r3, #92]	; 0x5c
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	4a0b      	ldr	r2, [pc, #44]	; (800869c <prvInitialiseNewTask+0x148>)
 800866e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	68f9      	ldr	r1, [r7, #12]
 8008674:	69b8      	ldr	r0, [r7, #24]
 8008676:	f001 f941 	bl	80098fc <pxPortInitialiseStack>
 800867a:	4602      	mov	r2, r0
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800868c:	bf00      	nop
 800868e:	3720      	adds	r7, #32
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	0800e5a4 	.word	0x0800e5a4
 8008698:	0800e5c4 	.word	0x0800e5c4
 800869c:	0800e584 	.word	0x0800e584

080086a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086a8:	f001 fa54 	bl	8009b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086ac:	4b2d      	ldr	r3, [pc, #180]	; (8008764 <prvAddNewTaskToReadyList+0xc4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3301      	adds	r3, #1
 80086b2:	4a2c      	ldr	r2, [pc, #176]	; (8008764 <prvAddNewTaskToReadyList+0xc4>)
 80086b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086b6:	4b2c      	ldr	r3, [pc, #176]	; (8008768 <prvAddNewTaskToReadyList+0xc8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086be:	4a2a      	ldr	r2, [pc, #168]	; (8008768 <prvAddNewTaskToReadyList+0xc8>)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086c4:	4b27      	ldr	r3, [pc, #156]	; (8008764 <prvAddNewTaskToReadyList+0xc4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d110      	bne.n	80086ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086cc:	f000 fc26 	bl	8008f1c <prvInitialiseTaskLists>
 80086d0:	e00d      	b.n	80086ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086d2:	4b26      	ldr	r3, [pc, #152]	; (800876c <prvAddNewTaskToReadyList+0xcc>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086da:	4b23      	ldr	r3, [pc, #140]	; (8008768 <prvAddNewTaskToReadyList+0xc8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d802      	bhi.n	80086ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086e8:	4a1f      	ldr	r2, [pc, #124]	; (8008768 <prvAddNewTaskToReadyList+0xc8>)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086ee:	4b20      	ldr	r3, [pc, #128]	; (8008770 <prvAddNewTaskToReadyList+0xd0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	4a1e      	ldr	r2, [pc, #120]	; (8008770 <prvAddNewTaskToReadyList+0xd0>)
 80086f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <prvAddNewTaskToReadyList+0xd0>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008704:	4b1b      	ldr	r3, [pc, #108]	; (8008774 <prvAddNewTaskToReadyList+0xd4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d903      	bls.n	8008714 <prvAddNewTaskToReadyList+0x74>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	4a18      	ldr	r2, [pc, #96]	; (8008774 <prvAddNewTaskToReadyList+0xd4>)
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4a15      	ldr	r2, [pc, #84]	; (8008778 <prvAddNewTaskToReadyList+0xd8>)
 8008722:	441a      	add	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	4610      	mov	r0, r2
 800872c:	f7ff f8fd 	bl	800792a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008730:	f001 fa40 	bl	8009bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <prvAddNewTaskToReadyList+0xcc>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00e      	beq.n	800875a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <prvAddNewTaskToReadyList+0xc8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	429a      	cmp	r2, r3
 8008748:	d207      	bcs.n	800875a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800874a:	4b0c      	ldr	r3, [pc, #48]	; (800877c <prvAddNewTaskToReadyList+0xdc>)
 800874c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	2000118c 	.word	0x2000118c
 8008768:	20000cb8 	.word	0x20000cb8
 800876c:	20001198 	.word	0x20001198
 8008770:	200011a8 	.word	0x200011a8
 8008774:	20001194 	.word	0x20001194
 8008778:	20000cbc 	.word	0x20000cbc
 800877c:	e000ed04 	.word	0xe000ed04

08008780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008788:	2300      	movs	r3, #0
 800878a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d017      	beq.n	80087c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008792:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <vTaskDelay+0x60>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <vTaskDelay+0x30>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	60bb      	str	r3, [r7, #8]
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087b0:	f000 f88a 	bl	80088c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087b4:	2100      	movs	r1, #0
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fcfe 	bl	80091b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087bc:	f000 f892 	bl	80088e4 <xTaskResumeAll>
 80087c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d107      	bne.n	80087d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80087c8:	4b06      	ldr	r3, [pc, #24]	; (80087e4 <vTaskDelay+0x64>)
 80087ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	200011b4 	.word	0x200011b4
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08a      	sub	sp, #40	; 0x28
 80087ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087f6:	463a      	mov	r2, r7
 80087f8:	1d39      	adds	r1, r7, #4
 80087fa:	f107 0308 	add.w	r3, r7, #8
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff f832 	bl	8007868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	9202      	str	r2, [sp, #8]
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	2300      	movs	r3, #0
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	2300      	movs	r3, #0
 8008814:	460a      	mov	r2, r1
 8008816:	4924      	ldr	r1, [pc, #144]	; (80088a8 <vTaskStartScheduler+0xc0>)
 8008818:	4824      	ldr	r0, [pc, #144]	; (80088ac <vTaskStartScheduler+0xc4>)
 800881a:	f7ff fdf9 	bl	8008410 <xTaskCreateStatic>
 800881e:	4603      	mov	r3, r0
 8008820:	4a23      	ldr	r2, [pc, #140]	; (80088b0 <vTaskStartScheduler+0xc8>)
 8008822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008824:	4b22      	ldr	r3, [pc, #136]	; (80088b0 <vTaskStartScheduler+0xc8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800882c:	2301      	movs	r3, #1
 800882e:	617b      	str	r3, [r7, #20]
 8008830:	e001      	b.n	8008836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d102      	bne.n	8008842 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800883c:	f000 fd10 	bl	8009260 <xTimerCreateTimerTask>
 8008840:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d11b      	bne.n	8008880 <vTaskStartScheduler+0x98>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	613b      	str	r3, [r7, #16]
}
 800885a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800885c:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <vTaskStartScheduler+0xcc>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3354      	adds	r3, #84	; 0x54
 8008862:	4a15      	ldr	r2, [pc, #84]	; (80088b8 <vTaskStartScheduler+0xd0>)
 8008864:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008866:	4b15      	ldr	r3, [pc, #84]	; (80088bc <vTaskStartScheduler+0xd4>)
 8008868:	f04f 32ff 	mov.w	r2, #4294967295
 800886c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800886e:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <vTaskStartScheduler+0xd8>)
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008874:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <vTaskStartScheduler+0xdc>)
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800887a:	f001 f8c9 	bl	8009a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800887e:	e00e      	b.n	800889e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008886:	d10a      	bne.n	800889e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	60fb      	str	r3, [r7, #12]
}
 800889a:	bf00      	nop
 800889c:	e7fe      	b.n	800889c <vTaskStartScheduler+0xb4>
}
 800889e:	bf00      	nop
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	0800e4b8 	.word	0x0800e4b8
 80088ac:	08008eed 	.word	0x08008eed
 80088b0:	200011b0 	.word	0x200011b0
 80088b4:	20000cb8 	.word	0x20000cb8
 80088b8:	20000010 	.word	0x20000010
 80088bc:	200011ac 	.word	0x200011ac
 80088c0:	20001198 	.word	0x20001198
 80088c4:	20001190 	.word	0x20001190

080088c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088cc:	4b04      	ldr	r3, [pc, #16]	; (80088e0 <vTaskSuspendAll+0x18>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3301      	adds	r3, #1
 80088d2:	4a03      	ldr	r2, [pc, #12]	; (80088e0 <vTaskSuspendAll+0x18>)
 80088d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088d6:	bf00      	nop
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	200011b4 	.word	0x200011b4

080088e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088f2:	4b42      	ldr	r3, [pc, #264]	; (80089fc <xTaskResumeAll+0x118>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <xTaskResumeAll+0x2c>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	603b      	str	r3, [r7, #0]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008910:	f001 f920 	bl	8009b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008914:	4b39      	ldr	r3, [pc, #228]	; (80089fc <xTaskResumeAll+0x118>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3b01      	subs	r3, #1
 800891a:	4a38      	ldr	r2, [pc, #224]	; (80089fc <xTaskResumeAll+0x118>)
 800891c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891e:	4b37      	ldr	r3, [pc, #220]	; (80089fc <xTaskResumeAll+0x118>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d162      	bne.n	80089ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008926:	4b36      	ldr	r3, [pc, #216]	; (8008a00 <xTaskResumeAll+0x11c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d05e      	beq.n	80089ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800892e:	e02f      	b.n	8008990 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008930:	4b34      	ldr	r3, [pc, #208]	; (8008a04 <xTaskResumeAll+0x120>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3318      	adds	r3, #24
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff f851 	bl	80079e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3304      	adds	r3, #4
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff f84c 	bl	80079e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008950:	4b2d      	ldr	r3, [pc, #180]	; (8008a08 <xTaskResumeAll+0x124>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d903      	bls.n	8008960 <xTaskResumeAll+0x7c>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	4a2a      	ldr	r2, [pc, #168]	; (8008a08 <xTaskResumeAll+0x124>)
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4a27      	ldr	r2, [pc, #156]	; (8008a0c <xTaskResumeAll+0x128>)
 800896e:	441a      	add	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3304      	adds	r3, #4
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f7fe ffd7 	bl	800792a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008980:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <xTaskResumeAll+0x12c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	429a      	cmp	r2, r3
 8008988:	d302      	bcc.n	8008990 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800898a:	4b22      	ldr	r3, [pc, #136]	; (8008a14 <xTaskResumeAll+0x130>)
 800898c:	2201      	movs	r2, #1
 800898e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008990:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <xTaskResumeAll+0x120>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1cb      	bne.n	8008930 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800899e:	f000 fb5f 	bl	8009060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089a2:	4b1d      	ldr	r3, [pc, #116]	; (8008a18 <xTaskResumeAll+0x134>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d010      	beq.n	80089d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089ae:	f000 f847 	bl	8008a40 <xTaskIncrementTick>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089b8:	4b16      	ldr	r3, [pc, #88]	; (8008a14 <xTaskResumeAll+0x130>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f1      	bne.n	80089ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80089ca:	4b13      	ldr	r3, [pc, #76]	; (8008a18 <xTaskResumeAll+0x134>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089d0:	4b10      	ldr	r3, [pc, #64]	; (8008a14 <xTaskResumeAll+0x130>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80089d8:	2301      	movs	r3, #1
 80089da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80089dc:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <xTaskResumeAll+0x138>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089ec:	f001 f8e2 	bl	8009bb4 <vPortExitCritical>

	return xAlreadyYielded;
 80089f0:	68bb      	ldr	r3, [r7, #8]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200011b4 	.word	0x200011b4
 8008a00:	2000118c 	.word	0x2000118c
 8008a04:	2000114c 	.word	0x2000114c
 8008a08:	20001194 	.word	0x20001194
 8008a0c:	20000cbc 	.word	0x20000cbc
 8008a10:	20000cb8 	.word	0x20000cb8
 8008a14:	200011a0 	.word	0x200011a0
 8008a18:	2000119c 	.word	0x2000119c
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a26:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <xTaskGetTickCount+0x1c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a2c:	687b      	ldr	r3, [r7, #4]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	20001190 	.word	0x20001190

08008a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a4a:	4b4f      	ldr	r3, [pc, #316]	; (8008b88 <xTaskIncrementTick+0x148>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f040 808f 	bne.w	8008b72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a54:	4b4d      	ldr	r3, [pc, #308]	; (8008b8c <xTaskIncrementTick+0x14c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a5c:	4a4b      	ldr	r2, [pc, #300]	; (8008b8c <xTaskIncrementTick+0x14c>)
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d120      	bne.n	8008aaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a68:	4b49      	ldr	r3, [pc, #292]	; (8008b90 <xTaskIncrementTick+0x150>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	603b      	str	r3, [r7, #0]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <xTaskIncrementTick+0x46>
 8008a88:	4b41      	ldr	r3, [pc, #260]	; (8008b90 <xTaskIncrementTick+0x150>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	4b41      	ldr	r3, [pc, #260]	; (8008b94 <xTaskIncrementTick+0x154>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a3f      	ldr	r2, [pc, #252]	; (8008b90 <xTaskIncrementTick+0x150>)
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	4a3f      	ldr	r2, [pc, #252]	; (8008b94 <xTaskIncrementTick+0x154>)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	4b3e      	ldr	r3, [pc, #248]	; (8008b98 <xTaskIncrementTick+0x158>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	4a3d      	ldr	r2, [pc, #244]	; (8008b98 <xTaskIncrementTick+0x158>)
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	f000 fadb 	bl	8009060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008aaa:	4b3c      	ldr	r3, [pc, #240]	; (8008b9c <xTaskIncrementTick+0x15c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d349      	bcc.n	8008b48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab4:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <xTaskIncrementTick+0x150>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d104      	bne.n	8008ac8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008abe:	4b37      	ldr	r3, [pc, #220]	; (8008b9c <xTaskIncrementTick+0x15c>)
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	601a      	str	r2, [r3, #0]
					break;
 8008ac6:	e03f      	b.n	8008b48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac8:	4b31      	ldr	r3, [pc, #196]	; (8008b90 <xTaskIncrementTick+0x150>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d203      	bcs.n	8008ae8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ae0:	4a2e      	ldr	r2, [pc, #184]	; (8008b9c <xTaskIncrementTick+0x15c>)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ae6:	e02f      	b.n	8008b48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe ff79 	bl	80079e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d004      	beq.n	8008b04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	3318      	adds	r3, #24
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe ff70 	bl	80079e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <xTaskIncrementTick+0x160>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d903      	bls.n	8008b18 <xTaskIncrementTick+0xd8>
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	4a22      	ldr	r2, [pc, #136]	; (8008ba0 <xTaskIncrementTick+0x160>)
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4a1f      	ldr	r2, [pc, #124]	; (8008ba4 <xTaskIncrementTick+0x164>)
 8008b26:	441a      	add	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f7fe fefb 	bl	800792a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	4b1b      	ldr	r3, [pc, #108]	; (8008ba8 <xTaskIncrementTick+0x168>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d3b8      	bcc.n	8008ab4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b42:	2301      	movs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b46:	e7b5      	b.n	8008ab4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b48:	4b17      	ldr	r3, [pc, #92]	; (8008ba8 <xTaskIncrementTick+0x168>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4e:	4915      	ldr	r1, [pc, #84]	; (8008ba4 <xTaskIncrementTick+0x164>)
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d901      	bls.n	8008b64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b64:	4b11      	ldr	r3, [pc, #68]	; (8008bac <xTaskIncrementTick+0x16c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e004      	b.n	8008b7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b72:	4b0f      	ldr	r3, [pc, #60]	; (8008bb0 <xTaskIncrementTick+0x170>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3301      	adds	r3, #1
 8008b78:	4a0d      	ldr	r2, [pc, #52]	; (8008bb0 <xTaskIncrementTick+0x170>)
 8008b7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b7c:	697b      	ldr	r3, [r7, #20]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	200011b4 	.word	0x200011b4
 8008b8c:	20001190 	.word	0x20001190
 8008b90:	20001144 	.word	0x20001144
 8008b94:	20001148 	.word	0x20001148
 8008b98:	200011a4 	.word	0x200011a4
 8008b9c:	200011ac 	.word	0x200011ac
 8008ba0:	20001194 	.word	0x20001194
 8008ba4:	20000cbc 	.word	0x20000cbc
 8008ba8:	20000cb8 	.word	0x20000cb8
 8008bac:	200011a0 	.word	0x200011a0
 8008bb0:	2000119c 	.word	0x2000119c

08008bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bba:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <vTaskSwitchContext+0xb0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bc2:	4b29      	ldr	r3, [pc, #164]	; (8008c68 <vTaskSwitchContext+0xb4>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bc8:	e046      	b.n	8008c58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008bca:	4b27      	ldr	r3, [pc, #156]	; (8008c68 <vTaskSwitchContext+0xb4>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd0:	4b26      	ldr	r3, [pc, #152]	; (8008c6c <vTaskSwitchContext+0xb8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	e010      	b.n	8008bfa <vTaskSwitchContext+0x46>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <vTaskSwitchContext+0x40>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	607b      	str	r3, [r7, #4]
}
 8008bf0:	bf00      	nop
 8008bf2:	e7fe      	b.n	8008bf2 <vTaskSwitchContext+0x3e>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	491d      	ldr	r1, [pc, #116]	; (8008c70 <vTaskSwitchContext+0xbc>)
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d0e4      	beq.n	8008bd8 <vTaskSwitchContext+0x24>
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <vTaskSwitchContext+0xbc>)
 8008c1a:	4413      	add	r3, r2
 8008c1c:	60bb      	str	r3, [r7, #8]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	605a      	str	r2, [r3, #4]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d104      	bne.n	8008c3e <vTaskSwitchContext+0x8a>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	605a      	str	r2, [r3, #4]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	4a0b      	ldr	r2, [pc, #44]	; (8008c74 <vTaskSwitchContext+0xc0>)
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <vTaskSwitchContext+0xb8>)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c4e:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <vTaskSwitchContext+0xc0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3354      	adds	r3, #84	; 0x54
 8008c54:	4a08      	ldr	r2, [pc, #32]	; (8008c78 <vTaskSwitchContext+0xc4>)
 8008c56:	6013      	str	r3, [r2, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	200011b4 	.word	0x200011b4
 8008c68:	200011a0 	.word	0x200011a0
 8008c6c:	20001194 	.word	0x20001194
 8008c70:	20000cbc 	.word	0x20000cbc
 8008c74:	20000cb8 	.word	0x20000cb8
 8008c78:	20000010 	.word	0x20000010

08008c7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	60fb      	str	r3, [r7, #12]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ca2:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <vTaskPlaceOnEventList+0x44>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3318      	adds	r3, #24
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fe fe61 	bl	8007972 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	6838      	ldr	r0, [r7, #0]
 8008cb4:	f000 fa80 	bl	80091b8 <prvAddCurrentTaskToDelayedList>
}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000cb8 	.word	0x20000cb8

08008cc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	617b      	str	r3, [r7, #20]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <vTaskPlaceOnEventListRestricted+0x54>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7fe fe18 	bl	800792a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d00:	f04f 33ff 	mov.w	r3, #4294967295
 8008d04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	68b8      	ldr	r0, [r7, #8]
 8008d0a:	f000 fa55 	bl	80091b8 <prvAddCurrentTaskToDelayedList>
	}
 8008d0e:	bf00      	nop
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000cb8 	.word	0x20000cb8

08008d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60fb      	str	r3, [r7, #12]
}
 8008d44:	bf00      	nop
 8008d46:	e7fe      	b.n	8008d46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3318      	adds	r3, #24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fe fe49 	bl	80079e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d52:	4b1e      	ldr	r3, [pc, #120]	; (8008dcc <xTaskRemoveFromEventList+0xb0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d11d      	bne.n	8008d96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fe40 	bl	80079e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d68:	4b19      	ldr	r3, [pc, #100]	; (8008dd0 <xTaskRemoveFromEventList+0xb4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d903      	bls.n	8008d78 <xTaskRemoveFromEventList+0x5c>
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	4a16      	ldr	r2, [pc, #88]	; (8008dd0 <xTaskRemoveFromEventList+0xb4>)
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <xTaskRemoveFromEventList+0xb8>)
 8008d86:	441a      	add	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f7fe fdcb 	bl	800792a <vListInsertEnd>
 8008d94:	e005      	b.n	8008da2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	3318      	adds	r3, #24
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	480e      	ldr	r0, [pc, #56]	; (8008dd8 <xTaskRemoveFromEventList+0xbc>)
 8008d9e:	f7fe fdc4 	bl	800792a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da6:	4b0d      	ldr	r3, [pc, #52]	; (8008ddc <xTaskRemoveFromEventList+0xc0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d905      	bls.n	8008dbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008db4:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <xTaskRemoveFromEventList+0xc4>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	e001      	b.n	8008dc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008dc0:	697b      	ldr	r3, [r7, #20]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	200011b4 	.word	0x200011b4
 8008dd0:	20001194 	.word	0x20001194
 8008dd4:	20000cbc 	.word	0x20000cbc
 8008dd8:	2000114c 	.word	0x2000114c
 8008ddc:	20000cb8 	.word	0x20000cb8
 8008de0:	200011a0 	.word	0x200011a0

08008de4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <vTaskInternalSetTimeOutState+0x24>)
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <vTaskInternalSetTimeOutState+0x28>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	605a      	str	r2, [r3, #4]
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	200011a4 	.word	0x200011a4
 8008e0c:	20001190 	.word	0x20001190

08008e10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	613b      	str	r3, [r7, #16]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10a      	bne.n	8008e52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	60fb      	str	r3, [r7, #12]
}
 8008e4e:	bf00      	nop
 8008e50:	e7fe      	b.n	8008e50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e52:	f000 fe7f 	bl	8009b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e56:	4b1d      	ldr	r3, [pc, #116]	; (8008ecc <xTaskCheckForTimeOut+0xbc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6e:	d102      	bne.n	8008e76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	e023      	b.n	8008ebe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <xTaskCheckForTimeOut+0xc0>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d007      	beq.n	8008e92 <xTaskCheckForTimeOut+0x82>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	61fb      	str	r3, [r7, #28]
 8008e90:	e015      	b.n	8008ebe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d20b      	bcs.n	8008eb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	1ad2      	subs	r2, r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff ff9b 	bl	8008de4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]
 8008eb2:	e004      	b.n	8008ebe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ebe:	f000 fe79 	bl	8009bb4 <vPortExitCritical>

	return xReturn;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20001190 	.word	0x20001190
 8008ed0:	200011a4 	.word	0x200011a4

08008ed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ed8:	4b03      	ldr	r3, [pc, #12]	; (8008ee8 <vTaskMissedYield+0x14>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	200011a0 	.word	0x200011a0

08008eec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ef4:	f000 f852 	bl	8008f9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ef8:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <prvIdleTask+0x28>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d9f9      	bls.n	8008ef4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f00:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <prvIdleTask+0x2c>)
 8008f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f10:	e7f0      	b.n	8008ef4 <prvIdleTask+0x8>
 8008f12:	bf00      	nop
 8008f14:	20000cbc 	.word	0x20000cbc
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f22:	2300      	movs	r3, #0
 8008f24:	607b      	str	r3, [r7, #4]
 8008f26:	e00c      	b.n	8008f42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4a12      	ldr	r2, [pc, #72]	; (8008f7c <prvInitialiseTaskLists+0x60>)
 8008f34:	4413      	add	r3, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fcca 	bl	80078d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	607b      	str	r3, [r7, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b37      	cmp	r3, #55	; 0x37
 8008f46:	d9ef      	bls.n	8008f28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f48:	480d      	ldr	r0, [pc, #52]	; (8008f80 <prvInitialiseTaskLists+0x64>)
 8008f4a:	f7fe fcc1 	bl	80078d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f4e:	480d      	ldr	r0, [pc, #52]	; (8008f84 <prvInitialiseTaskLists+0x68>)
 8008f50:	f7fe fcbe 	bl	80078d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f54:	480c      	ldr	r0, [pc, #48]	; (8008f88 <prvInitialiseTaskLists+0x6c>)
 8008f56:	f7fe fcbb 	bl	80078d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f5a:	480c      	ldr	r0, [pc, #48]	; (8008f8c <prvInitialiseTaskLists+0x70>)
 8008f5c:	f7fe fcb8 	bl	80078d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f60:	480b      	ldr	r0, [pc, #44]	; (8008f90 <prvInitialiseTaskLists+0x74>)
 8008f62:	f7fe fcb5 	bl	80078d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f66:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <prvInitialiseTaskLists+0x78>)
 8008f68:	4a05      	ldr	r2, [pc, #20]	; (8008f80 <prvInitialiseTaskLists+0x64>)
 8008f6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <prvInitialiseTaskLists+0x7c>)
 8008f6e:	4a05      	ldr	r2, [pc, #20]	; (8008f84 <prvInitialiseTaskLists+0x68>)
 8008f70:	601a      	str	r2, [r3, #0]
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000cbc 	.word	0x20000cbc
 8008f80:	2000111c 	.word	0x2000111c
 8008f84:	20001130 	.word	0x20001130
 8008f88:	2000114c 	.word	0x2000114c
 8008f8c:	20001160 	.word	0x20001160
 8008f90:	20001178 	.word	0x20001178
 8008f94:	20001144 	.word	0x20001144
 8008f98:	20001148 	.word	0x20001148

08008f9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fa2:	e019      	b.n	8008fd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fa4:	f000 fdd6 	bl	8009b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa8:	4b10      	ldr	r3, [pc, #64]	; (8008fec <prvCheckTasksWaitingTermination+0x50>)
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fd15 	bl	80079e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <prvCheckTasksWaitingTermination+0x54>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	4a0b      	ldr	r2, [pc, #44]	; (8008ff0 <prvCheckTasksWaitingTermination+0x54>)
 8008fc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <prvCheckTasksWaitingTermination+0x58>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	4a0a      	ldr	r2, [pc, #40]	; (8008ff4 <prvCheckTasksWaitingTermination+0x58>)
 8008fcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008fce:	f000 fdf1 	bl	8009bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f810 	bl	8008ff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fd8:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <prvCheckTasksWaitingTermination+0x58>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e1      	bne.n	8008fa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20001160 	.word	0x20001160
 8008ff0:	2000118c 	.word	0x2000118c
 8008ff4:	20001174 	.word	0x20001174

08008ff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3354      	adds	r3, #84	; 0x54
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fef7 	bl	800adf8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009010:	2b00      	cmp	r3, #0
 8009012:	d108      	bne.n	8009026 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009018:	4618      	mov	r0, r3
 800901a:	f000 ff89 	bl	8009f30 <vPortFree>
				vPortFree( pxTCB );
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 ff86 	bl	8009f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009024:	e018      	b.n	8009058 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800902c:	2b01      	cmp	r3, #1
 800902e:	d103      	bne.n	8009038 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 ff7d 	bl	8009f30 <vPortFree>
	}
 8009036:	e00f      	b.n	8009058 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800903e:	2b02      	cmp	r3, #2
 8009040:	d00a      	beq.n	8009058 <prvDeleteTCB+0x60>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	60fb      	str	r3, [r7, #12]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <prvDeleteTCB+0x5e>
	}
 8009058:	bf00      	nop
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009066:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <prvResetNextTaskUnblockTime+0x38>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d104      	bne.n	800907a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009070:	4b0a      	ldr	r3, [pc, #40]	; (800909c <prvResetNextTaskUnblockTime+0x3c>)
 8009072:	f04f 32ff 	mov.w	r2, #4294967295
 8009076:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009078:	e008      	b.n	800908c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907a:	4b07      	ldr	r3, [pc, #28]	; (8009098 <prvResetNextTaskUnblockTime+0x38>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a04      	ldr	r2, [pc, #16]	; (800909c <prvResetNextTaskUnblockTime+0x3c>)
 800908a:	6013      	str	r3, [r2, #0]
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	20001144 	.word	0x20001144
 800909c:	200011ac 	.word	0x200011ac

080090a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090a6:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <xTaskGetSchedulerState+0x34>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090ae:	2301      	movs	r3, #1
 80090b0:	607b      	str	r3, [r7, #4]
 80090b2:	e008      	b.n	80090c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090b4:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <xTaskGetSchedulerState+0x38>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090bc:	2302      	movs	r3, #2
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	e001      	b.n	80090c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090c2:	2300      	movs	r3, #0
 80090c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090c6:	687b      	ldr	r3, [r7, #4]
	}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20001198 	.word	0x20001198
 80090d8:	200011b4 	.word	0x200011b4

080090dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090e8:	2300      	movs	r3, #0
 80090ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d056      	beq.n	80091a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090f2:	4b2e      	ldr	r3, [pc, #184]	; (80091ac <xTaskPriorityDisinherit+0xd0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d00a      	beq.n	8009112 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	f383 8811 	msr	BASEPRI, r3
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	60fb      	str	r3, [r7, #12]
}
 800910e:	bf00      	nop
 8009110:	e7fe      	b.n	8009110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	60bb      	str	r3, [r7, #8]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009134:	1e5a      	subs	r2, r3, #1
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009142:	429a      	cmp	r2, r3
 8009144:	d02c      	beq.n	80091a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914a:	2b00      	cmp	r3, #0
 800914c:	d128      	bne.n	80091a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	3304      	adds	r3, #4
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fc46 	bl	80079e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <xTaskPriorityDisinherit+0xd4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	429a      	cmp	r2, r3
 8009176:	d903      	bls.n	8009180 <xTaskPriorityDisinherit+0xa4>
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	4a0c      	ldr	r2, [pc, #48]	; (80091b0 <xTaskPriorityDisinherit+0xd4>)
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4a09      	ldr	r2, [pc, #36]	; (80091b4 <xTaskPriorityDisinherit+0xd8>)
 800918e:	441a      	add	r2, r3
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f7fe fbc7 	bl	800792a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091a0:	697b      	ldr	r3, [r7, #20]
	}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000cb8 	.word	0x20000cb8
 80091b0:	20001194 	.word	0x20001194
 80091b4:	20000cbc 	.word	0x20000cbc

080091b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091c2:	4b21      	ldr	r3, [pc, #132]	; (8009248 <prvAddCurrentTaskToDelayedList+0x90>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c8:	4b20      	ldr	r3, [pc, #128]	; (800924c <prvAddCurrentTaskToDelayedList+0x94>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fc08 	bl	80079e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091da:	d10a      	bne.n	80091f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d007      	beq.n	80091f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091e2:	4b1a      	ldr	r3, [pc, #104]	; (800924c <prvAddCurrentTaskToDelayedList+0x94>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4819      	ldr	r0, [pc, #100]	; (8009250 <prvAddCurrentTaskToDelayedList+0x98>)
 80091ec:	f7fe fb9d 	bl	800792a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091f0:	e026      	b.n	8009240 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4413      	add	r3, r2
 80091f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <prvAddCurrentTaskToDelayedList+0x94>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	429a      	cmp	r2, r3
 8009208:	d209      	bcs.n	800921e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800920a:	4b12      	ldr	r3, [pc, #72]	; (8009254 <prvAddCurrentTaskToDelayedList+0x9c>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b0f      	ldr	r3, [pc, #60]	; (800924c <prvAddCurrentTaskToDelayedList+0x94>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3304      	adds	r3, #4
 8009214:	4619      	mov	r1, r3
 8009216:	4610      	mov	r0, r2
 8009218:	f7fe fbab 	bl	8007972 <vListInsert>
}
 800921c:	e010      	b.n	8009240 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b0a      	ldr	r3, [pc, #40]	; (800924c <prvAddCurrentTaskToDelayedList+0x94>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3304      	adds	r3, #4
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f7fe fba1 	bl	8007972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	429a      	cmp	r2, r3
 8009238:	d202      	bcs.n	8009240 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800923a:	4a08      	ldr	r2, [pc, #32]	; (800925c <prvAddCurrentTaskToDelayedList+0xa4>)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6013      	str	r3, [r2, #0]
}
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20001190 	.word	0x20001190
 800924c:	20000cb8 	.word	0x20000cb8
 8009250:	20001178 	.word	0x20001178
 8009254:	20001148 	.word	0x20001148
 8009258:	20001144 	.word	0x20001144
 800925c:	200011ac 	.word	0x200011ac

08009260 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800926a:	f000 fb07 	bl	800987c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800926e:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <xTimerCreateTimerTask+0x80>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d021      	beq.n	80092ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800927a:	2300      	movs	r3, #0
 800927c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800927e:	1d3a      	adds	r2, r7, #4
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	f107 030c 	add.w	r3, r7, #12
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fb07 	bl	800789c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	9202      	str	r2, [sp, #8]
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	2302      	movs	r3, #2
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	2300      	movs	r3, #0
 800929e:	460a      	mov	r2, r1
 80092a0:	4910      	ldr	r1, [pc, #64]	; (80092e4 <xTimerCreateTimerTask+0x84>)
 80092a2:	4811      	ldr	r0, [pc, #68]	; (80092e8 <xTimerCreateTimerTask+0x88>)
 80092a4:	f7ff f8b4 	bl	8008410 <xTaskCreateStatic>
 80092a8:	4603      	mov	r3, r0
 80092aa:	4a10      	ldr	r2, [pc, #64]	; (80092ec <xTimerCreateTimerTask+0x8c>)
 80092ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092ae:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <xTimerCreateTimerTask+0x8c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092b6:	2301      	movs	r3, #1
 80092b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	613b      	str	r3, [r7, #16]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80092d6:	697b      	ldr	r3, [r7, #20]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	200011e8 	.word	0x200011e8
 80092e4:	0800e4c0 	.word	0x0800e4c0
 80092e8:	08009425 	.word	0x08009425
 80092ec:	200011ec 	.word	0x200011ec

080092f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	; 0x28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092fe:	2300      	movs	r3, #0
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	623b      	str	r3, [r7, #32]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800931e:	4b1a      	ldr	r3, [pc, #104]	; (8009388 <xTimerGenericCommand+0x98>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d02a      	beq.n	800937c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	2b05      	cmp	r3, #5
 8009336:	dc18      	bgt.n	800936a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009338:	f7ff feb2 	bl	80090a0 <xTaskGetSchedulerState>
 800933c:	4603      	mov	r3, r0
 800933e:	2b02      	cmp	r3, #2
 8009340:	d109      	bne.n	8009356 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009342:	4b11      	ldr	r3, [pc, #68]	; (8009388 <xTimerGenericCommand+0x98>)
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	f107 0110 	add.w	r1, r7, #16
 800934a:	2300      	movs	r3, #0
 800934c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934e:	f7fe fc77 	bl	8007c40 <xQueueGenericSend>
 8009352:	6278      	str	r0, [r7, #36]	; 0x24
 8009354:	e012      	b.n	800937c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009356:	4b0c      	ldr	r3, [pc, #48]	; (8009388 <xTimerGenericCommand+0x98>)
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	f107 0110 	add.w	r1, r7, #16
 800935e:	2300      	movs	r3, #0
 8009360:	2200      	movs	r2, #0
 8009362:	f7fe fc6d 	bl	8007c40 <xQueueGenericSend>
 8009366:	6278      	str	r0, [r7, #36]	; 0x24
 8009368:	e008      	b.n	800937c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800936a:	4b07      	ldr	r3, [pc, #28]	; (8009388 <xTimerGenericCommand+0x98>)
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	f107 0110 	add.w	r1, r7, #16
 8009372:	2300      	movs	r3, #0
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	f7fe fd61 	bl	8007e3c <xQueueGenericSendFromISR>
 800937a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800937e:	4618      	mov	r0, r3
 8009380:	3728      	adds	r7, #40	; 0x28
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	200011e8 	.word	0x200011e8

0800938c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af02      	add	r7, sp, #8
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009396:	4b22      	ldr	r3, [pc, #136]	; (8009420 <prvProcessExpiredTimer+0x94>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	3304      	adds	r3, #4
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fe fb1d 	bl	80079e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d022      	beq.n	80093fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	699a      	ldr	r2, [r3, #24]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	18d1      	adds	r1, r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	6978      	ldr	r0, [r7, #20]
 80093c6:	f000 f8d1 	bl	800956c <prvInsertTimerInActiveList>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01f      	beq.n	8009410 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093d0:	2300      	movs	r3, #0
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	2300      	movs	r3, #0
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	2100      	movs	r1, #0
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7ff ff88 	bl	80092f0 <xTimerGenericCommand>
 80093e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d113      	bne.n	8009410 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	60fb      	str	r3, [r7, #12]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009404:	f023 0301 	bic.w	r3, r3, #1
 8009408:	b2da      	uxtb	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	6978      	ldr	r0, [r7, #20]
 8009416:	4798      	blx	r3
}
 8009418:	bf00      	nop
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200011e0 	.word	0x200011e0

08009424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	4618      	mov	r0, r3
 8009432:	f000 f857 	bl	80094e4 <prvGetNextExpireTime>
 8009436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	4619      	mov	r1, r3
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f803 	bl	8009448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009442:	f000 f8d5 	bl	80095f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009446:	e7f1      	b.n	800942c <prvTimerTask+0x8>

08009448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009452:	f7ff fa39 	bl	80088c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009456:	f107 0308 	add.w	r3, r7, #8
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f866 	bl	800952c <prvSampleTimeNow>
 8009460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d130      	bne.n	80094ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <prvProcessTimerOrBlockTask+0x3c>
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	429a      	cmp	r2, r3
 8009474:	d806      	bhi.n	8009484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009476:	f7ff fa35 	bl	80088e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800947a:	68f9      	ldr	r1, [r7, #12]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ff85 	bl	800938c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009482:	e024      	b.n	80094ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800948a:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <prvProcessTimerOrBlockTask+0x90>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <prvProcessTimerOrBlockTask+0x50>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <prvProcessTimerOrBlockTask+0x52>
 8009498:	2300      	movs	r3, #0
 800949a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <prvProcessTimerOrBlockTask+0x94>)
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	f7fe ff7d 	bl	80083a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094ae:	f7ff fa19 	bl	80088e4 <xTaskResumeAll>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094b8:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <prvProcessTimerOrBlockTask+0x98>)
 80094ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	f3bf 8f6f 	isb	sy
}
 80094c8:	e001      	b.n	80094ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80094ca:	f7ff fa0b 	bl	80088e4 <xTaskResumeAll>
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200011e4 	.word	0x200011e4
 80094dc:	200011e8 	.word	0x200011e8
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80094ec:	4b0e      	ldr	r3, [pc, #56]	; (8009528 <prvGetNextExpireTime+0x44>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <prvGetNextExpireTime+0x16>
 80094f6:	2201      	movs	r2, #1
 80094f8:	e000      	b.n	80094fc <prvGetNextExpireTime+0x18>
 80094fa:	2200      	movs	r2, #0
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d105      	bne.n	8009514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009508:	4b07      	ldr	r3, [pc, #28]	; (8009528 <prvGetNextExpireTime+0x44>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	e001      	b.n	8009518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009518:	68fb      	ldr	r3, [r7, #12]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	200011e0 	.word	0x200011e0

0800952c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009534:	f7ff fa74 	bl	8008a20 <xTaskGetTickCount>
 8009538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800953a:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <prvSampleTimeNow+0x3c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	429a      	cmp	r2, r3
 8009542:	d205      	bcs.n	8009550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009544:	f000 f936 	bl	80097b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e002      	b.n	8009556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009556:	4a04      	ldr	r2, [pc, #16]	; (8009568 <prvSampleTimeNow+0x3c>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800955c:	68fb      	ldr	r3, [r7, #12]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	200011f0 	.word	0x200011f0

0800956c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d812      	bhi.n	80095b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	1ad2      	subs	r2, r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	429a      	cmp	r2, r3
 800959e:	d302      	bcc.n	80095a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e01b      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095a6:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <prvInsertTimerInActiveList+0x7c>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7fe f9de 	bl	8007972 <vListInsert>
 80095b6:	e012      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d206      	bcs.n	80095ce <prvInsertTimerInActiveList+0x62>
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d302      	bcc.n	80095ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80095c8:	2301      	movs	r3, #1
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	e007      	b.n	80095de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095ce:	4b07      	ldr	r3, [pc, #28]	; (80095ec <prvInsertTimerInActiveList+0x80>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f7fe f9ca 	bl	8007972 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80095de:	697b      	ldr	r3, [r7, #20]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	200011e4 	.word	0x200011e4
 80095ec:	200011e0 	.word	0x200011e0

080095f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08e      	sub	sp, #56	; 0x38
 80095f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095f6:	e0ca      	b.n	800978e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da18      	bge.n	8009630 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095fe:	1d3b      	adds	r3, r7, #4
 8009600:	3304      	adds	r3, #4
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	61fb      	str	r3, [r7, #28]
}
 800961c:	bf00      	nop
 800961e:	e7fe      	b.n	800961e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009626:	6850      	ldr	r0, [r2, #4]
 8009628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800962a:	6892      	ldr	r2, [r2, #8]
 800962c:	4611      	mov	r1, r2
 800962e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f2c0 80aa 	blt.w	800978c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800963c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d004      	beq.n	800964e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	3304      	adds	r3, #4
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe f9cb 	bl	80079e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800964e:	463b      	mov	r3, r7
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff ff6b 	bl	800952c <prvSampleTimeNow>
 8009656:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b09      	cmp	r3, #9
 800965c:	f200 8097 	bhi.w	800978e <prvProcessReceivedCommands+0x19e>
 8009660:	a201      	add	r2, pc, #4	; (adr r2, 8009668 <prvProcessReceivedCommands+0x78>)
 8009662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009666:	bf00      	nop
 8009668:	08009691 	.word	0x08009691
 800966c:	08009691 	.word	0x08009691
 8009670:	08009691 	.word	0x08009691
 8009674:	08009705 	.word	0x08009705
 8009678:	08009719 	.word	0x08009719
 800967c:	08009763 	.word	0x08009763
 8009680:	08009691 	.word	0x08009691
 8009684:	08009691 	.word	0x08009691
 8009688:	08009705 	.word	0x08009705
 800968c:	08009719 	.word	0x08009719
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	b2da      	uxtb	r2, r3
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	18d1      	adds	r1, r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b0:	f7ff ff5c 	bl	800956c <prvInsertTimerInActiveList>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d069      	beq.n	800978e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d05e      	beq.n	800978e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	441a      	add	r2, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	2300      	movs	r3, #0
 80096de:	2100      	movs	r1, #0
 80096e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e2:	f7ff fe05 	bl	80092f0 <xTimerGenericCommand>
 80096e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d14f      	bne.n	800978e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	61bb      	str	r3, [r7, #24]
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800970a:	f023 0301 	bic.w	r3, r3, #1
 800970e:	b2da      	uxtb	r2, r3
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009716:	e03a      	b.n	800978e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	b2da      	uxtb	r2, r3
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	617b      	str	r3, [r7, #20]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	699a      	ldr	r2, [r3, #24]
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	18d1      	adds	r1, r2, r3
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975c:	f7ff ff06 	bl	800956c <prvInsertTimerInActiveList>
					break;
 8009760:	e015      	b.n	800978e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d103      	bne.n	8009778 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009772:	f000 fbdd 	bl	8009f30 <vPortFree>
 8009776:	e00a      	b.n	800978e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800977e:	f023 0301 	bic.w	r3, r3, #1
 8009782:	b2da      	uxtb	r2, r3
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800978a:	e000      	b.n	800978e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800978c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800978e:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <prvProcessReceivedCommands+0x1c0>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	1d39      	adds	r1, r7, #4
 8009794:	2200      	movs	r2, #0
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fbec 	bl	8007f74 <xQueueReceive>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f47f af2a 	bne.w	80095f8 <prvProcessReceivedCommands+0x8>
	}
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	3730      	adds	r7, #48	; 0x30
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	200011e8 	.word	0x200011e8

080097b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097ba:	e048      	b.n	800984e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097bc:	4b2d      	ldr	r3, [pc, #180]	; (8009874 <prvSwitchTimerLists+0xc0>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c6:	4b2b      	ldr	r3, [pc, #172]	; (8009874 <prvSwitchTimerLists+0xc0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe f905 	bl	80079e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d02e      	beq.n	800984e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d90e      	bls.n	8009820 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800980e:	4b19      	ldr	r3, [pc, #100]	; (8009874 <prvSwitchTimerLists+0xc0>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3304      	adds	r3, #4
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f7fe f8aa 	bl	8007972 <vListInsert>
 800981e:	e016      	b.n	800984e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009820:	2300      	movs	r3, #0
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	2100      	movs	r1, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f7ff fd60 	bl	80092f0 <xTimerGenericCommand>
 8009830:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	603b      	str	r3, [r7, #0]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <prvSwitchTimerLists+0xc0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1b1      	bne.n	80097bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009858:	4b06      	ldr	r3, [pc, #24]	; (8009874 <prvSwitchTimerLists+0xc0>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800985e:	4b06      	ldr	r3, [pc, #24]	; (8009878 <prvSwitchTimerLists+0xc4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a04      	ldr	r2, [pc, #16]	; (8009874 <prvSwitchTimerLists+0xc0>)
 8009864:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009866:	4a04      	ldr	r2, [pc, #16]	; (8009878 <prvSwitchTimerLists+0xc4>)
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	6013      	str	r3, [r2, #0]
}
 800986c:	bf00      	nop
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	200011e0 	.word	0x200011e0
 8009878:	200011e4 	.word	0x200011e4

0800987c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009882:	f000 f967 	bl	8009b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009886:	4b15      	ldr	r3, [pc, #84]	; (80098dc <prvCheckForValidListAndQueue+0x60>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d120      	bne.n	80098d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800988e:	4814      	ldr	r0, [pc, #80]	; (80098e0 <prvCheckForValidListAndQueue+0x64>)
 8009890:	f7fe f81e 	bl	80078d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009894:	4813      	ldr	r0, [pc, #76]	; (80098e4 <prvCheckForValidListAndQueue+0x68>)
 8009896:	f7fe f81b 	bl	80078d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800989a:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <prvCheckForValidListAndQueue+0x6c>)
 800989c:	4a10      	ldr	r2, [pc, #64]	; (80098e0 <prvCheckForValidListAndQueue+0x64>)
 800989e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098a0:	4b12      	ldr	r3, [pc, #72]	; (80098ec <prvCheckForValidListAndQueue+0x70>)
 80098a2:	4a10      	ldr	r2, [pc, #64]	; (80098e4 <prvCheckForValidListAndQueue+0x68>)
 80098a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098a6:	2300      	movs	r3, #0
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	4b11      	ldr	r3, [pc, #68]	; (80098f0 <prvCheckForValidListAndQueue+0x74>)
 80098ac:	4a11      	ldr	r2, [pc, #68]	; (80098f4 <prvCheckForValidListAndQueue+0x78>)
 80098ae:	2110      	movs	r1, #16
 80098b0:	200a      	movs	r0, #10
 80098b2:	f7fe f929 	bl	8007b08 <xQueueGenericCreateStatic>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4a08      	ldr	r2, [pc, #32]	; (80098dc <prvCheckForValidListAndQueue+0x60>)
 80098ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098bc:	4b07      	ldr	r3, [pc, #28]	; (80098dc <prvCheckForValidListAndQueue+0x60>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d005      	beq.n	80098d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <prvCheckForValidListAndQueue+0x60>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	490b      	ldr	r1, [pc, #44]	; (80098f8 <prvCheckForValidListAndQueue+0x7c>)
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fd42 	bl	8008354 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098d0:	f000 f970 	bl	8009bb4 <vPortExitCritical>
}
 80098d4:	bf00      	nop
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	200011e8 	.word	0x200011e8
 80098e0:	200011b8 	.word	0x200011b8
 80098e4:	200011cc 	.word	0x200011cc
 80098e8:	200011e0 	.word	0x200011e0
 80098ec:	200011e4 	.word	0x200011e4
 80098f0:	20001294 	.word	0x20001294
 80098f4:	200011f4 	.word	0x200011f4
 80098f8:	0800e4c8 	.word	0x0800e4c8

080098fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3b04      	subs	r3, #4
 800990c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3b04      	subs	r3, #4
 800991a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f023 0201 	bic.w	r2, r3, #1
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3b04      	subs	r3, #4
 800992a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800992c:	4a0c      	ldr	r2, [pc, #48]	; (8009960 <pxPortInitialiseStack+0x64>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b14      	subs	r3, #20
 8009936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3b04      	subs	r3, #4
 8009942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f06f 0202 	mvn.w	r2, #2
 800994a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3b20      	subs	r3, #32
 8009950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009952:	68fb      	ldr	r3, [r7, #12]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	08009965 	.word	0x08009965

08009964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800996e:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <prvTaskExitError+0x54>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009976:	d00a      	beq.n	800998e <prvTaskExitError+0x2a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	60fb      	str	r3, [r7, #12]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <prvTaskExitError+0x28>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	60bb      	str	r3, [r7, #8]
}
 80099a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099a2:	bf00      	nop
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0fc      	beq.n	80099a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	2000000c 	.word	0x2000000c
 80099bc:	00000000 	.word	0x00000000

080099c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099c0:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <pxCurrentTCBConst2>)
 80099c2:	6819      	ldr	r1, [r3, #0]
 80099c4:	6808      	ldr	r0, [r1, #0]
 80099c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	f380 8809 	msr	PSP, r0
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8811 	msr	BASEPRI, r0
 80099da:	4770      	bx	lr
 80099dc:	f3af 8000 	nop.w

080099e0 <pxCurrentTCBConst2>:
 80099e0:	20000cb8 	.word	0x20000cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop

080099e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099e8:	4808      	ldr	r0, [pc, #32]	; (8009a0c <prvPortStartFirstTask+0x24>)
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	6800      	ldr	r0, [r0, #0]
 80099ee:	f380 8808 	msr	MSP, r0
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f380 8814 	msr	CONTROL, r0
 80099fa:	b662      	cpsie	i
 80099fc:	b661      	cpsie	f
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	df00      	svc	0
 8009a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a0a:	bf00      	nop
 8009a0c:	e000ed08 	.word	0xe000ed08

08009a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a16:	4b46      	ldr	r3, [pc, #280]	; (8009b30 <xPortStartScheduler+0x120>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a46      	ldr	r2, [pc, #280]	; (8009b34 <xPortStartScheduler+0x124>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10a      	bne.n	8009a36 <xPortStartScheduler+0x26>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a36:	4b3e      	ldr	r3, [pc, #248]	; (8009b30 <xPortStartScheduler+0x120>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a3f      	ldr	r2, [pc, #252]	; (8009b38 <xPortStartScheduler+0x128>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d10a      	bne.n	8009a56 <xPortStartScheduler+0x46>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a56:	4b39      	ldr	r3, [pc, #228]	; (8009b3c <xPortStartScheduler+0x12c>)
 8009a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	22ff      	movs	r2, #255	; 0xff
 8009a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <xPortStartScheduler+0x130>)
 8009a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a7e:	4b31      	ldr	r3, [pc, #196]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a80:	2207      	movs	r2, #7
 8009a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a84:	e009      	b.n	8009a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a86:	4b2f      	ldr	r3, [pc, #188]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	4a2d      	ldr	r2, [pc, #180]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa2:	2b80      	cmp	r3, #128	; 0x80
 8009aa4:	d0ef      	beq.n	8009a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009aa6:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <xPortStartScheduler+0x134>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f1c3 0307 	rsb	r3, r3, #7
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d00a      	beq.n	8009ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60bb      	str	r3, [r7, #8]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ac8:	4b1e      	ldr	r3, [pc, #120]	; (8009b44 <xPortStartScheduler+0x134>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	4a1d      	ldr	r2, [pc, #116]	; (8009b44 <xPortStartScheduler+0x134>)
 8009ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ad2:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <xPortStartScheduler+0x134>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ada:	4a1a      	ldr	r2, [pc, #104]	; (8009b44 <xPortStartScheduler+0x134>)
 8009adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <xPortStartScheduler+0x138>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a17      	ldr	r2, [pc, #92]	; (8009b48 <xPortStartScheduler+0x138>)
 8009aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <xPortStartScheduler+0x138>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a14      	ldr	r2, [pc, #80]	; (8009b48 <xPortStartScheduler+0x138>)
 8009af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009afe:	f000 f8dd 	bl	8009cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <xPortStartScheduler+0x13c>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b08:	f000 f8fc 	bl	8009d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b0c:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <xPortStartScheduler+0x140>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <xPortStartScheduler+0x140>)
 8009b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b18:	f7ff ff66 	bl	80099e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b1c:	f7ff f84a 	bl	8008bb4 <vTaskSwitchContext>
	prvTaskExitError();
 8009b20:	f7ff ff20 	bl	8009964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	e000ed00 	.word	0xe000ed00
 8009b34:	410fc271 	.word	0x410fc271
 8009b38:	410fc270 	.word	0x410fc270
 8009b3c:	e000e400 	.word	0xe000e400
 8009b40:	200012e4 	.word	0x200012e4
 8009b44:	200012e8 	.word	0x200012e8
 8009b48:	e000ed20 	.word	0xe000ed20
 8009b4c:	2000000c 	.word	0x2000000c
 8009b50:	e000ef34 	.word	0xe000ef34

08009b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	607b      	str	r3, [r7, #4]
}
 8009b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <vPortEnterCritical+0x58>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3301      	adds	r3, #1
 8009b74:	4a0d      	ldr	r2, [pc, #52]	; (8009bac <vPortEnterCritical+0x58>)
 8009b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b78:	4b0c      	ldr	r3, [pc, #48]	; (8009bac <vPortEnterCritical+0x58>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d10f      	bne.n	8009ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b80:	4b0b      	ldr	r3, [pc, #44]	; (8009bb0 <vPortEnterCritical+0x5c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	603b      	str	r3, [r7, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <vPortEnterCritical+0x4a>
	}
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	2000000c 	.word	0x2000000c
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bba:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <vPortExitCritical+0x50>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10a      	bne.n	8009bd8 <vPortExitCritical+0x24>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	607b      	str	r3, [r7, #4]
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <vPortExitCritical+0x50>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	4a09      	ldr	r2, [pc, #36]	; (8009c04 <vPortExitCritical+0x50>)
 8009be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009be2:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <vPortExitCritical+0x50>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <vPortExitCritical+0x42>
 8009bea:	2300      	movs	r3, #0
 8009bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	f383 8811 	msr	BASEPRI, r3
}
 8009bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	2000000c 	.word	0x2000000c
	...

08009c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c10:	f3ef 8009 	mrs	r0, PSP
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <pxCurrentTCBConst>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	f01e 0f10 	tst.w	lr, #16
 8009c20:	bf08      	it	eq
 8009c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c34:	f380 8811 	msr	BASEPRI, r0
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f7fe ffb8 	bl	8008bb4 <vTaskSwitchContext>
 8009c44:	f04f 0000 	mov.w	r0, #0
 8009c48:	f380 8811 	msr	BASEPRI, r0
 8009c4c:	bc09      	pop	{r0, r3}
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	6808      	ldr	r0, [r1, #0]
 8009c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c56:	f01e 0f10 	tst.w	lr, #16
 8009c5a:	bf08      	it	eq
 8009c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c60:	f380 8809 	msr	PSP, r0
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w

08009c70 <pxCurrentTCBConst>:
 8009c70:	20000cb8 	.word	0x20000cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	607b      	str	r3, [r7, #4]
}
 8009c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c92:	f7fe fed5 	bl	8008a40 <xTaskIncrementTick>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c9c:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <xPortSysTickHandler+0x40>)
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	f383 8811 	msr	BASEPRI, r3
}
 8009cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	e000ed04 	.word	0xe000ed04

08009cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <vPortSetupTimerInterrupt+0x38>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <vPortSetupTimerInterrupt+0x3c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a0a      	ldr	r2, [pc, #40]	; (8009cfc <vPortSetupTimerInterrupt+0x40>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	099b      	lsrs	r3, r3, #6
 8009cd8:	4a09      	ldr	r2, [pc, #36]	; (8009d00 <vPortSetupTimerInterrupt+0x44>)
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cde:	4b04      	ldr	r3, [pc, #16]	; (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	601a      	str	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	e000e010 	.word	0xe000e010
 8009cf4:	e000e018 	.word	0xe000e018
 8009cf8:	20000000 	.word	0x20000000
 8009cfc:	10624dd3 	.word	0x10624dd3
 8009d00:	e000e014 	.word	0xe000e014

08009d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d14 <vPortEnableVFP+0x10>
 8009d08:	6801      	ldr	r1, [r0, #0]
 8009d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d0e:	6001      	str	r1, [r0, #0]
 8009d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d12:	bf00      	nop
 8009d14:	e000ed88 	.word	0xe000ed88

08009d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d1e:	f3ef 8305 	mrs	r3, IPSR
 8009d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b0f      	cmp	r3, #15
 8009d28:	d914      	bls.n	8009d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d2a:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <vPortValidateInterruptPriority+0x70>)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d34:	4b15      	ldr	r3, [pc, #84]	; (8009d8c <vPortValidateInterruptPriority+0x74>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	7afa      	ldrb	r2, [r7, #11]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d20a      	bcs.n	8009d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	607b      	str	r3, [r7, #4]
}
 8009d50:	bf00      	nop
 8009d52:	e7fe      	b.n	8009d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d54:	4b0e      	ldr	r3, [pc, #56]	; (8009d90 <vPortValidateInterruptPriority+0x78>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <vPortValidateInterruptPriority+0x7c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d90a      	bls.n	8009d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	603b      	str	r3, [r7, #0]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <vPortValidateInterruptPriority+0x60>
	}
 8009d7a:	bf00      	nop
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	e000e3f0 	.word	0xe000e3f0
 8009d8c:	200012e4 	.word	0x200012e4
 8009d90:	e000ed0c 	.word	0xe000ed0c
 8009d94:	200012e8 	.word	0x200012e8

08009d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08a      	sub	sp, #40	; 0x28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009da0:	2300      	movs	r3, #0
 8009da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009da4:	f7fe fd90 	bl	80088c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009da8:	4b5b      	ldr	r3, [pc, #364]	; (8009f18 <pvPortMalloc+0x180>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009db0:	f000 f920 	bl	8009ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009db4:	4b59      	ldr	r3, [pc, #356]	; (8009f1c <pvPortMalloc+0x184>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f040 8093 	bne.w	8009ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d01d      	beq.n	8009e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009dc8:	2208      	movs	r2, #8
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4413      	add	r3, r2
 8009dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f003 0307 	and.w	r3, r3, #7
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d014      	beq.n	8009e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f023 0307 	bic.w	r3, r3, #7
 8009de0:	3308      	adds	r3, #8
 8009de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <pvPortMalloc+0x6c>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	617b      	str	r3, [r7, #20]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d06e      	beq.n	8009ee8 <pvPortMalloc+0x150>
 8009e0a:	4b45      	ldr	r3, [pc, #276]	; (8009f20 <pvPortMalloc+0x188>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d869      	bhi.n	8009ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e14:	4b43      	ldr	r3, [pc, #268]	; (8009f24 <pvPortMalloc+0x18c>)
 8009e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e18:	4b42      	ldr	r3, [pc, #264]	; (8009f24 <pvPortMalloc+0x18c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e1e:	e004      	b.n	8009e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d903      	bls.n	8009e3c <pvPortMalloc+0xa4>
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1f1      	bne.n	8009e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e3c:	4b36      	ldr	r3, [pc, #216]	; (8009f18 <pvPortMalloc+0x180>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d050      	beq.n	8009ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2208      	movs	r2, #8
 8009e4c:	4413      	add	r3, r2
 8009e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	2308      	movs	r3, #8
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d91f      	bls.n	8009ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <pvPortMalloc+0xf8>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	613b      	str	r3, [r7, #16]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	1ad2      	subs	r2, r2, r3
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ea2:	69b8      	ldr	r0, [r7, #24]
 8009ea4:	f000 f908 	bl	800a0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <pvPortMalloc+0x188>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	4a1b      	ldr	r2, [pc, #108]	; (8009f20 <pvPortMalloc+0x188>)
 8009eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <pvPortMalloc+0x188>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <pvPortMalloc+0x190>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d203      	bcs.n	8009eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ec2:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <pvPortMalloc+0x188>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <pvPortMalloc+0x190>)
 8009ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <pvPortMalloc+0x184>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	431a      	orrs	r2, r3
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ede:	4b13      	ldr	r3, [pc, #76]	; (8009f2c <pvPortMalloc+0x194>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	4a11      	ldr	r2, [pc, #68]	; (8009f2c <pvPortMalloc+0x194>)
 8009ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ee8:	f7fe fcfc 	bl	80088e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f003 0307 	and.w	r3, r3, #7
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <pvPortMalloc+0x174>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	60fb      	str	r3, [r7, #12]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <pvPortMalloc+0x172>
	return pvReturn;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3728      	adds	r7, #40	; 0x28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20001eac 	.word	0x20001eac
 8009f1c:	20001ec0 	.word	0x20001ec0
 8009f20:	20001eb0 	.word	0x20001eb0
 8009f24:	20001ea4 	.word	0x20001ea4
 8009f28:	20001eb4 	.word	0x20001eb4
 8009f2c:	20001eb8 	.word	0x20001eb8

08009f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d04d      	beq.n	8009fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f42:	2308      	movs	r3, #8
 8009f44:	425b      	negs	r3, r3
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4413      	add	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	4b24      	ldr	r3, [pc, #144]	; (8009fe8 <vPortFree+0xb8>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10a      	bne.n	8009f74 <vPortFree+0x44>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	60fb      	str	r3, [r7, #12]
}
 8009f70:	bf00      	nop
 8009f72:	e7fe      	b.n	8009f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <vPortFree+0x62>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60bb      	str	r3, [r7, #8]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	4b14      	ldr	r3, [pc, #80]	; (8009fe8 <vPortFree+0xb8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01e      	beq.n	8009fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d11a      	bne.n	8009fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	4b0e      	ldr	r3, [pc, #56]	; (8009fe8 <vPortFree+0xb8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	43db      	mvns	r3, r3
 8009fb2:	401a      	ands	r2, r3
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fb8:	f7fe fc86 	bl	80088c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <vPortFree+0xbc>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	4a09      	ldr	r2, [pc, #36]	; (8009fec <vPortFree+0xbc>)
 8009fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fca:	6938      	ldr	r0, [r7, #16]
 8009fcc:	f000 f874 	bl	800a0b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <vPortFree+0xc0>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	4a06      	ldr	r2, [pc, #24]	; (8009ff0 <vPortFree+0xc0>)
 8009fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009fda:	f7fe fc83 	bl	80088e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fde:	bf00      	nop
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20001ec0 	.word	0x20001ec0
 8009fec:	20001eb0 	.word	0x20001eb0
 8009ff0:	20001ebc 	.word	0x20001ebc

08009ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ffa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a000:	4b27      	ldr	r3, [pc, #156]	; (800a0a0 <prvHeapInit+0xac>)
 800a002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00c      	beq.n	800a028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3307      	adds	r3, #7
 800a012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	4a1f      	ldr	r2, [pc, #124]	; (800a0a0 <prvHeapInit+0xac>)
 800a024:	4413      	add	r3, r2
 800a026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a02c:	4a1d      	ldr	r2, [pc, #116]	; (800a0a4 <prvHeapInit+0xb0>)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a032:	4b1c      	ldr	r3, [pc, #112]	; (800a0a4 <prvHeapInit+0xb0>)
 800a034:	2200      	movs	r2, #0
 800a036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a040:	2208      	movs	r2, #8
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0307 	bic.w	r3, r3, #7
 800a04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4a15      	ldr	r2, [pc, #84]	; (800a0a8 <prvHeapInit+0xb4>)
 800a054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a056:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <prvHeapInit+0xb4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a05e:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <prvHeapInit+0xb4>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a074:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <prvHeapInit+0xb4>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <prvHeapInit+0xb8>)
 800a082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4a09      	ldr	r2, [pc, #36]	; (800a0b0 <prvHeapInit+0xbc>)
 800a08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <prvHeapInit+0xc0>)
 800a08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	200012ec 	.word	0x200012ec
 800a0a4:	20001ea4 	.word	0x20001ea4
 800a0a8:	20001eac 	.word	0x20001eac
 800a0ac:	20001eb4 	.word	0x20001eb4
 800a0b0:	20001eb0 	.word	0x20001eb0
 800a0b4:	20001ec0 	.word	0x20001ec0

0800a0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0c0:	4b28      	ldr	r3, [pc, #160]	; (800a164 <prvInsertBlockIntoFreeList+0xac>)
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e002      	b.n	800a0cc <prvInsertBlockIntoFreeList+0x14>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d8f7      	bhi.n	800a0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d108      	bne.n	800a0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	441a      	add	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d118      	bne.n	800a140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d00d      	beq.n	800a136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	441a      	add	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e008      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e003      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d002      	beq.n	800a156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20001ea4 	.word	0x20001ea4
 800a168:	20001eac 	.word	0x20001eac

0800a16c <__errno>:
 800a16c:	4b01      	ldr	r3, [pc, #4]	; (800a174 <__errno+0x8>)
 800a16e:	6818      	ldr	r0, [r3, #0]
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000010 	.word	0x20000010

0800a178 <std>:
 800a178:	2300      	movs	r3, #0
 800a17a:	b510      	push	{r4, lr}
 800a17c:	4604      	mov	r4, r0
 800a17e:	e9c0 3300 	strd	r3, r3, [r0]
 800a182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a186:	6083      	str	r3, [r0, #8]
 800a188:	8181      	strh	r1, [r0, #12]
 800a18a:	6643      	str	r3, [r0, #100]	; 0x64
 800a18c:	81c2      	strh	r2, [r0, #14]
 800a18e:	6183      	str	r3, [r0, #24]
 800a190:	4619      	mov	r1, r3
 800a192:	2208      	movs	r2, #8
 800a194:	305c      	adds	r0, #92	; 0x5c
 800a196:	f000 f91a 	bl	800a3ce <memset>
 800a19a:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <std+0x38>)
 800a19c:	6263      	str	r3, [r4, #36]	; 0x24
 800a19e:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <std+0x3c>)
 800a1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1a2:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <std+0x40>)
 800a1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1a6:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <std+0x44>)
 800a1a8:	6224      	str	r4, [r4, #32]
 800a1aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a1ac:	bd10      	pop	{r4, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0800af11 	.word	0x0800af11
 800a1b4:	0800af33 	.word	0x0800af33
 800a1b8:	0800af6b 	.word	0x0800af6b
 800a1bc:	0800af8f 	.word	0x0800af8f

0800a1c0 <_cleanup_r>:
 800a1c0:	4901      	ldr	r1, [pc, #4]	; (800a1c8 <_cleanup_r+0x8>)
 800a1c2:	f000 b8af 	b.w	800a324 <_fwalk_reent>
 800a1c6:	bf00      	nop
 800a1c8:	0800bde1 	.word	0x0800bde1

0800a1cc <__sfmoreglue>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	2268      	movs	r2, #104	; 0x68
 800a1d0:	1e4d      	subs	r5, r1, #1
 800a1d2:	4355      	muls	r5, r2
 800a1d4:	460e      	mov	r6, r1
 800a1d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1da:	f000 f921 	bl	800a420 <_malloc_r>
 800a1de:	4604      	mov	r4, r0
 800a1e0:	b140      	cbz	r0, 800a1f4 <__sfmoreglue+0x28>
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a1e8:	300c      	adds	r0, #12
 800a1ea:	60a0      	str	r0, [r4, #8]
 800a1ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1f0:	f000 f8ed 	bl	800a3ce <memset>
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}

0800a1f8 <__sfp_lock_acquire>:
 800a1f8:	4801      	ldr	r0, [pc, #4]	; (800a200 <__sfp_lock_acquire+0x8>)
 800a1fa:	f000 b8d8 	b.w	800a3ae <__retarget_lock_acquire_recursive>
 800a1fe:	bf00      	nop
 800a200:	20001ec5 	.word	0x20001ec5

0800a204 <__sfp_lock_release>:
 800a204:	4801      	ldr	r0, [pc, #4]	; (800a20c <__sfp_lock_release+0x8>)
 800a206:	f000 b8d3 	b.w	800a3b0 <__retarget_lock_release_recursive>
 800a20a:	bf00      	nop
 800a20c:	20001ec5 	.word	0x20001ec5

0800a210 <__sinit_lock_acquire>:
 800a210:	4801      	ldr	r0, [pc, #4]	; (800a218 <__sinit_lock_acquire+0x8>)
 800a212:	f000 b8cc 	b.w	800a3ae <__retarget_lock_acquire_recursive>
 800a216:	bf00      	nop
 800a218:	20001ec6 	.word	0x20001ec6

0800a21c <__sinit_lock_release>:
 800a21c:	4801      	ldr	r0, [pc, #4]	; (800a224 <__sinit_lock_release+0x8>)
 800a21e:	f000 b8c7 	b.w	800a3b0 <__retarget_lock_release_recursive>
 800a222:	bf00      	nop
 800a224:	20001ec6 	.word	0x20001ec6

0800a228 <__sinit>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	4604      	mov	r4, r0
 800a22c:	f7ff fff0 	bl	800a210 <__sinit_lock_acquire>
 800a230:	69a3      	ldr	r3, [r4, #24]
 800a232:	b11b      	cbz	r3, 800a23c <__sinit+0x14>
 800a234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a238:	f7ff bff0 	b.w	800a21c <__sinit_lock_release>
 800a23c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a240:	6523      	str	r3, [r4, #80]	; 0x50
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <__sinit+0x68>)
 800a244:	4a13      	ldr	r2, [pc, #76]	; (800a294 <__sinit+0x6c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	62a2      	str	r2, [r4, #40]	; 0x28
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	bf04      	itt	eq
 800a24e:	2301      	moveq	r3, #1
 800a250:	61a3      	streq	r3, [r4, #24]
 800a252:	4620      	mov	r0, r4
 800a254:	f000 f820 	bl	800a298 <__sfp>
 800a258:	6060      	str	r0, [r4, #4]
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 f81c 	bl	800a298 <__sfp>
 800a260:	60a0      	str	r0, [r4, #8]
 800a262:	4620      	mov	r0, r4
 800a264:	f000 f818 	bl	800a298 <__sfp>
 800a268:	2200      	movs	r2, #0
 800a26a:	60e0      	str	r0, [r4, #12]
 800a26c:	2104      	movs	r1, #4
 800a26e:	6860      	ldr	r0, [r4, #4]
 800a270:	f7ff ff82 	bl	800a178 <std>
 800a274:	68a0      	ldr	r0, [r4, #8]
 800a276:	2201      	movs	r2, #1
 800a278:	2109      	movs	r1, #9
 800a27a:	f7ff ff7d 	bl	800a178 <std>
 800a27e:	68e0      	ldr	r0, [r4, #12]
 800a280:	2202      	movs	r2, #2
 800a282:	2112      	movs	r1, #18
 800a284:	f7ff ff78 	bl	800a178 <std>
 800a288:	2301      	movs	r3, #1
 800a28a:	61a3      	str	r3, [r4, #24]
 800a28c:	e7d2      	b.n	800a234 <__sinit+0xc>
 800a28e:	bf00      	nop
 800a290:	0800e5e4 	.word	0x0800e5e4
 800a294:	0800a1c1 	.word	0x0800a1c1

0800a298 <__sfp>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	4607      	mov	r7, r0
 800a29c:	f7ff ffac 	bl	800a1f8 <__sfp_lock_acquire>
 800a2a0:	4b1e      	ldr	r3, [pc, #120]	; (800a31c <__sfp+0x84>)
 800a2a2:	681e      	ldr	r6, [r3, #0]
 800a2a4:	69b3      	ldr	r3, [r6, #24]
 800a2a6:	b913      	cbnz	r3, 800a2ae <__sfp+0x16>
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff ffbd 	bl	800a228 <__sinit>
 800a2ae:	3648      	adds	r6, #72	; 0x48
 800a2b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	d503      	bpl.n	800a2c0 <__sfp+0x28>
 800a2b8:	6833      	ldr	r3, [r6, #0]
 800a2ba:	b30b      	cbz	r3, 800a300 <__sfp+0x68>
 800a2bc:	6836      	ldr	r6, [r6, #0]
 800a2be:	e7f7      	b.n	800a2b0 <__sfp+0x18>
 800a2c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2c4:	b9d5      	cbnz	r5, 800a2fc <__sfp+0x64>
 800a2c6:	4b16      	ldr	r3, [pc, #88]	; (800a320 <__sfp+0x88>)
 800a2c8:	60e3      	str	r3, [r4, #12]
 800a2ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a2d0:	f000 f86c 	bl	800a3ac <__retarget_lock_init_recursive>
 800a2d4:	f7ff ff96 	bl	800a204 <__sfp_lock_release>
 800a2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2e0:	6025      	str	r5, [r4, #0]
 800a2e2:	61a5      	str	r5, [r4, #24]
 800a2e4:	2208      	movs	r2, #8
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2ec:	f000 f86f 	bl	800a3ce <memset>
 800a2f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2fc:	3468      	adds	r4, #104	; 0x68
 800a2fe:	e7d9      	b.n	800a2b4 <__sfp+0x1c>
 800a300:	2104      	movs	r1, #4
 800a302:	4638      	mov	r0, r7
 800a304:	f7ff ff62 	bl	800a1cc <__sfmoreglue>
 800a308:	4604      	mov	r4, r0
 800a30a:	6030      	str	r0, [r6, #0]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1d5      	bne.n	800a2bc <__sfp+0x24>
 800a310:	f7ff ff78 	bl	800a204 <__sfp_lock_release>
 800a314:	230c      	movs	r3, #12
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	e7ee      	b.n	800a2f8 <__sfp+0x60>
 800a31a:	bf00      	nop
 800a31c:	0800e5e4 	.word	0x0800e5e4
 800a320:	ffff0001 	.word	0xffff0001

0800a324 <_fwalk_reent>:
 800a324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a328:	4606      	mov	r6, r0
 800a32a:	4688      	mov	r8, r1
 800a32c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a330:	2700      	movs	r7, #0
 800a332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a336:	f1b9 0901 	subs.w	r9, r9, #1
 800a33a:	d505      	bpl.n	800a348 <_fwalk_reent+0x24>
 800a33c:	6824      	ldr	r4, [r4, #0]
 800a33e:	2c00      	cmp	r4, #0
 800a340:	d1f7      	bne.n	800a332 <_fwalk_reent+0xe>
 800a342:	4638      	mov	r0, r7
 800a344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a348:	89ab      	ldrh	r3, [r5, #12]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d907      	bls.n	800a35e <_fwalk_reent+0x3a>
 800a34e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a352:	3301      	adds	r3, #1
 800a354:	d003      	beq.n	800a35e <_fwalk_reent+0x3a>
 800a356:	4629      	mov	r1, r5
 800a358:	4630      	mov	r0, r6
 800a35a:	47c0      	blx	r8
 800a35c:	4307      	orrs	r7, r0
 800a35e:	3568      	adds	r5, #104	; 0x68
 800a360:	e7e9      	b.n	800a336 <_fwalk_reent+0x12>
	...

0800a364 <__libc_init_array>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	4d0d      	ldr	r5, [pc, #52]	; (800a39c <__libc_init_array+0x38>)
 800a368:	4c0d      	ldr	r4, [pc, #52]	; (800a3a0 <__libc_init_array+0x3c>)
 800a36a:	1b64      	subs	r4, r4, r5
 800a36c:	10a4      	asrs	r4, r4, #2
 800a36e:	2600      	movs	r6, #0
 800a370:	42a6      	cmp	r6, r4
 800a372:	d109      	bne.n	800a388 <__libc_init_array+0x24>
 800a374:	4d0b      	ldr	r5, [pc, #44]	; (800a3a4 <__libc_init_array+0x40>)
 800a376:	4c0c      	ldr	r4, [pc, #48]	; (800a3a8 <__libc_init_array+0x44>)
 800a378:	f003 ffb6 	bl	800e2e8 <_init>
 800a37c:	1b64      	subs	r4, r4, r5
 800a37e:	10a4      	asrs	r4, r4, #2
 800a380:	2600      	movs	r6, #0
 800a382:	42a6      	cmp	r6, r4
 800a384:	d105      	bne.n	800a392 <__libc_init_array+0x2e>
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	f855 3b04 	ldr.w	r3, [r5], #4
 800a38c:	4798      	blx	r3
 800a38e:	3601      	adds	r6, #1
 800a390:	e7ee      	b.n	800a370 <__libc_init_array+0xc>
 800a392:	f855 3b04 	ldr.w	r3, [r5], #4
 800a396:	4798      	blx	r3
 800a398:	3601      	adds	r6, #1
 800a39a:	e7f2      	b.n	800a382 <__libc_init_array+0x1e>
 800a39c:	0800ed6c 	.word	0x0800ed6c
 800a3a0:	0800ed6c 	.word	0x0800ed6c
 800a3a4:	0800ed6c 	.word	0x0800ed6c
 800a3a8:	0800ed70 	.word	0x0800ed70

0800a3ac <__retarget_lock_init_recursive>:
 800a3ac:	4770      	bx	lr

0800a3ae <__retarget_lock_acquire_recursive>:
 800a3ae:	4770      	bx	lr

0800a3b0 <__retarget_lock_release_recursive>:
 800a3b0:	4770      	bx	lr

0800a3b2 <memcpy>:
 800a3b2:	440a      	add	r2, r1
 800a3b4:	4291      	cmp	r1, r2
 800a3b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3ba:	d100      	bne.n	800a3be <memcpy+0xc>
 800a3bc:	4770      	bx	lr
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3c8:	4291      	cmp	r1, r2
 800a3ca:	d1f9      	bne.n	800a3c0 <memcpy+0xe>
 800a3cc:	bd10      	pop	{r4, pc}

0800a3ce <memset>:
 800a3ce:	4402      	add	r2, r0
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d100      	bne.n	800a3d8 <memset+0xa>
 800a3d6:	4770      	bx	lr
 800a3d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3dc:	e7f9      	b.n	800a3d2 <memset+0x4>
	...

0800a3e0 <sbrk_aligned>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	4e0e      	ldr	r6, [pc, #56]	; (800a41c <sbrk_aligned+0x3c>)
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	6831      	ldr	r1, [r6, #0]
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	b911      	cbnz	r1, 800a3f2 <sbrk_aligned+0x12>
 800a3ec:	f000 fd60 	bl	800aeb0 <_sbrk_r>
 800a3f0:	6030      	str	r0, [r6, #0]
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	f000 fd5b 	bl	800aeb0 <_sbrk_r>
 800a3fa:	1c43      	adds	r3, r0, #1
 800a3fc:	d00a      	beq.n	800a414 <sbrk_aligned+0x34>
 800a3fe:	1cc4      	adds	r4, r0, #3
 800a400:	f024 0403 	bic.w	r4, r4, #3
 800a404:	42a0      	cmp	r0, r4
 800a406:	d007      	beq.n	800a418 <sbrk_aligned+0x38>
 800a408:	1a21      	subs	r1, r4, r0
 800a40a:	4628      	mov	r0, r5
 800a40c:	f000 fd50 	bl	800aeb0 <_sbrk_r>
 800a410:	3001      	adds	r0, #1
 800a412:	d101      	bne.n	800a418 <sbrk_aligned+0x38>
 800a414:	f04f 34ff 	mov.w	r4, #4294967295
 800a418:	4620      	mov	r0, r4
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	20001ecc 	.word	0x20001ecc

0800a420 <_malloc_r>:
 800a420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a424:	1ccd      	adds	r5, r1, #3
 800a426:	f025 0503 	bic.w	r5, r5, #3
 800a42a:	3508      	adds	r5, #8
 800a42c:	2d0c      	cmp	r5, #12
 800a42e:	bf38      	it	cc
 800a430:	250c      	movcc	r5, #12
 800a432:	2d00      	cmp	r5, #0
 800a434:	4607      	mov	r7, r0
 800a436:	db01      	blt.n	800a43c <_malloc_r+0x1c>
 800a438:	42a9      	cmp	r1, r5
 800a43a:	d905      	bls.n	800a448 <_malloc_r+0x28>
 800a43c:	230c      	movs	r3, #12
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	2600      	movs	r6, #0
 800a442:	4630      	mov	r0, r6
 800a444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a448:	4e2e      	ldr	r6, [pc, #184]	; (800a504 <_malloc_r+0xe4>)
 800a44a:	f001 fd23 	bl	800be94 <__malloc_lock>
 800a44e:	6833      	ldr	r3, [r6, #0]
 800a450:	461c      	mov	r4, r3
 800a452:	bb34      	cbnz	r4, 800a4a2 <_malloc_r+0x82>
 800a454:	4629      	mov	r1, r5
 800a456:	4638      	mov	r0, r7
 800a458:	f7ff ffc2 	bl	800a3e0 <sbrk_aligned>
 800a45c:	1c43      	adds	r3, r0, #1
 800a45e:	4604      	mov	r4, r0
 800a460:	d14d      	bne.n	800a4fe <_malloc_r+0xde>
 800a462:	6834      	ldr	r4, [r6, #0]
 800a464:	4626      	mov	r6, r4
 800a466:	2e00      	cmp	r6, #0
 800a468:	d140      	bne.n	800a4ec <_malloc_r+0xcc>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	4631      	mov	r1, r6
 800a46e:	4638      	mov	r0, r7
 800a470:	eb04 0803 	add.w	r8, r4, r3
 800a474:	f000 fd1c 	bl	800aeb0 <_sbrk_r>
 800a478:	4580      	cmp	r8, r0
 800a47a:	d13a      	bne.n	800a4f2 <_malloc_r+0xd2>
 800a47c:	6821      	ldr	r1, [r4, #0]
 800a47e:	3503      	adds	r5, #3
 800a480:	1a6d      	subs	r5, r5, r1
 800a482:	f025 0503 	bic.w	r5, r5, #3
 800a486:	3508      	adds	r5, #8
 800a488:	2d0c      	cmp	r5, #12
 800a48a:	bf38      	it	cc
 800a48c:	250c      	movcc	r5, #12
 800a48e:	4629      	mov	r1, r5
 800a490:	4638      	mov	r0, r7
 800a492:	f7ff ffa5 	bl	800a3e0 <sbrk_aligned>
 800a496:	3001      	adds	r0, #1
 800a498:	d02b      	beq.n	800a4f2 <_malloc_r+0xd2>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	442b      	add	r3, r5
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	e00e      	b.n	800a4c0 <_malloc_r+0xa0>
 800a4a2:	6822      	ldr	r2, [r4, #0]
 800a4a4:	1b52      	subs	r2, r2, r5
 800a4a6:	d41e      	bmi.n	800a4e6 <_malloc_r+0xc6>
 800a4a8:	2a0b      	cmp	r2, #11
 800a4aa:	d916      	bls.n	800a4da <_malloc_r+0xba>
 800a4ac:	1961      	adds	r1, r4, r5
 800a4ae:	42a3      	cmp	r3, r4
 800a4b0:	6025      	str	r5, [r4, #0]
 800a4b2:	bf18      	it	ne
 800a4b4:	6059      	strne	r1, [r3, #4]
 800a4b6:	6863      	ldr	r3, [r4, #4]
 800a4b8:	bf08      	it	eq
 800a4ba:	6031      	streq	r1, [r6, #0]
 800a4bc:	5162      	str	r2, [r4, r5]
 800a4be:	604b      	str	r3, [r1, #4]
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f104 060b 	add.w	r6, r4, #11
 800a4c6:	f001 fceb 	bl	800bea0 <__malloc_unlock>
 800a4ca:	f026 0607 	bic.w	r6, r6, #7
 800a4ce:	1d23      	adds	r3, r4, #4
 800a4d0:	1af2      	subs	r2, r6, r3
 800a4d2:	d0b6      	beq.n	800a442 <_malloc_r+0x22>
 800a4d4:	1b9b      	subs	r3, r3, r6
 800a4d6:	50a3      	str	r3, [r4, r2]
 800a4d8:	e7b3      	b.n	800a442 <_malloc_r+0x22>
 800a4da:	6862      	ldr	r2, [r4, #4]
 800a4dc:	42a3      	cmp	r3, r4
 800a4de:	bf0c      	ite	eq
 800a4e0:	6032      	streq	r2, [r6, #0]
 800a4e2:	605a      	strne	r2, [r3, #4]
 800a4e4:	e7ec      	b.n	800a4c0 <_malloc_r+0xa0>
 800a4e6:	4623      	mov	r3, r4
 800a4e8:	6864      	ldr	r4, [r4, #4]
 800a4ea:	e7b2      	b.n	800a452 <_malloc_r+0x32>
 800a4ec:	4634      	mov	r4, r6
 800a4ee:	6876      	ldr	r6, [r6, #4]
 800a4f0:	e7b9      	b.n	800a466 <_malloc_r+0x46>
 800a4f2:	230c      	movs	r3, #12
 800a4f4:	603b      	str	r3, [r7, #0]
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f001 fcd2 	bl	800bea0 <__malloc_unlock>
 800a4fc:	e7a1      	b.n	800a442 <_malloc_r+0x22>
 800a4fe:	6025      	str	r5, [r4, #0]
 800a500:	e7de      	b.n	800a4c0 <_malloc_r+0xa0>
 800a502:	bf00      	nop
 800a504:	20001ec8 	.word	0x20001ec8

0800a508 <__cvt>:
 800a508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	ec55 4b10 	vmov	r4, r5, d0
 800a510:	2d00      	cmp	r5, #0
 800a512:	460e      	mov	r6, r1
 800a514:	4619      	mov	r1, r3
 800a516:	462b      	mov	r3, r5
 800a518:	bfbb      	ittet	lt
 800a51a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a51e:	461d      	movlt	r5, r3
 800a520:	2300      	movge	r3, #0
 800a522:	232d      	movlt	r3, #45	; 0x2d
 800a524:	700b      	strb	r3, [r1, #0]
 800a526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a528:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a52c:	4691      	mov	r9, r2
 800a52e:	f023 0820 	bic.w	r8, r3, #32
 800a532:	bfbc      	itt	lt
 800a534:	4622      	movlt	r2, r4
 800a536:	4614      	movlt	r4, r2
 800a538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a53c:	d005      	beq.n	800a54a <__cvt+0x42>
 800a53e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a542:	d100      	bne.n	800a546 <__cvt+0x3e>
 800a544:	3601      	adds	r6, #1
 800a546:	2102      	movs	r1, #2
 800a548:	e000      	b.n	800a54c <__cvt+0x44>
 800a54a:	2103      	movs	r1, #3
 800a54c:	ab03      	add	r3, sp, #12
 800a54e:	9301      	str	r3, [sp, #4]
 800a550:	ab02      	add	r3, sp, #8
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	ec45 4b10 	vmov	d0, r4, r5
 800a558:	4653      	mov	r3, sl
 800a55a:	4632      	mov	r2, r6
 800a55c:	f000 fdcc 	bl	800b0f8 <_dtoa_r>
 800a560:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a564:	4607      	mov	r7, r0
 800a566:	d102      	bne.n	800a56e <__cvt+0x66>
 800a568:	f019 0f01 	tst.w	r9, #1
 800a56c:	d022      	beq.n	800a5b4 <__cvt+0xac>
 800a56e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a572:	eb07 0906 	add.w	r9, r7, r6
 800a576:	d110      	bne.n	800a59a <__cvt+0x92>
 800a578:	783b      	ldrb	r3, [r7, #0]
 800a57a:	2b30      	cmp	r3, #48	; 0x30
 800a57c:	d10a      	bne.n	800a594 <__cvt+0x8c>
 800a57e:	2200      	movs	r2, #0
 800a580:	2300      	movs	r3, #0
 800a582:	4620      	mov	r0, r4
 800a584:	4629      	mov	r1, r5
 800a586:	f7f6 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a58a:	b918      	cbnz	r0, 800a594 <__cvt+0x8c>
 800a58c:	f1c6 0601 	rsb	r6, r6, #1
 800a590:	f8ca 6000 	str.w	r6, [sl]
 800a594:	f8da 3000 	ldr.w	r3, [sl]
 800a598:	4499      	add	r9, r3
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	4620      	mov	r0, r4
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f7f6 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5a6:	b108      	cbz	r0, 800a5ac <__cvt+0xa4>
 800a5a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5ac:	2230      	movs	r2, #48	; 0x30
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	454b      	cmp	r3, r9
 800a5b2:	d307      	bcc.n	800a5c4 <__cvt+0xbc>
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b8:	1bdb      	subs	r3, r3, r7
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	b004      	add	sp, #16
 800a5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c4:	1c59      	adds	r1, r3, #1
 800a5c6:	9103      	str	r1, [sp, #12]
 800a5c8:	701a      	strb	r2, [r3, #0]
 800a5ca:	e7f0      	b.n	800a5ae <__cvt+0xa6>

0800a5cc <__exponent>:
 800a5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2900      	cmp	r1, #0
 800a5d2:	bfb8      	it	lt
 800a5d4:	4249      	neglt	r1, r1
 800a5d6:	f803 2b02 	strb.w	r2, [r3], #2
 800a5da:	bfb4      	ite	lt
 800a5dc:	222d      	movlt	r2, #45	; 0x2d
 800a5de:	222b      	movge	r2, #43	; 0x2b
 800a5e0:	2909      	cmp	r1, #9
 800a5e2:	7042      	strb	r2, [r0, #1]
 800a5e4:	dd2a      	ble.n	800a63c <__exponent+0x70>
 800a5e6:	f10d 0407 	add.w	r4, sp, #7
 800a5ea:	46a4      	mov	ip, r4
 800a5ec:	270a      	movs	r7, #10
 800a5ee:	46a6      	mov	lr, r4
 800a5f0:	460a      	mov	r2, r1
 800a5f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5f6:	fb07 1516 	mls	r5, r7, r6, r1
 800a5fa:	3530      	adds	r5, #48	; 0x30
 800a5fc:	2a63      	cmp	r2, #99	; 0x63
 800a5fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800a602:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a606:	4631      	mov	r1, r6
 800a608:	dcf1      	bgt.n	800a5ee <__exponent+0x22>
 800a60a:	3130      	adds	r1, #48	; 0x30
 800a60c:	f1ae 0502 	sub.w	r5, lr, #2
 800a610:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a614:	1c44      	adds	r4, r0, #1
 800a616:	4629      	mov	r1, r5
 800a618:	4561      	cmp	r1, ip
 800a61a:	d30a      	bcc.n	800a632 <__exponent+0x66>
 800a61c:	f10d 0209 	add.w	r2, sp, #9
 800a620:	eba2 020e 	sub.w	r2, r2, lr
 800a624:	4565      	cmp	r5, ip
 800a626:	bf88      	it	hi
 800a628:	2200      	movhi	r2, #0
 800a62a:	4413      	add	r3, r2
 800a62c:	1a18      	subs	r0, r3, r0
 800a62e:	b003      	add	sp, #12
 800a630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a636:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a63a:	e7ed      	b.n	800a618 <__exponent+0x4c>
 800a63c:	2330      	movs	r3, #48	; 0x30
 800a63e:	3130      	adds	r1, #48	; 0x30
 800a640:	7083      	strb	r3, [r0, #2]
 800a642:	70c1      	strb	r1, [r0, #3]
 800a644:	1d03      	adds	r3, r0, #4
 800a646:	e7f1      	b.n	800a62c <__exponent+0x60>

0800a648 <_printf_float>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	ed2d 8b02 	vpush	{d8}
 800a650:	b08d      	sub	sp, #52	; 0x34
 800a652:	460c      	mov	r4, r1
 800a654:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a658:	4616      	mov	r6, r2
 800a65a:	461f      	mov	r7, r3
 800a65c:	4605      	mov	r5, r0
 800a65e:	f001 fbfb 	bl	800be58 <_localeconv_r>
 800a662:	f8d0 a000 	ldr.w	sl, [r0]
 800a666:	4650      	mov	r0, sl
 800a668:	f7f5 fdb2 	bl	80001d0 <strlen>
 800a66c:	2300      	movs	r3, #0
 800a66e:	930a      	str	r3, [sp, #40]	; 0x28
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	f8d8 3000 	ldr.w	r3, [r8]
 800a678:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a67c:	3307      	adds	r3, #7
 800a67e:	f023 0307 	bic.w	r3, r3, #7
 800a682:	f103 0208 	add.w	r2, r3, #8
 800a686:	f8c8 2000 	str.w	r2, [r8]
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a692:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6a0:	ee08 0a10 	vmov	s16, r0
 800a6a4:	4b9f      	ldr	r3, [pc, #636]	; (800a924 <_printf_float+0x2dc>)
 800a6a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	f7f6 fa3d 	bl	8000b2c <__aeabi_dcmpun>
 800a6b2:	bb88      	cbnz	r0, 800a718 <_printf_float+0xd0>
 800a6b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6b8:	4b9a      	ldr	r3, [pc, #616]	; (800a924 <_printf_float+0x2dc>)
 800a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a6be:	f7f6 fa17 	bl	8000af0 <__aeabi_dcmple>
 800a6c2:	bb48      	cbnz	r0, 800a718 <_printf_float+0xd0>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f6 fa06 	bl	8000adc <__aeabi_dcmplt>
 800a6d0:	b110      	cbz	r0, 800a6d8 <_printf_float+0x90>
 800a6d2:	232d      	movs	r3, #45	; 0x2d
 800a6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d8:	4b93      	ldr	r3, [pc, #588]	; (800a928 <_printf_float+0x2e0>)
 800a6da:	4894      	ldr	r0, [pc, #592]	; (800a92c <_printf_float+0x2e4>)
 800a6dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6e0:	bf94      	ite	ls
 800a6e2:	4698      	movls	r8, r3
 800a6e4:	4680      	movhi	r8, r0
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	6123      	str	r3, [r4, #16]
 800a6ea:	9b05      	ldr	r3, [sp, #20]
 800a6ec:	f023 0204 	bic.w	r2, r3, #4
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	f04f 0900 	mov.w	r9, #0
 800a6f6:	9700      	str	r7, [sp, #0]
 800a6f8:	4633      	mov	r3, r6
 800a6fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4628      	mov	r0, r5
 800a700:	f000 f9d8 	bl	800aab4 <_printf_common>
 800a704:	3001      	adds	r0, #1
 800a706:	f040 8090 	bne.w	800a82a <_printf_float+0x1e2>
 800a70a:	f04f 30ff 	mov.w	r0, #4294967295
 800a70e:	b00d      	add	sp, #52	; 0x34
 800a710:	ecbd 8b02 	vpop	{d8}
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	4640      	mov	r0, r8
 800a71e:	4649      	mov	r1, r9
 800a720:	f7f6 fa04 	bl	8000b2c <__aeabi_dcmpun>
 800a724:	b140      	cbz	r0, 800a738 <_printf_float+0xf0>
 800a726:	464b      	mov	r3, r9
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bfbc      	itt	lt
 800a72c:	232d      	movlt	r3, #45	; 0x2d
 800a72e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a732:	487f      	ldr	r0, [pc, #508]	; (800a930 <_printf_float+0x2e8>)
 800a734:	4b7f      	ldr	r3, [pc, #508]	; (800a934 <_printf_float+0x2ec>)
 800a736:	e7d1      	b.n	800a6dc <_printf_float+0x94>
 800a738:	6863      	ldr	r3, [r4, #4]
 800a73a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a73e:	9206      	str	r2, [sp, #24]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	d13f      	bne.n	800a7c4 <_printf_float+0x17c>
 800a744:	2306      	movs	r3, #6
 800a746:	6063      	str	r3, [r4, #4]
 800a748:	9b05      	ldr	r3, [sp, #20]
 800a74a:	6861      	ldr	r1, [r4, #4]
 800a74c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a750:	2300      	movs	r3, #0
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	ab0a      	add	r3, sp, #40	; 0x28
 800a756:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a75a:	ab09      	add	r3, sp, #36	; 0x24
 800a75c:	ec49 8b10 	vmov	d0, r8, r9
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	6022      	str	r2, [r4, #0]
 800a764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a768:	4628      	mov	r0, r5
 800a76a:	f7ff fecd 	bl	800a508 <__cvt>
 800a76e:	9b06      	ldr	r3, [sp, #24]
 800a770:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a772:	2b47      	cmp	r3, #71	; 0x47
 800a774:	4680      	mov	r8, r0
 800a776:	d108      	bne.n	800a78a <_printf_float+0x142>
 800a778:	1cc8      	adds	r0, r1, #3
 800a77a:	db02      	blt.n	800a782 <_printf_float+0x13a>
 800a77c:	6863      	ldr	r3, [r4, #4]
 800a77e:	4299      	cmp	r1, r3
 800a780:	dd41      	ble.n	800a806 <_printf_float+0x1be>
 800a782:	f1ab 0b02 	sub.w	fp, fp, #2
 800a786:	fa5f fb8b 	uxtb.w	fp, fp
 800a78a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a78e:	d820      	bhi.n	800a7d2 <_printf_float+0x18a>
 800a790:	3901      	subs	r1, #1
 800a792:	465a      	mov	r2, fp
 800a794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a798:	9109      	str	r1, [sp, #36]	; 0x24
 800a79a:	f7ff ff17 	bl	800a5cc <__exponent>
 800a79e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7a0:	1813      	adds	r3, r2, r0
 800a7a2:	2a01      	cmp	r2, #1
 800a7a4:	4681      	mov	r9, r0
 800a7a6:	6123      	str	r3, [r4, #16]
 800a7a8:	dc02      	bgt.n	800a7b0 <_printf_float+0x168>
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	07d2      	lsls	r2, r2, #31
 800a7ae:	d501      	bpl.n	800a7b4 <_printf_float+0x16c>
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	6123      	str	r3, [r4, #16]
 800a7b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d09c      	beq.n	800a6f6 <_printf_float+0xae>
 800a7bc:	232d      	movs	r3, #45	; 0x2d
 800a7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7c2:	e798      	b.n	800a6f6 <_printf_float+0xae>
 800a7c4:	9a06      	ldr	r2, [sp, #24]
 800a7c6:	2a47      	cmp	r2, #71	; 0x47
 800a7c8:	d1be      	bne.n	800a748 <_printf_float+0x100>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1bc      	bne.n	800a748 <_printf_float+0x100>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e7b9      	b.n	800a746 <_printf_float+0xfe>
 800a7d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7d6:	d118      	bne.n	800a80a <_printf_float+0x1c2>
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	dd0b      	ble.n	800a7f6 <_printf_float+0x1ae>
 800a7de:	6121      	str	r1, [r4, #16]
 800a7e0:	b913      	cbnz	r3, 800a7e8 <_printf_float+0x1a0>
 800a7e2:	6822      	ldr	r2, [r4, #0]
 800a7e4:	07d0      	lsls	r0, r2, #31
 800a7e6:	d502      	bpl.n	800a7ee <_printf_float+0x1a6>
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	440b      	add	r3, r1
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7f0:	f04f 0900 	mov.w	r9, #0
 800a7f4:	e7de      	b.n	800a7b4 <_printf_float+0x16c>
 800a7f6:	b913      	cbnz	r3, 800a7fe <_printf_float+0x1b6>
 800a7f8:	6822      	ldr	r2, [r4, #0]
 800a7fa:	07d2      	lsls	r2, r2, #31
 800a7fc:	d501      	bpl.n	800a802 <_printf_float+0x1ba>
 800a7fe:	3302      	adds	r3, #2
 800a800:	e7f4      	b.n	800a7ec <_printf_float+0x1a4>
 800a802:	2301      	movs	r3, #1
 800a804:	e7f2      	b.n	800a7ec <_printf_float+0x1a4>
 800a806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80c:	4299      	cmp	r1, r3
 800a80e:	db05      	blt.n	800a81c <_printf_float+0x1d4>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	6121      	str	r1, [r4, #16]
 800a814:	07d8      	lsls	r0, r3, #31
 800a816:	d5ea      	bpl.n	800a7ee <_printf_float+0x1a6>
 800a818:	1c4b      	adds	r3, r1, #1
 800a81a:	e7e7      	b.n	800a7ec <_printf_float+0x1a4>
 800a81c:	2900      	cmp	r1, #0
 800a81e:	bfd4      	ite	le
 800a820:	f1c1 0202 	rsble	r2, r1, #2
 800a824:	2201      	movgt	r2, #1
 800a826:	4413      	add	r3, r2
 800a828:	e7e0      	b.n	800a7ec <_printf_float+0x1a4>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	055a      	lsls	r2, r3, #21
 800a82e:	d407      	bmi.n	800a840 <_printf_float+0x1f8>
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	4642      	mov	r2, r8
 800a834:	4631      	mov	r1, r6
 800a836:	4628      	mov	r0, r5
 800a838:	47b8      	blx	r7
 800a83a:	3001      	adds	r0, #1
 800a83c:	d12c      	bne.n	800a898 <_printf_float+0x250>
 800a83e:	e764      	b.n	800a70a <_printf_float+0xc2>
 800a840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a844:	f240 80e0 	bls.w	800aa08 <_printf_float+0x3c0>
 800a848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a84c:	2200      	movs	r2, #0
 800a84e:	2300      	movs	r3, #0
 800a850:	f7f6 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a854:	2800      	cmp	r0, #0
 800a856:	d034      	beq.n	800a8c2 <_printf_float+0x27a>
 800a858:	4a37      	ldr	r2, [pc, #220]	; (800a938 <_printf_float+0x2f0>)
 800a85a:	2301      	movs	r3, #1
 800a85c:	4631      	mov	r1, r6
 800a85e:	4628      	mov	r0, r5
 800a860:	47b8      	blx	r7
 800a862:	3001      	adds	r0, #1
 800a864:	f43f af51 	beq.w	800a70a <_printf_float+0xc2>
 800a868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a86c:	429a      	cmp	r2, r3
 800a86e:	db02      	blt.n	800a876 <_printf_float+0x22e>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	07d8      	lsls	r0, r3, #31
 800a874:	d510      	bpl.n	800a898 <_printf_float+0x250>
 800a876:	ee18 3a10 	vmov	r3, s16
 800a87a:	4652      	mov	r2, sl
 800a87c:	4631      	mov	r1, r6
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	f43f af41 	beq.w	800a70a <_printf_float+0xc2>
 800a888:	f04f 0800 	mov.w	r8, #0
 800a88c:	f104 091a 	add.w	r9, r4, #26
 800a890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a892:	3b01      	subs	r3, #1
 800a894:	4543      	cmp	r3, r8
 800a896:	dc09      	bgt.n	800a8ac <_printf_float+0x264>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	079b      	lsls	r3, r3, #30
 800a89c:	f100 8105 	bmi.w	800aaaa <_printf_float+0x462>
 800a8a0:	68e0      	ldr	r0, [r4, #12]
 800a8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a4:	4298      	cmp	r0, r3
 800a8a6:	bfb8      	it	lt
 800a8a8:	4618      	movlt	r0, r3
 800a8aa:	e730      	b.n	800a70e <_printf_float+0xc6>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	464a      	mov	r2, r9
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	47b8      	blx	r7
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f43f af27 	beq.w	800a70a <_printf_float+0xc2>
 800a8bc:	f108 0801 	add.w	r8, r8, #1
 800a8c0:	e7e6      	b.n	800a890 <_printf_float+0x248>
 800a8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	dc39      	bgt.n	800a93c <_printf_float+0x2f4>
 800a8c8:	4a1b      	ldr	r2, [pc, #108]	; (800a938 <_printf_float+0x2f0>)
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f af19 	beq.w	800a70a <_printf_float+0xc2>
 800a8d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	d102      	bne.n	800a8e6 <_printf_float+0x29e>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	07d9      	lsls	r1, r3, #31
 800a8e4:	d5d8      	bpl.n	800a898 <_printf_float+0x250>
 800a8e6:	ee18 3a10 	vmov	r3, s16
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b8      	blx	r7
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	f43f af09 	beq.w	800a70a <_printf_float+0xc2>
 800a8f8:	f04f 0900 	mov.w	r9, #0
 800a8fc:	f104 0a1a 	add.w	sl, r4, #26
 800a900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a902:	425b      	negs	r3, r3
 800a904:	454b      	cmp	r3, r9
 800a906:	dc01      	bgt.n	800a90c <_printf_float+0x2c4>
 800a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90a:	e792      	b.n	800a832 <_printf_float+0x1ea>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4652      	mov	r2, sl
 800a910:	4631      	mov	r1, r6
 800a912:	4628      	mov	r0, r5
 800a914:	47b8      	blx	r7
 800a916:	3001      	adds	r0, #1
 800a918:	f43f aef7 	beq.w	800a70a <_printf_float+0xc2>
 800a91c:	f109 0901 	add.w	r9, r9, #1
 800a920:	e7ee      	b.n	800a900 <_printf_float+0x2b8>
 800a922:	bf00      	nop
 800a924:	7fefffff 	.word	0x7fefffff
 800a928:	0800e5e8 	.word	0x0800e5e8
 800a92c:	0800e5ec 	.word	0x0800e5ec
 800a930:	0800e5f4 	.word	0x0800e5f4
 800a934:	0800e5f0 	.word	0x0800e5f0
 800a938:	0800e5f8 	.word	0x0800e5f8
 800a93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a93e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a940:	429a      	cmp	r2, r3
 800a942:	bfa8      	it	ge
 800a944:	461a      	movge	r2, r3
 800a946:	2a00      	cmp	r2, #0
 800a948:	4691      	mov	r9, r2
 800a94a:	dc37      	bgt.n	800a9bc <_printf_float+0x374>
 800a94c:	f04f 0b00 	mov.w	fp, #0
 800a950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a954:	f104 021a 	add.w	r2, r4, #26
 800a958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a95a:	9305      	str	r3, [sp, #20]
 800a95c:	eba3 0309 	sub.w	r3, r3, r9
 800a960:	455b      	cmp	r3, fp
 800a962:	dc33      	bgt.n	800a9cc <_printf_float+0x384>
 800a964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a968:	429a      	cmp	r2, r3
 800a96a:	db3b      	blt.n	800a9e4 <_printf_float+0x39c>
 800a96c:	6823      	ldr	r3, [r4, #0]
 800a96e:	07da      	lsls	r2, r3, #31
 800a970:	d438      	bmi.n	800a9e4 <_printf_float+0x39c>
 800a972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a974:	9a05      	ldr	r2, [sp, #20]
 800a976:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a978:	1a9a      	subs	r2, r3, r2
 800a97a:	eba3 0901 	sub.w	r9, r3, r1
 800a97e:	4591      	cmp	r9, r2
 800a980:	bfa8      	it	ge
 800a982:	4691      	movge	r9, r2
 800a984:	f1b9 0f00 	cmp.w	r9, #0
 800a988:	dc35      	bgt.n	800a9f6 <_printf_float+0x3ae>
 800a98a:	f04f 0800 	mov.w	r8, #0
 800a98e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a992:	f104 0a1a 	add.w	sl, r4, #26
 800a996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a99a:	1a9b      	subs	r3, r3, r2
 800a99c:	eba3 0309 	sub.w	r3, r3, r9
 800a9a0:	4543      	cmp	r3, r8
 800a9a2:	f77f af79 	ble.w	800a898 <_printf_float+0x250>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	47b8      	blx	r7
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f43f aeaa 	beq.w	800a70a <_printf_float+0xc2>
 800a9b6:	f108 0801 	add.w	r8, r8, #1
 800a9ba:	e7ec      	b.n	800a996 <_printf_float+0x34e>
 800a9bc:	4613      	mov	r3, r2
 800a9be:	4631      	mov	r1, r6
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d1c0      	bne.n	800a94c <_printf_float+0x304>
 800a9ca:	e69e      	b.n	800a70a <_printf_float+0xc2>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	9205      	str	r2, [sp, #20]
 800a9d4:	47b8      	blx	r7
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f43f ae97 	beq.w	800a70a <_printf_float+0xc2>
 800a9dc:	9a05      	ldr	r2, [sp, #20]
 800a9de:	f10b 0b01 	add.w	fp, fp, #1
 800a9e2:	e7b9      	b.n	800a958 <_printf_float+0x310>
 800a9e4:	ee18 3a10 	vmov	r3, s16
 800a9e8:	4652      	mov	r2, sl
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	47b8      	blx	r7
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d1be      	bne.n	800a972 <_printf_float+0x32a>
 800a9f4:	e689      	b.n	800a70a <_printf_float+0xc2>
 800a9f6:	9a05      	ldr	r2, [sp, #20]
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	4442      	add	r2, r8
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	d1c1      	bne.n	800a98a <_printf_float+0x342>
 800aa06:	e680      	b.n	800a70a <_printf_float+0xc2>
 800aa08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa0a:	2a01      	cmp	r2, #1
 800aa0c:	dc01      	bgt.n	800aa12 <_printf_float+0x3ca>
 800aa0e:	07db      	lsls	r3, r3, #31
 800aa10:	d538      	bpl.n	800aa84 <_printf_float+0x43c>
 800aa12:	2301      	movs	r3, #1
 800aa14:	4642      	mov	r2, r8
 800aa16:	4631      	mov	r1, r6
 800aa18:	4628      	mov	r0, r5
 800aa1a:	47b8      	blx	r7
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	f43f ae74 	beq.w	800a70a <_printf_float+0xc2>
 800aa22:	ee18 3a10 	vmov	r3, s16
 800aa26:	4652      	mov	r2, sl
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	47b8      	blx	r7
 800aa2e:	3001      	adds	r0, #1
 800aa30:	f43f ae6b 	beq.w	800a70a <_printf_float+0xc2>
 800aa34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f7f6 f844 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa40:	b9d8      	cbnz	r0, 800aa7a <_printf_float+0x432>
 800aa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa44:	f108 0201 	add.w	r2, r8, #1
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	d10e      	bne.n	800aa72 <_printf_float+0x42a>
 800aa54:	e659      	b.n	800a70a <_printf_float+0xc2>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4652      	mov	r2, sl
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	47b8      	blx	r7
 800aa60:	3001      	adds	r0, #1
 800aa62:	f43f ae52 	beq.w	800a70a <_printf_float+0xc2>
 800aa66:	f108 0801 	add.w	r8, r8, #1
 800aa6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	4543      	cmp	r3, r8
 800aa70:	dcf1      	bgt.n	800aa56 <_printf_float+0x40e>
 800aa72:	464b      	mov	r3, r9
 800aa74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa78:	e6dc      	b.n	800a834 <_printf_float+0x1ec>
 800aa7a:	f04f 0800 	mov.w	r8, #0
 800aa7e:	f104 0a1a 	add.w	sl, r4, #26
 800aa82:	e7f2      	b.n	800aa6a <_printf_float+0x422>
 800aa84:	2301      	movs	r3, #1
 800aa86:	4642      	mov	r2, r8
 800aa88:	e7df      	b.n	800aa4a <_printf_float+0x402>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	464a      	mov	r2, r9
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f ae38 	beq.w	800a70a <_printf_float+0xc2>
 800aa9a:	f108 0801 	add.w	r8, r8, #1
 800aa9e:	68e3      	ldr	r3, [r4, #12]
 800aaa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aaa2:	1a5b      	subs	r3, r3, r1
 800aaa4:	4543      	cmp	r3, r8
 800aaa6:	dcf0      	bgt.n	800aa8a <_printf_float+0x442>
 800aaa8:	e6fa      	b.n	800a8a0 <_printf_float+0x258>
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	f104 0919 	add.w	r9, r4, #25
 800aab2:	e7f4      	b.n	800aa9e <_printf_float+0x456>

0800aab4 <_printf_common>:
 800aab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	4616      	mov	r6, r2
 800aaba:	4699      	mov	r9, r3
 800aabc:	688a      	ldr	r2, [r1, #8]
 800aabe:	690b      	ldr	r3, [r1, #16]
 800aac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aac4:	4293      	cmp	r3, r2
 800aac6:	bfb8      	it	lt
 800aac8:	4613      	movlt	r3, r2
 800aaca:	6033      	str	r3, [r6, #0]
 800aacc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aad0:	4607      	mov	r7, r0
 800aad2:	460c      	mov	r4, r1
 800aad4:	b10a      	cbz	r2, 800aada <_printf_common+0x26>
 800aad6:	3301      	adds	r3, #1
 800aad8:	6033      	str	r3, [r6, #0]
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	0699      	lsls	r1, r3, #26
 800aade:	bf42      	ittt	mi
 800aae0:	6833      	ldrmi	r3, [r6, #0]
 800aae2:	3302      	addmi	r3, #2
 800aae4:	6033      	strmi	r3, [r6, #0]
 800aae6:	6825      	ldr	r5, [r4, #0]
 800aae8:	f015 0506 	ands.w	r5, r5, #6
 800aaec:	d106      	bne.n	800aafc <_printf_common+0x48>
 800aaee:	f104 0a19 	add.w	sl, r4, #25
 800aaf2:	68e3      	ldr	r3, [r4, #12]
 800aaf4:	6832      	ldr	r2, [r6, #0]
 800aaf6:	1a9b      	subs	r3, r3, r2
 800aaf8:	42ab      	cmp	r3, r5
 800aafa:	dc26      	bgt.n	800ab4a <_printf_common+0x96>
 800aafc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab00:	1e13      	subs	r3, r2, #0
 800ab02:	6822      	ldr	r2, [r4, #0]
 800ab04:	bf18      	it	ne
 800ab06:	2301      	movne	r3, #1
 800ab08:	0692      	lsls	r2, r2, #26
 800ab0a:	d42b      	bmi.n	800ab64 <_printf_common+0xb0>
 800ab0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab10:	4649      	mov	r1, r9
 800ab12:	4638      	mov	r0, r7
 800ab14:	47c0      	blx	r8
 800ab16:	3001      	adds	r0, #1
 800ab18:	d01e      	beq.n	800ab58 <_printf_common+0xa4>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	68e5      	ldr	r5, [r4, #12]
 800ab1e:	6832      	ldr	r2, [r6, #0]
 800ab20:	f003 0306 	and.w	r3, r3, #6
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	bf08      	it	eq
 800ab28:	1aad      	subeq	r5, r5, r2
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	6922      	ldr	r2, [r4, #16]
 800ab2e:	bf0c      	ite	eq
 800ab30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab34:	2500      	movne	r5, #0
 800ab36:	4293      	cmp	r3, r2
 800ab38:	bfc4      	itt	gt
 800ab3a:	1a9b      	subgt	r3, r3, r2
 800ab3c:	18ed      	addgt	r5, r5, r3
 800ab3e:	2600      	movs	r6, #0
 800ab40:	341a      	adds	r4, #26
 800ab42:	42b5      	cmp	r5, r6
 800ab44:	d11a      	bne.n	800ab7c <_printf_common+0xc8>
 800ab46:	2000      	movs	r0, #0
 800ab48:	e008      	b.n	800ab5c <_printf_common+0xa8>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4652      	mov	r2, sl
 800ab4e:	4649      	mov	r1, r9
 800ab50:	4638      	mov	r0, r7
 800ab52:	47c0      	blx	r8
 800ab54:	3001      	adds	r0, #1
 800ab56:	d103      	bne.n	800ab60 <_printf_common+0xac>
 800ab58:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab60:	3501      	adds	r5, #1
 800ab62:	e7c6      	b.n	800aaf2 <_printf_common+0x3e>
 800ab64:	18e1      	adds	r1, r4, r3
 800ab66:	1c5a      	adds	r2, r3, #1
 800ab68:	2030      	movs	r0, #48	; 0x30
 800ab6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab6e:	4422      	add	r2, r4
 800ab70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab78:	3302      	adds	r3, #2
 800ab7a:	e7c7      	b.n	800ab0c <_printf_common+0x58>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4622      	mov	r2, r4
 800ab80:	4649      	mov	r1, r9
 800ab82:	4638      	mov	r0, r7
 800ab84:	47c0      	blx	r8
 800ab86:	3001      	adds	r0, #1
 800ab88:	d0e6      	beq.n	800ab58 <_printf_common+0xa4>
 800ab8a:	3601      	adds	r6, #1
 800ab8c:	e7d9      	b.n	800ab42 <_printf_common+0x8e>
	...

0800ab90 <_printf_i>:
 800ab90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab94:	7e0f      	ldrb	r7, [r1, #24]
 800ab96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab98:	2f78      	cmp	r7, #120	; 0x78
 800ab9a:	4691      	mov	r9, r2
 800ab9c:	4680      	mov	r8, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	469a      	mov	sl, r3
 800aba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aba6:	d807      	bhi.n	800abb8 <_printf_i+0x28>
 800aba8:	2f62      	cmp	r7, #98	; 0x62
 800abaa:	d80a      	bhi.n	800abc2 <_printf_i+0x32>
 800abac:	2f00      	cmp	r7, #0
 800abae:	f000 80d8 	beq.w	800ad62 <_printf_i+0x1d2>
 800abb2:	2f58      	cmp	r7, #88	; 0x58
 800abb4:	f000 80a3 	beq.w	800acfe <_printf_i+0x16e>
 800abb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abc0:	e03a      	b.n	800ac38 <_printf_i+0xa8>
 800abc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abc6:	2b15      	cmp	r3, #21
 800abc8:	d8f6      	bhi.n	800abb8 <_printf_i+0x28>
 800abca:	a101      	add	r1, pc, #4	; (adr r1, 800abd0 <_printf_i+0x40>)
 800abcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abd0:	0800ac29 	.word	0x0800ac29
 800abd4:	0800ac3d 	.word	0x0800ac3d
 800abd8:	0800abb9 	.word	0x0800abb9
 800abdc:	0800abb9 	.word	0x0800abb9
 800abe0:	0800abb9 	.word	0x0800abb9
 800abe4:	0800abb9 	.word	0x0800abb9
 800abe8:	0800ac3d 	.word	0x0800ac3d
 800abec:	0800abb9 	.word	0x0800abb9
 800abf0:	0800abb9 	.word	0x0800abb9
 800abf4:	0800abb9 	.word	0x0800abb9
 800abf8:	0800abb9 	.word	0x0800abb9
 800abfc:	0800ad49 	.word	0x0800ad49
 800ac00:	0800ac6d 	.word	0x0800ac6d
 800ac04:	0800ad2b 	.word	0x0800ad2b
 800ac08:	0800abb9 	.word	0x0800abb9
 800ac0c:	0800abb9 	.word	0x0800abb9
 800ac10:	0800ad6b 	.word	0x0800ad6b
 800ac14:	0800abb9 	.word	0x0800abb9
 800ac18:	0800ac6d 	.word	0x0800ac6d
 800ac1c:	0800abb9 	.word	0x0800abb9
 800ac20:	0800abb9 	.word	0x0800abb9
 800ac24:	0800ad33 	.word	0x0800ad33
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	1d1a      	adds	r2, r3, #4
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	602a      	str	r2, [r5, #0]
 800ac30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e0a3      	b.n	800ad84 <_printf_i+0x1f4>
 800ac3c:	6820      	ldr	r0, [r4, #0]
 800ac3e:	6829      	ldr	r1, [r5, #0]
 800ac40:	0606      	lsls	r6, r0, #24
 800ac42:	f101 0304 	add.w	r3, r1, #4
 800ac46:	d50a      	bpl.n	800ac5e <_printf_i+0xce>
 800ac48:	680e      	ldr	r6, [r1, #0]
 800ac4a:	602b      	str	r3, [r5, #0]
 800ac4c:	2e00      	cmp	r6, #0
 800ac4e:	da03      	bge.n	800ac58 <_printf_i+0xc8>
 800ac50:	232d      	movs	r3, #45	; 0x2d
 800ac52:	4276      	negs	r6, r6
 800ac54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac58:	485e      	ldr	r0, [pc, #376]	; (800add4 <_printf_i+0x244>)
 800ac5a:	230a      	movs	r3, #10
 800ac5c:	e019      	b.n	800ac92 <_printf_i+0x102>
 800ac5e:	680e      	ldr	r6, [r1, #0]
 800ac60:	602b      	str	r3, [r5, #0]
 800ac62:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac66:	bf18      	it	ne
 800ac68:	b236      	sxthne	r6, r6
 800ac6a:	e7ef      	b.n	800ac4c <_printf_i+0xbc>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	6820      	ldr	r0, [r4, #0]
 800ac70:	1d19      	adds	r1, r3, #4
 800ac72:	6029      	str	r1, [r5, #0]
 800ac74:	0601      	lsls	r1, r0, #24
 800ac76:	d501      	bpl.n	800ac7c <_printf_i+0xec>
 800ac78:	681e      	ldr	r6, [r3, #0]
 800ac7a:	e002      	b.n	800ac82 <_printf_i+0xf2>
 800ac7c:	0646      	lsls	r6, r0, #25
 800ac7e:	d5fb      	bpl.n	800ac78 <_printf_i+0xe8>
 800ac80:	881e      	ldrh	r6, [r3, #0]
 800ac82:	4854      	ldr	r0, [pc, #336]	; (800add4 <_printf_i+0x244>)
 800ac84:	2f6f      	cmp	r7, #111	; 0x6f
 800ac86:	bf0c      	ite	eq
 800ac88:	2308      	moveq	r3, #8
 800ac8a:	230a      	movne	r3, #10
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac92:	6865      	ldr	r5, [r4, #4]
 800ac94:	60a5      	str	r5, [r4, #8]
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	bfa2      	ittt	ge
 800ac9a:	6821      	ldrge	r1, [r4, #0]
 800ac9c:	f021 0104 	bicge.w	r1, r1, #4
 800aca0:	6021      	strge	r1, [r4, #0]
 800aca2:	b90e      	cbnz	r6, 800aca8 <_printf_i+0x118>
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	d04d      	beq.n	800ad44 <_printf_i+0x1b4>
 800aca8:	4615      	mov	r5, r2
 800acaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800acae:	fb03 6711 	mls	r7, r3, r1, r6
 800acb2:	5dc7      	ldrb	r7, [r0, r7]
 800acb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acb8:	4637      	mov	r7, r6
 800acba:	42bb      	cmp	r3, r7
 800acbc:	460e      	mov	r6, r1
 800acbe:	d9f4      	bls.n	800acaa <_printf_i+0x11a>
 800acc0:	2b08      	cmp	r3, #8
 800acc2:	d10b      	bne.n	800acdc <_printf_i+0x14c>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	07de      	lsls	r6, r3, #31
 800acc8:	d508      	bpl.n	800acdc <_printf_i+0x14c>
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	6861      	ldr	r1, [r4, #4]
 800acce:	4299      	cmp	r1, r3
 800acd0:	bfde      	ittt	le
 800acd2:	2330      	movle	r3, #48	; 0x30
 800acd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acdc:	1b52      	subs	r2, r2, r5
 800acde:	6122      	str	r2, [r4, #16]
 800ace0:	f8cd a000 	str.w	sl, [sp]
 800ace4:	464b      	mov	r3, r9
 800ace6:	aa03      	add	r2, sp, #12
 800ace8:	4621      	mov	r1, r4
 800acea:	4640      	mov	r0, r8
 800acec:	f7ff fee2 	bl	800aab4 <_printf_common>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d14c      	bne.n	800ad8e <_printf_i+0x1fe>
 800acf4:	f04f 30ff 	mov.w	r0, #4294967295
 800acf8:	b004      	add	sp, #16
 800acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfe:	4835      	ldr	r0, [pc, #212]	; (800add4 <_printf_i+0x244>)
 800ad00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad04:	6829      	ldr	r1, [r5, #0]
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad0c:	6029      	str	r1, [r5, #0]
 800ad0e:	061d      	lsls	r5, r3, #24
 800ad10:	d514      	bpl.n	800ad3c <_printf_i+0x1ac>
 800ad12:	07df      	lsls	r7, r3, #31
 800ad14:	bf44      	itt	mi
 800ad16:	f043 0320 	orrmi.w	r3, r3, #32
 800ad1a:	6023      	strmi	r3, [r4, #0]
 800ad1c:	b91e      	cbnz	r6, 800ad26 <_printf_i+0x196>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	f023 0320 	bic.w	r3, r3, #32
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	2310      	movs	r3, #16
 800ad28:	e7b0      	b.n	800ac8c <_printf_i+0xfc>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	f043 0320 	orr.w	r3, r3, #32
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	2378      	movs	r3, #120	; 0x78
 800ad34:	4828      	ldr	r0, [pc, #160]	; (800add8 <_printf_i+0x248>)
 800ad36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad3a:	e7e3      	b.n	800ad04 <_printf_i+0x174>
 800ad3c:	0659      	lsls	r1, r3, #25
 800ad3e:	bf48      	it	mi
 800ad40:	b2b6      	uxthmi	r6, r6
 800ad42:	e7e6      	b.n	800ad12 <_printf_i+0x182>
 800ad44:	4615      	mov	r5, r2
 800ad46:	e7bb      	b.n	800acc0 <_printf_i+0x130>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	6826      	ldr	r6, [r4, #0]
 800ad4c:	6961      	ldr	r1, [r4, #20]
 800ad4e:	1d18      	adds	r0, r3, #4
 800ad50:	6028      	str	r0, [r5, #0]
 800ad52:	0635      	lsls	r5, r6, #24
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	d501      	bpl.n	800ad5c <_printf_i+0x1cc>
 800ad58:	6019      	str	r1, [r3, #0]
 800ad5a:	e002      	b.n	800ad62 <_printf_i+0x1d2>
 800ad5c:	0670      	lsls	r0, r6, #25
 800ad5e:	d5fb      	bpl.n	800ad58 <_printf_i+0x1c8>
 800ad60:	8019      	strh	r1, [r3, #0]
 800ad62:	2300      	movs	r3, #0
 800ad64:	6123      	str	r3, [r4, #16]
 800ad66:	4615      	mov	r5, r2
 800ad68:	e7ba      	b.n	800ace0 <_printf_i+0x150>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	1d1a      	adds	r2, r3, #4
 800ad6e:	602a      	str	r2, [r5, #0]
 800ad70:	681d      	ldr	r5, [r3, #0]
 800ad72:	6862      	ldr	r2, [r4, #4]
 800ad74:	2100      	movs	r1, #0
 800ad76:	4628      	mov	r0, r5
 800ad78:	f7f5 fa32 	bl	80001e0 <memchr>
 800ad7c:	b108      	cbz	r0, 800ad82 <_printf_i+0x1f2>
 800ad7e:	1b40      	subs	r0, r0, r5
 800ad80:	6060      	str	r0, [r4, #4]
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	2300      	movs	r3, #0
 800ad88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad8c:	e7a8      	b.n	800ace0 <_printf_i+0x150>
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	462a      	mov	r2, r5
 800ad92:	4649      	mov	r1, r9
 800ad94:	4640      	mov	r0, r8
 800ad96:	47d0      	blx	sl
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d0ab      	beq.n	800acf4 <_printf_i+0x164>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	079b      	lsls	r3, r3, #30
 800ada0:	d413      	bmi.n	800adca <_printf_i+0x23a>
 800ada2:	68e0      	ldr	r0, [r4, #12]
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	4298      	cmp	r0, r3
 800ada8:	bfb8      	it	lt
 800adaa:	4618      	movlt	r0, r3
 800adac:	e7a4      	b.n	800acf8 <_printf_i+0x168>
 800adae:	2301      	movs	r3, #1
 800adb0:	4632      	mov	r2, r6
 800adb2:	4649      	mov	r1, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	47d0      	blx	sl
 800adb8:	3001      	adds	r0, #1
 800adba:	d09b      	beq.n	800acf4 <_printf_i+0x164>
 800adbc:	3501      	adds	r5, #1
 800adbe:	68e3      	ldr	r3, [r4, #12]
 800adc0:	9903      	ldr	r1, [sp, #12]
 800adc2:	1a5b      	subs	r3, r3, r1
 800adc4:	42ab      	cmp	r3, r5
 800adc6:	dcf2      	bgt.n	800adae <_printf_i+0x21e>
 800adc8:	e7eb      	b.n	800ada2 <_printf_i+0x212>
 800adca:	2500      	movs	r5, #0
 800adcc:	f104 0619 	add.w	r6, r4, #25
 800add0:	e7f5      	b.n	800adbe <_printf_i+0x22e>
 800add2:	bf00      	nop
 800add4:	0800e5fa 	.word	0x0800e5fa
 800add8:	0800e60b 	.word	0x0800e60b

0800addc <cleanup_glue>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	460c      	mov	r4, r1
 800ade0:	6809      	ldr	r1, [r1, #0]
 800ade2:	4605      	mov	r5, r0
 800ade4:	b109      	cbz	r1, 800adea <cleanup_glue+0xe>
 800ade6:	f7ff fff9 	bl	800addc <cleanup_glue>
 800adea:	4621      	mov	r1, r4
 800adec:	4628      	mov	r0, r5
 800adee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf2:	f001 bbf5 	b.w	800c5e0 <_free_r>
	...

0800adf8 <_reclaim_reent>:
 800adf8:	4b2c      	ldr	r3, [pc, #176]	; (800aeac <_reclaim_reent+0xb4>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4283      	cmp	r3, r0
 800adfe:	b570      	push	{r4, r5, r6, lr}
 800ae00:	4604      	mov	r4, r0
 800ae02:	d051      	beq.n	800aea8 <_reclaim_reent+0xb0>
 800ae04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ae06:	b143      	cbz	r3, 800ae1a <_reclaim_reent+0x22>
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d14a      	bne.n	800aea4 <_reclaim_reent+0xac>
 800ae0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae10:	6819      	ldr	r1, [r3, #0]
 800ae12:	b111      	cbz	r1, 800ae1a <_reclaim_reent+0x22>
 800ae14:	4620      	mov	r0, r4
 800ae16:	f001 fbe3 	bl	800c5e0 <_free_r>
 800ae1a:	6961      	ldr	r1, [r4, #20]
 800ae1c:	b111      	cbz	r1, 800ae24 <_reclaim_reent+0x2c>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f001 fbde 	bl	800c5e0 <_free_r>
 800ae24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae26:	b111      	cbz	r1, 800ae2e <_reclaim_reent+0x36>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f001 fbd9 	bl	800c5e0 <_free_r>
 800ae2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae30:	b111      	cbz	r1, 800ae38 <_reclaim_reent+0x40>
 800ae32:	4620      	mov	r0, r4
 800ae34:	f001 fbd4 	bl	800c5e0 <_free_r>
 800ae38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ae3a:	b111      	cbz	r1, 800ae42 <_reclaim_reent+0x4a>
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f001 fbcf 	bl	800c5e0 <_free_r>
 800ae42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ae44:	b111      	cbz	r1, 800ae4c <_reclaim_reent+0x54>
 800ae46:	4620      	mov	r0, r4
 800ae48:	f001 fbca 	bl	800c5e0 <_free_r>
 800ae4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ae4e:	b111      	cbz	r1, 800ae56 <_reclaim_reent+0x5e>
 800ae50:	4620      	mov	r0, r4
 800ae52:	f001 fbc5 	bl	800c5e0 <_free_r>
 800ae56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ae58:	b111      	cbz	r1, 800ae60 <_reclaim_reent+0x68>
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f001 fbc0 	bl	800c5e0 <_free_r>
 800ae60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae62:	b111      	cbz	r1, 800ae6a <_reclaim_reent+0x72>
 800ae64:	4620      	mov	r0, r4
 800ae66:	f001 fbbb 	bl	800c5e0 <_free_r>
 800ae6a:	69a3      	ldr	r3, [r4, #24]
 800ae6c:	b1e3      	cbz	r3, 800aea8 <_reclaim_reent+0xb0>
 800ae6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae70:	4620      	mov	r0, r4
 800ae72:	4798      	blx	r3
 800ae74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ae76:	b1b9      	cbz	r1, 800aea8 <_reclaim_reent+0xb0>
 800ae78:	4620      	mov	r0, r4
 800ae7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae7e:	f7ff bfad 	b.w	800addc <cleanup_glue>
 800ae82:	5949      	ldr	r1, [r1, r5]
 800ae84:	b941      	cbnz	r1, 800ae98 <_reclaim_reent+0xa0>
 800ae86:	3504      	adds	r5, #4
 800ae88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae8a:	2d80      	cmp	r5, #128	; 0x80
 800ae8c:	68d9      	ldr	r1, [r3, #12]
 800ae8e:	d1f8      	bne.n	800ae82 <_reclaim_reent+0x8a>
 800ae90:	4620      	mov	r0, r4
 800ae92:	f001 fba5 	bl	800c5e0 <_free_r>
 800ae96:	e7ba      	b.n	800ae0e <_reclaim_reent+0x16>
 800ae98:	680e      	ldr	r6, [r1, #0]
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f001 fba0 	bl	800c5e0 <_free_r>
 800aea0:	4631      	mov	r1, r6
 800aea2:	e7ef      	b.n	800ae84 <_reclaim_reent+0x8c>
 800aea4:	2500      	movs	r5, #0
 800aea6:	e7ef      	b.n	800ae88 <_reclaim_reent+0x90>
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000010 	.word	0x20000010

0800aeb0 <_sbrk_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d06      	ldr	r5, [pc, #24]	; (800aecc <_sbrk_r+0x1c>)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	f7f7 fa94 	bl	80023e8 <_sbrk>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_sbrk_r+0x1a>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_sbrk_r+0x1a>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	20001ed0 	.word	0x20001ed0

0800aed0 <siprintf>:
 800aed0:	b40e      	push	{r1, r2, r3}
 800aed2:	b500      	push	{lr}
 800aed4:	b09c      	sub	sp, #112	; 0x70
 800aed6:	ab1d      	add	r3, sp, #116	; 0x74
 800aed8:	9002      	str	r0, [sp, #8]
 800aeda:	9006      	str	r0, [sp, #24]
 800aedc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aee0:	4809      	ldr	r0, [pc, #36]	; (800af08 <siprintf+0x38>)
 800aee2:	9107      	str	r1, [sp, #28]
 800aee4:	9104      	str	r1, [sp, #16]
 800aee6:	4909      	ldr	r1, [pc, #36]	; (800af0c <siprintf+0x3c>)
 800aee8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeec:	9105      	str	r1, [sp, #20]
 800aeee:	6800      	ldr	r0, [r0, #0]
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	a902      	add	r1, sp, #8
 800aef4:	f001 fc1c 	bl	800c730 <_svfiprintf_r>
 800aef8:	9b02      	ldr	r3, [sp, #8]
 800aefa:	2200      	movs	r2, #0
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	b01c      	add	sp, #112	; 0x70
 800af00:	f85d eb04 	ldr.w	lr, [sp], #4
 800af04:	b003      	add	sp, #12
 800af06:	4770      	bx	lr
 800af08:	20000010 	.word	0x20000010
 800af0c:	ffff0208 	.word	0xffff0208

0800af10 <__sread>:
 800af10:	b510      	push	{r4, lr}
 800af12:	460c      	mov	r4, r1
 800af14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af18:	f001 fd0a 	bl	800c930 <_read_r>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	bfab      	itete	ge
 800af20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af22:	89a3      	ldrhlt	r3, [r4, #12]
 800af24:	181b      	addge	r3, r3, r0
 800af26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af2a:	bfac      	ite	ge
 800af2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af2e:	81a3      	strhlt	r3, [r4, #12]
 800af30:	bd10      	pop	{r4, pc}

0800af32 <__swrite>:
 800af32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af36:	461f      	mov	r7, r3
 800af38:	898b      	ldrh	r3, [r1, #12]
 800af3a:	05db      	lsls	r3, r3, #23
 800af3c:	4605      	mov	r5, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	4616      	mov	r6, r2
 800af42:	d505      	bpl.n	800af50 <__swrite+0x1e>
 800af44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af48:	2302      	movs	r3, #2
 800af4a:	2200      	movs	r2, #0
 800af4c:	f000 ff88 	bl	800be60 <_lseek_r>
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af5a:	81a3      	strh	r3, [r4, #12]
 800af5c:	4632      	mov	r2, r6
 800af5e:	463b      	mov	r3, r7
 800af60:	4628      	mov	r0, r5
 800af62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af66:	f000 b817 	b.w	800af98 <_write_r>

0800af6a <__sseek>:
 800af6a:	b510      	push	{r4, lr}
 800af6c:	460c      	mov	r4, r1
 800af6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af72:	f000 ff75 	bl	800be60 <_lseek_r>
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	bf15      	itete	ne
 800af7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800af7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af86:	81a3      	strheq	r3, [r4, #12]
 800af88:	bf18      	it	ne
 800af8a:	81a3      	strhne	r3, [r4, #12]
 800af8c:	bd10      	pop	{r4, pc}

0800af8e <__sclose>:
 800af8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af92:	f000 b813 	b.w	800afbc <_close_r>
	...

0800af98 <_write_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d07      	ldr	r5, [pc, #28]	; (800afb8 <_write_r+0x20>)
 800af9c:	4604      	mov	r4, r0
 800af9e:	4608      	mov	r0, r1
 800afa0:	4611      	mov	r1, r2
 800afa2:	2200      	movs	r2, #0
 800afa4:	602a      	str	r2, [r5, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f7f7 f9cd 	bl	8002346 <_write>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_write_r+0x1e>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_write_r+0x1e>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	20001ed0 	.word	0x20001ed0

0800afbc <_close_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	4d06      	ldr	r5, [pc, #24]	; (800afd8 <_close_r+0x1c>)
 800afc0:	2300      	movs	r3, #0
 800afc2:	4604      	mov	r4, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	f7f7 f9d9 	bl	800237e <_close>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	d102      	bne.n	800afd6 <_close_r+0x1a>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	b103      	cbz	r3, 800afd6 <_close_r+0x1a>
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	20001ed0 	.word	0x20001ed0

0800afdc <quorem>:
 800afdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	6903      	ldr	r3, [r0, #16]
 800afe2:	690c      	ldr	r4, [r1, #16]
 800afe4:	42a3      	cmp	r3, r4
 800afe6:	4607      	mov	r7, r0
 800afe8:	f2c0 8081 	blt.w	800b0ee <quorem+0x112>
 800afec:	3c01      	subs	r4, #1
 800afee:	f101 0814 	add.w	r8, r1, #20
 800aff2:	f100 0514 	add.w	r5, r0, #20
 800aff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800affa:	9301      	str	r3, [sp, #4]
 800affc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b004:	3301      	adds	r3, #1
 800b006:	429a      	cmp	r2, r3
 800b008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b00c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b010:	fbb2 f6f3 	udiv	r6, r2, r3
 800b014:	d331      	bcc.n	800b07a <quorem+0x9e>
 800b016:	f04f 0e00 	mov.w	lr, #0
 800b01a:	4640      	mov	r0, r8
 800b01c:	46ac      	mov	ip, r5
 800b01e:	46f2      	mov	sl, lr
 800b020:	f850 2b04 	ldr.w	r2, [r0], #4
 800b024:	b293      	uxth	r3, r2
 800b026:	fb06 e303 	mla	r3, r6, r3, lr
 800b02a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b02e:	b29b      	uxth	r3, r3
 800b030:	ebaa 0303 	sub.w	r3, sl, r3
 800b034:	f8dc a000 	ldr.w	sl, [ip]
 800b038:	0c12      	lsrs	r2, r2, #16
 800b03a:	fa13 f38a 	uxtah	r3, r3, sl
 800b03e:	fb06 e202 	mla	r2, r6, r2, lr
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	9b00      	ldr	r3, [sp, #0]
 800b046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b04a:	b292      	uxth	r2, r2
 800b04c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b054:	f8bd 3000 	ldrh.w	r3, [sp]
 800b058:	4581      	cmp	r9, r0
 800b05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b05e:	f84c 3b04 	str.w	r3, [ip], #4
 800b062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b066:	d2db      	bcs.n	800b020 <quorem+0x44>
 800b068:	f855 300b 	ldr.w	r3, [r5, fp]
 800b06c:	b92b      	cbnz	r3, 800b07a <quorem+0x9e>
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	3b04      	subs	r3, #4
 800b072:	429d      	cmp	r5, r3
 800b074:	461a      	mov	r2, r3
 800b076:	d32e      	bcc.n	800b0d6 <quorem+0xfa>
 800b078:	613c      	str	r4, [r7, #16]
 800b07a:	4638      	mov	r0, r7
 800b07c:	f001 f998 	bl	800c3b0 <__mcmp>
 800b080:	2800      	cmp	r0, #0
 800b082:	db24      	blt.n	800b0ce <quorem+0xf2>
 800b084:	3601      	adds	r6, #1
 800b086:	4628      	mov	r0, r5
 800b088:	f04f 0c00 	mov.w	ip, #0
 800b08c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b090:	f8d0 e000 	ldr.w	lr, [r0]
 800b094:	b293      	uxth	r3, r2
 800b096:	ebac 0303 	sub.w	r3, ip, r3
 800b09a:	0c12      	lsrs	r2, r2, #16
 800b09c:	fa13 f38e 	uxtah	r3, r3, lr
 800b0a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ae:	45c1      	cmp	r9, r8
 800b0b0:	f840 3b04 	str.w	r3, [r0], #4
 800b0b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0b8:	d2e8      	bcs.n	800b08c <quorem+0xb0>
 800b0ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0c2:	b922      	cbnz	r2, 800b0ce <quorem+0xf2>
 800b0c4:	3b04      	subs	r3, #4
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	d30a      	bcc.n	800b0e2 <quorem+0x106>
 800b0cc:	613c      	str	r4, [r7, #16]
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	b003      	add	sp, #12
 800b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d6:	6812      	ldr	r2, [r2, #0]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d1cc      	bne.n	800b078 <quorem+0x9c>
 800b0de:	3c01      	subs	r4, #1
 800b0e0:	e7c7      	b.n	800b072 <quorem+0x96>
 800b0e2:	6812      	ldr	r2, [r2, #0]
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	d1f0      	bne.n	800b0cc <quorem+0xf0>
 800b0ea:	3c01      	subs	r4, #1
 800b0ec:	e7eb      	b.n	800b0c6 <quorem+0xea>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	e7ee      	b.n	800b0d0 <quorem+0xf4>
 800b0f2:	0000      	movs	r0, r0
 800b0f4:	0000      	movs	r0, r0
	...

0800b0f8 <_dtoa_r>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	ed2d 8b04 	vpush	{d8-d9}
 800b100:	ec57 6b10 	vmov	r6, r7, d0
 800b104:	b093      	sub	sp, #76	; 0x4c
 800b106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b10c:	9106      	str	r1, [sp, #24]
 800b10e:	ee10 aa10 	vmov	sl, s0
 800b112:	4604      	mov	r4, r0
 800b114:	9209      	str	r2, [sp, #36]	; 0x24
 800b116:	930c      	str	r3, [sp, #48]	; 0x30
 800b118:	46bb      	mov	fp, r7
 800b11a:	b975      	cbnz	r5, 800b13a <_dtoa_r+0x42>
 800b11c:	2010      	movs	r0, #16
 800b11e:	f000 feb1 	bl	800be84 <malloc>
 800b122:	4602      	mov	r2, r0
 800b124:	6260      	str	r0, [r4, #36]	; 0x24
 800b126:	b920      	cbnz	r0, 800b132 <_dtoa_r+0x3a>
 800b128:	4ba7      	ldr	r3, [pc, #668]	; (800b3c8 <_dtoa_r+0x2d0>)
 800b12a:	21ea      	movs	r1, #234	; 0xea
 800b12c:	48a7      	ldr	r0, [pc, #668]	; (800b3cc <_dtoa_r+0x2d4>)
 800b12e:	f001 fc11 	bl	800c954 <__assert_func>
 800b132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b136:	6005      	str	r5, [r0, #0]
 800b138:	60c5      	str	r5, [r0, #12]
 800b13a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b13c:	6819      	ldr	r1, [r3, #0]
 800b13e:	b151      	cbz	r1, 800b156 <_dtoa_r+0x5e>
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	604a      	str	r2, [r1, #4]
 800b144:	2301      	movs	r3, #1
 800b146:	4093      	lsls	r3, r2
 800b148:	608b      	str	r3, [r1, #8]
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 feee 	bl	800bf2c <_Bfree>
 800b150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b152:	2200      	movs	r2, #0
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	1e3b      	subs	r3, r7, #0
 800b158:	bfaa      	itet	ge
 800b15a:	2300      	movge	r3, #0
 800b15c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b160:	f8c8 3000 	strge.w	r3, [r8]
 800b164:	4b9a      	ldr	r3, [pc, #616]	; (800b3d0 <_dtoa_r+0x2d8>)
 800b166:	bfbc      	itt	lt
 800b168:	2201      	movlt	r2, #1
 800b16a:	f8c8 2000 	strlt.w	r2, [r8]
 800b16e:	ea33 030b 	bics.w	r3, r3, fp
 800b172:	d11b      	bne.n	800b1ac <_dtoa_r+0xb4>
 800b174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b176:	f242 730f 	movw	r3, #9999	; 0x270f
 800b17a:	6013      	str	r3, [r2, #0]
 800b17c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b180:	4333      	orrs	r3, r6
 800b182:	f000 8592 	beq.w	800bcaa <_dtoa_r+0xbb2>
 800b186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b188:	b963      	cbnz	r3, 800b1a4 <_dtoa_r+0xac>
 800b18a:	4b92      	ldr	r3, [pc, #584]	; (800b3d4 <_dtoa_r+0x2dc>)
 800b18c:	e022      	b.n	800b1d4 <_dtoa_r+0xdc>
 800b18e:	4b92      	ldr	r3, [pc, #584]	; (800b3d8 <_dtoa_r+0x2e0>)
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	3308      	adds	r3, #8
 800b194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	9801      	ldr	r0, [sp, #4]
 800b19a:	b013      	add	sp, #76	; 0x4c
 800b19c:	ecbd 8b04 	vpop	{d8-d9}
 800b1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a4:	4b8b      	ldr	r3, [pc, #556]	; (800b3d4 <_dtoa_r+0x2dc>)
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	3303      	adds	r3, #3
 800b1aa:	e7f3      	b.n	800b194 <_dtoa_r+0x9c>
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	4659      	mov	r1, fp
 800b1b4:	f7f5 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b8:	ec4b ab19 	vmov	d9, sl, fp
 800b1bc:	4680      	mov	r8, r0
 800b1be:	b158      	cbz	r0, 800b1d8 <_dtoa_r+0xe0>
 800b1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	6013      	str	r3, [r2, #0]
 800b1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 856b 	beq.w	800bca4 <_dtoa_r+0xbac>
 800b1ce:	4883      	ldr	r0, [pc, #524]	; (800b3dc <_dtoa_r+0x2e4>)
 800b1d0:	6018      	str	r0, [r3, #0]
 800b1d2:	1e43      	subs	r3, r0, #1
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	e7df      	b.n	800b198 <_dtoa_r+0xa0>
 800b1d8:	ec4b ab10 	vmov	d0, sl, fp
 800b1dc:	aa10      	add	r2, sp, #64	; 0x40
 800b1de:	a911      	add	r1, sp, #68	; 0x44
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f001 f98b 	bl	800c4fc <__d2b>
 800b1e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b1ea:	ee08 0a10 	vmov	s16, r0
 800b1ee:	2d00      	cmp	r5, #0
 800b1f0:	f000 8084 	beq.w	800b2fc <_dtoa_r+0x204>
 800b1f4:	ee19 3a90 	vmov	r3, s19
 800b1f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b200:	4656      	mov	r6, sl
 800b202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b20a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b20e:	4b74      	ldr	r3, [pc, #464]	; (800b3e0 <_dtoa_r+0x2e8>)
 800b210:	2200      	movs	r2, #0
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	f7f5 f837 	bl	8000288 <__aeabi_dsub>
 800b21a:	a365      	add	r3, pc, #404	; (adr r3, 800b3b0 <_dtoa_r+0x2b8>)
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	f7f5 f9ea 	bl	80005f8 <__aeabi_dmul>
 800b224:	a364      	add	r3, pc, #400	; (adr r3, 800b3b8 <_dtoa_r+0x2c0>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	f7f5 f82f 	bl	800028c <__adddf3>
 800b22e:	4606      	mov	r6, r0
 800b230:	4628      	mov	r0, r5
 800b232:	460f      	mov	r7, r1
 800b234:	f7f5 f976 	bl	8000524 <__aeabi_i2d>
 800b238:	a361      	add	r3, pc, #388	; (adr r3, 800b3c0 <_dtoa_r+0x2c8>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	4602      	mov	r2, r0
 800b244:	460b      	mov	r3, r1
 800b246:	4630      	mov	r0, r6
 800b248:	4639      	mov	r1, r7
 800b24a:	f7f5 f81f 	bl	800028c <__adddf3>
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	f7f5 fc81 	bl	8000b58 <__aeabi_d2iz>
 800b256:	2200      	movs	r2, #0
 800b258:	9000      	str	r0, [sp, #0]
 800b25a:	2300      	movs	r3, #0
 800b25c:	4630      	mov	r0, r6
 800b25e:	4639      	mov	r1, r7
 800b260:	f7f5 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800b264:	b150      	cbz	r0, 800b27c <_dtoa_r+0x184>
 800b266:	9800      	ldr	r0, [sp, #0]
 800b268:	f7f5 f95c 	bl	8000524 <__aeabi_i2d>
 800b26c:	4632      	mov	r2, r6
 800b26e:	463b      	mov	r3, r7
 800b270:	f7f5 fc2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b274:	b910      	cbnz	r0, 800b27c <_dtoa_r+0x184>
 800b276:	9b00      	ldr	r3, [sp, #0]
 800b278:	3b01      	subs	r3, #1
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	9b00      	ldr	r3, [sp, #0]
 800b27e:	2b16      	cmp	r3, #22
 800b280:	d85a      	bhi.n	800b338 <_dtoa_r+0x240>
 800b282:	9a00      	ldr	r2, [sp, #0]
 800b284:	4b57      	ldr	r3, [pc, #348]	; (800b3e4 <_dtoa_r+0x2ec>)
 800b286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	ec51 0b19 	vmov	r0, r1, d9
 800b292:	f7f5 fc23 	bl	8000adc <__aeabi_dcmplt>
 800b296:	2800      	cmp	r0, #0
 800b298:	d050      	beq.n	800b33c <_dtoa_r+0x244>
 800b29a:	9b00      	ldr	r3, [sp, #0]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2a6:	1b5d      	subs	r5, r3, r5
 800b2a8:	1e6b      	subs	r3, r5, #1
 800b2aa:	9305      	str	r3, [sp, #20]
 800b2ac:	bf45      	ittet	mi
 800b2ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800b2b2:	9304      	strmi	r3, [sp, #16]
 800b2b4:	2300      	movpl	r3, #0
 800b2b6:	2300      	movmi	r3, #0
 800b2b8:	bf4c      	ite	mi
 800b2ba:	9305      	strmi	r3, [sp, #20]
 800b2bc:	9304      	strpl	r3, [sp, #16]
 800b2be:	9b00      	ldr	r3, [sp, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	db3d      	blt.n	800b340 <_dtoa_r+0x248>
 800b2c4:	9b05      	ldr	r3, [sp, #20]
 800b2c6:	9a00      	ldr	r2, [sp, #0]
 800b2c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ca:	4413      	add	r3, r2
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	9b06      	ldr	r3, [sp, #24]
 800b2d4:	2b09      	cmp	r3, #9
 800b2d6:	f200 8089 	bhi.w	800b3ec <_dtoa_r+0x2f4>
 800b2da:	2b05      	cmp	r3, #5
 800b2dc:	bfc4      	itt	gt
 800b2de:	3b04      	subgt	r3, #4
 800b2e0:	9306      	strgt	r3, [sp, #24]
 800b2e2:	9b06      	ldr	r3, [sp, #24]
 800b2e4:	f1a3 0302 	sub.w	r3, r3, #2
 800b2e8:	bfcc      	ite	gt
 800b2ea:	2500      	movgt	r5, #0
 800b2ec:	2501      	movle	r5, #1
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	f200 8087 	bhi.w	800b402 <_dtoa_r+0x30a>
 800b2f4:	e8df f003 	tbb	[pc, r3]
 800b2f8:	59383a2d 	.word	0x59383a2d
 800b2fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b300:	441d      	add	r5, r3
 800b302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b306:	2b20      	cmp	r3, #32
 800b308:	bfc1      	itttt	gt
 800b30a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b30e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b312:	fa0b f303 	lslgt.w	r3, fp, r3
 800b316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b31a:	bfda      	itte	le
 800b31c:	f1c3 0320 	rsble	r3, r3, #32
 800b320:	fa06 f003 	lslle.w	r0, r6, r3
 800b324:	4318      	orrgt	r0, r3
 800b326:	f7f5 f8ed 	bl	8000504 <__aeabi_ui2d>
 800b32a:	2301      	movs	r3, #1
 800b32c:	4606      	mov	r6, r0
 800b32e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b332:	3d01      	subs	r5, #1
 800b334:	930e      	str	r3, [sp, #56]	; 0x38
 800b336:	e76a      	b.n	800b20e <_dtoa_r+0x116>
 800b338:	2301      	movs	r3, #1
 800b33a:	e7b2      	b.n	800b2a2 <_dtoa_r+0x1aa>
 800b33c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b33e:	e7b1      	b.n	800b2a4 <_dtoa_r+0x1ac>
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	9a00      	ldr	r2, [sp, #0]
 800b344:	1a9b      	subs	r3, r3, r2
 800b346:	9304      	str	r3, [sp, #16]
 800b348:	4253      	negs	r3, r2
 800b34a:	9307      	str	r3, [sp, #28]
 800b34c:	2300      	movs	r3, #0
 800b34e:	930a      	str	r3, [sp, #40]	; 0x28
 800b350:	e7bf      	b.n	800b2d2 <_dtoa_r+0x1da>
 800b352:	2300      	movs	r3, #0
 800b354:	9308      	str	r3, [sp, #32]
 800b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	dc55      	bgt.n	800b408 <_dtoa_r+0x310>
 800b35c:	2301      	movs	r3, #1
 800b35e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b362:	461a      	mov	r2, r3
 800b364:	9209      	str	r2, [sp, #36]	; 0x24
 800b366:	e00c      	b.n	800b382 <_dtoa_r+0x28a>
 800b368:	2301      	movs	r3, #1
 800b36a:	e7f3      	b.n	800b354 <_dtoa_r+0x25c>
 800b36c:	2300      	movs	r3, #0
 800b36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b370:	9308      	str	r3, [sp, #32]
 800b372:	9b00      	ldr	r3, [sp, #0]
 800b374:	4413      	add	r3, r2
 800b376:	9302      	str	r3, [sp, #8]
 800b378:	3301      	adds	r3, #1
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	9303      	str	r3, [sp, #12]
 800b37e:	bfb8      	it	lt
 800b380:	2301      	movlt	r3, #1
 800b382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b384:	2200      	movs	r2, #0
 800b386:	6042      	str	r2, [r0, #4]
 800b388:	2204      	movs	r2, #4
 800b38a:	f102 0614 	add.w	r6, r2, #20
 800b38e:	429e      	cmp	r6, r3
 800b390:	6841      	ldr	r1, [r0, #4]
 800b392:	d93d      	bls.n	800b410 <_dtoa_r+0x318>
 800b394:	4620      	mov	r0, r4
 800b396:	f000 fd89 	bl	800beac <_Balloc>
 800b39a:	9001      	str	r0, [sp, #4]
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d13b      	bne.n	800b418 <_dtoa_r+0x320>
 800b3a0:	4b11      	ldr	r3, [pc, #68]	; (800b3e8 <_dtoa_r+0x2f0>)
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b3a8:	e6c0      	b.n	800b12c <_dtoa_r+0x34>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e7df      	b.n	800b36e <_dtoa_r+0x276>
 800b3ae:	bf00      	nop
 800b3b0:	636f4361 	.word	0x636f4361
 800b3b4:	3fd287a7 	.word	0x3fd287a7
 800b3b8:	8b60c8b3 	.word	0x8b60c8b3
 800b3bc:	3fc68a28 	.word	0x3fc68a28
 800b3c0:	509f79fb 	.word	0x509f79fb
 800b3c4:	3fd34413 	.word	0x3fd34413
 800b3c8:	0800e629 	.word	0x0800e629
 800b3cc:	0800e640 	.word	0x0800e640
 800b3d0:	7ff00000 	.word	0x7ff00000
 800b3d4:	0800e625 	.word	0x0800e625
 800b3d8:	0800e61c 	.word	0x0800e61c
 800b3dc:	0800e5f9 	.word	0x0800e5f9
 800b3e0:	3ff80000 	.word	0x3ff80000
 800b3e4:	0800e730 	.word	0x0800e730
 800b3e8:	0800e69b 	.word	0x0800e69b
 800b3ec:	2501      	movs	r5, #1
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9306      	str	r3, [sp, #24]
 800b3f2:	9508      	str	r5, [sp, #32]
 800b3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2312      	movs	r3, #18
 800b400:	e7b0      	b.n	800b364 <_dtoa_r+0x26c>
 800b402:	2301      	movs	r3, #1
 800b404:	9308      	str	r3, [sp, #32]
 800b406:	e7f5      	b.n	800b3f4 <_dtoa_r+0x2fc>
 800b408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b40e:	e7b8      	b.n	800b382 <_dtoa_r+0x28a>
 800b410:	3101      	adds	r1, #1
 800b412:	6041      	str	r1, [r0, #4]
 800b414:	0052      	lsls	r2, r2, #1
 800b416:	e7b8      	b.n	800b38a <_dtoa_r+0x292>
 800b418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b41a:	9a01      	ldr	r2, [sp, #4]
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	9b03      	ldr	r3, [sp, #12]
 800b420:	2b0e      	cmp	r3, #14
 800b422:	f200 809d 	bhi.w	800b560 <_dtoa_r+0x468>
 800b426:	2d00      	cmp	r5, #0
 800b428:	f000 809a 	beq.w	800b560 <_dtoa_r+0x468>
 800b42c:	9b00      	ldr	r3, [sp, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	dd32      	ble.n	800b498 <_dtoa_r+0x3a0>
 800b432:	4ab7      	ldr	r2, [pc, #732]	; (800b710 <_dtoa_r+0x618>)
 800b434:	f003 030f 	and.w	r3, r3, #15
 800b438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b43c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b440:	9b00      	ldr	r3, [sp, #0]
 800b442:	05d8      	lsls	r0, r3, #23
 800b444:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b448:	d516      	bpl.n	800b478 <_dtoa_r+0x380>
 800b44a:	4bb2      	ldr	r3, [pc, #712]	; (800b714 <_dtoa_r+0x61c>)
 800b44c:	ec51 0b19 	vmov	r0, r1, d9
 800b450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b454:	f7f5 f9fa 	bl	800084c <__aeabi_ddiv>
 800b458:	f007 070f 	and.w	r7, r7, #15
 800b45c:	4682      	mov	sl, r0
 800b45e:	468b      	mov	fp, r1
 800b460:	2503      	movs	r5, #3
 800b462:	4eac      	ldr	r6, [pc, #688]	; (800b714 <_dtoa_r+0x61c>)
 800b464:	b957      	cbnz	r7, 800b47c <_dtoa_r+0x384>
 800b466:	4642      	mov	r2, r8
 800b468:	464b      	mov	r3, r9
 800b46a:	4650      	mov	r0, sl
 800b46c:	4659      	mov	r1, fp
 800b46e:	f7f5 f9ed 	bl	800084c <__aeabi_ddiv>
 800b472:	4682      	mov	sl, r0
 800b474:	468b      	mov	fp, r1
 800b476:	e028      	b.n	800b4ca <_dtoa_r+0x3d2>
 800b478:	2502      	movs	r5, #2
 800b47a:	e7f2      	b.n	800b462 <_dtoa_r+0x36a>
 800b47c:	07f9      	lsls	r1, r7, #31
 800b47e:	d508      	bpl.n	800b492 <_dtoa_r+0x39a>
 800b480:	4640      	mov	r0, r8
 800b482:	4649      	mov	r1, r9
 800b484:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b488:	f7f5 f8b6 	bl	80005f8 <__aeabi_dmul>
 800b48c:	3501      	adds	r5, #1
 800b48e:	4680      	mov	r8, r0
 800b490:	4689      	mov	r9, r1
 800b492:	107f      	asrs	r7, r7, #1
 800b494:	3608      	adds	r6, #8
 800b496:	e7e5      	b.n	800b464 <_dtoa_r+0x36c>
 800b498:	f000 809b 	beq.w	800b5d2 <_dtoa_r+0x4da>
 800b49c:	9b00      	ldr	r3, [sp, #0]
 800b49e:	4f9d      	ldr	r7, [pc, #628]	; (800b714 <_dtoa_r+0x61c>)
 800b4a0:	425e      	negs	r6, r3
 800b4a2:	4b9b      	ldr	r3, [pc, #620]	; (800b710 <_dtoa_r+0x618>)
 800b4a4:	f006 020f 	and.w	r2, r6, #15
 800b4a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	ec51 0b19 	vmov	r0, r1, d9
 800b4b4:	f7f5 f8a0 	bl	80005f8 <__aeabi_dmul>
 800b4b8:	1136      	asrs	r6, r6, #4
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	468b      	mov	fp, r1
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2502      	movs	r5, #2
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	d17a      	bne.n	800b5bc <_dtoa_r+0x4c4>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1d3      	bne.n	800b472 <_dtoa_r+0x37a>
 800b4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 8082 	beq.w	800b5d6 <_dtoa_r+0x4de>
 800b4d2:	4b91      	ldr	r3, [pc, #580]	; (800b718 <_dtoa_r+0x620>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4650      	mov	r0, sl
 800b4d8:	4659      	mov	r1, fp
 800b4da:	f7f5 faff 	bl	8000adc <__aeabi_dcmplt>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d079      	beq.n	800b5d6 <_dtoa_r+0x4de>
 800b4e2:	9b03      	ldr	r3, [sp, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d076      	beq.n	800b5d6 <_dtoa_r+0x4de>
 800b4e8:	9b02      	ldr	r3, [sp, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	dd36      	ble.n	800b55c <_dtoa_r+0x464>
 800b4ee:	9b00      	ldr	r3, [sp, #0]
 800b4f0:	4650      	mov	r0, sl
 800b4f2:	4659      	mov	r1, fp
 800b4f4:	1e5f      	subs	r7, r3, #1
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	4b88      	ldr	r3, [pc, #544]	; (800b71c <_dtoa_r+0x624>)
 800b4fa:	f7f5 f87d 	bl	80005f8 <__aeabi_dmul>
 800b4fe:	9e02      	ldr	r6, [sp, #8]
 800b500:	4682      	mov	sl, r0
 800b502:	468b      	mov	fp, r1
 800b504:	3501      	adds	r5, #1
 800b506:	4628      	mov	r0, r5
 800b508:	f7f5 f80c 	bl	8000524 <__aeabi_i2d>
 800b50c:	4652      	mov	r2, sl
 800b50e:	465b      	mov	r3, fp
 800b510:	f7f5 f872 	bl	80005f8 <__aeabi_dmul>
 800b514:	4b82      	ldr	r3, [pc, #520]	; (800b720 <_dtoa_r+0x628>)
 800b516:	2200      	movs	r2, #0
 800b518:	f7f4 feb8 	bl	800028c <__adddf3>
 800b51c:	46d0      	mov	r8, sl
 800b51e:	46d9      	mov	r9, fp
 800b520:	4682      	mov	sl, r0
 800b522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b526:	2e00      	cmp	r6, #0
 800b528:	d158      	bne.n	800b5dc <_dtoa_r+0x4e4>
 800b52a:	4b7e      	ldr	r3, [pc, #504]	; (800b724 <_dtoa_r+0x62c>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	4640      	mov	r0, r8
 800b530:	4649      	mov	r1, r9
 800b532:	f7f4 fea9 	bl	8000288 <__aeabi_dsub>
 800b536:	4652      	mov	r2, sl
 800b538:	465b      	mov	r3, fp
 800b53a:	4680      	mov	r8, r0
 800b53c:	4689      	mov	r9, r1
 800b53e:	f7f5 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 800b542:	2800      	cmp	r0, #0
 800b544:	f040 8295 	bne.w	800ba72 <_dtoa_r+0x97a>
 800b548:	4652      	mov	r2, sl
 800b54a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b54e:	4640      	mov	r0, r8
 800b550:	4649      	mov	r1, r9
 800b552:	f7f5 fac3 	bl	8000adc <__aeabi_dcmplt>
 800b556:	2800      	cmp	r0, #0
 800b558:	f040 8289 	bne.w	800ba6e <_dtoa_r+0x976>
 800b55c:	ec5b ab19 	vmov	sl, fp, d9
 800b560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b562:	2b00      	cmp	r3, #0
 800b564:	f2c0 8148 	blt.w	800b7f8 <_dtoa_r+0x700>
 800b568:	9a00      	ldr	r2, [sp, #0]
 800b56a:	2a0e      	cmp	r2, #14
 800b56c:	f300 8144 	bgt.w	800b7f8 <_dtoa_r+0x700>
 800b570:	4b67      	ldr	r3, [pc, #412]	; (800b710 <_dtoa_r+0x618>)
 800b572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f280 80d5 	bge.w	800b72c <_dtoa_r+0x634>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f300 80d1 	bgt.w	800b72c <_dtoa_r+0x634>
 800b58a:	f040 826f 	bne.w	800ba6c <_dtoa_r+0x974>
 800b58e:	4b65      	ldr	r3, [pc, #404]	; (800b724 <_dtoa_r+0x62c>)
 800b590:	2200      	movs	r2, #0
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f5 f82f 	bl	80005f8 <__aeabi_dmul>
 800b59a:	4652      	mov	r2, sl
 800b59c:	465b      	mov	r3, fp
 800b59e:	f7f5 fab1 	bl	8000b04 <__aeabi_dcmpge>
 800b5a2:	9e03      	ldr	r6, [sp, #12]
 800b5a4:	4637      	mov	r7, r6
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f040 8245 	bne.w	800ba36 <_dtoa_r+0x93e>
 800b5ac:	9d01      	ldr	r5, [sp, #4]
 800b5ae:	2331      	movs	r3, #49	; 0x31
 800b5b0:	f805 3b01 	strb.w	r3, [r5], #1
 800b5b4:	9b00      	ldr	r3, [sp, #0]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	e240      	b.n	800ba3e <_dtoa_r+0x946>
 800b5bc:	07f2      	lsls	r2, r6, #31
 800b5be:	d505      	bpl.n	800b5cc <_dtoa_r+0x4d4>
 800b5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	3501      	adds	r5, #1
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	1076      	asrs	r6, r6, #1
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	e777      	b.n	800b4c2 <_dtoa_r+0x3ca>
 800b5d2:	2502      	movs	r5, #2
 800b5d4:	e779      	b.n	800b4ca <_dtoa_r+0x3d2>
 800b5d6:	9f00      	ldr	r7, [sp, #0]
 800b5d8:	9e03      	ldr	r6, [sp, #12]
 800b5da:	e794      	b.n	800b506 <_dtoa_r+0x40e>
 800b5dc:	9901      	ldr	r1, [sp, #4]
 800b5de:	4b4c      	ldr	r3, [pc, #304]	; (800b710 <_dtoa_r+0x618>)
 800b5e0:	4431      	add	r1, r6
 800b5e2:	910d      	str	r1, [sp, #52]	; 0x34
 800b5e4:	9908      	ldr	r1, [sp, #32]
 800b5e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b5ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5ee:	2900      	cmp	r1, #0
 800b5f0:	d043      	beq.n	800b67a <_dtoa_r+0x582>
 800b5f2:	494d      	ldr	r1, [pc, #308]	; (800b728 <_dtoa_r+0x630>)
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	f7f5 f929 	bl	800084c <__aeabi_ddiv>
 800b5fa:	4652      	mov	r2, sl
 800b5fc:	465b      	mov	r3, fp
 800b5fe:	f7f4 fe43 	bl	8000288 <__aeabi_dsub>
 800b602:	9d01      	ldr	r5, [sp, #4]
 800b604:	4682      	mov	sl, r0
 800b606:	468b      	mov	fp, r1
 800b608:	4649      	mov	r1, r9
 800b60a:	4640      	mov	r0, r8
 800b60c:	f7f5 faa4 	bl	8000b58 <__aeabi_d2iz>
 800b610:	4606      	mov	r6, r0
 800b612:	f7f4 ff87 	bl	8000524 <__aeabi_i2d>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4640      	mov	r0, r8
 800b61c:	4649      	mov	r1, r9
 800b61e:	f7f4 fe33 	bl	8000288 <__aeabi_dsub>
 800b622:	3630      	adds	r6, #48	; 0x30
 800b624:	f805 6b01 	strb.w	r6, [r5], #1
 800b628:	4652      	mov	r2, sl
 800b62a:	465b      	mov	r3, fp
 800b62c:	4680      	mov	r8, r0
 800b62e:	4689      	mov	r9, r1
 800b630:	f7f5 fa54 	bl	8000adc <__aeabi_dcmplt>
 800b634:	2800      	cmp	r0, #0
 800b636:	d163      	bne.n	800b700 <_dtoa_r+0x608>
 800b638:	4642      	mov	r2, r8
 800b63a:	464b      	mov	r3, r9
 800b63c:	4936      	ldr	r1, [pc, #216]	; (800b718 <_dtoa_r+0x620>)
 800b63e:	2000      	movs	r0, #0
 800b640:	f7f4 fe22 	bl	8000288 <__aeabi_dsub>
 800b644:	4652      	mov	r2, sl
 800b646:	465b      	mov	r3, fp
 800b648:	f7f5 fa48 	bl	8000adc <__aeabi_dcmplt>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	f040 80b5 	bne.w	800b7bc <_dtoa_r+0x6c4>
 800b652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b654:	429d      	cmp	r5, r3
 800b656:	d081      	beq.n	800b55c <_dtoa_r+0x464>
 800b658:	4b30      	ldr	r3, [pc, #192]	; (800b71c <_dtoa_r+0x624>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	4650      	mov	r0, sl
 800b65e:	4659      	mov	r1, fp
 800b660:	f7f4 ffca 	bl	80005f8 <__aeabi_dmul>
 800b664:	4b2d      	ldr	r3, [pc, #180]	; (800b71c <_dtoa_r+0x624>)
 800b666:	4682      	mov	sl, r0
 800b668:	468b      	mov	fp, r1
 800b66a:	4640      	mov	r0, r8
 800b66c:	4649      	mov	r1, r9
 800b66e:	2200      	movs	r2, #0
 800b670:	f7f4 ffc2 	bl	80005f8 <__aeabi_dmul>
 800b674:	4680      	mov	r8, r0
 800b676:	4689      	mov	r9, r1
 800b678:	e7c6      	b.n	800b608 <_dtoa_r+0x510>
 800b67a:	4650      	mov	r0, sl
 800b67c:	4659      	mov	r1, fp
 800b67e:	f7f4 ffbb 	bl	80005f8 <__aeabi_dmul>
 800b682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b684:	9d01      	ldr	r5, [sp, #4]
 800b686:	930f      	str	r3, [sp, #60]	; 0x3c
 800b688:	4682      	mov	sl, r0
 800b68a:	468b      	mov	fp, r1
 800b68c:	4649      	mov	r1, r9
 800b68e:	4640      	mov	r0, r8
 800b690:	f7f5 fa62 	bl	8000b58 <__aeabi_d2iz>
 800b694:	4606      	mov	r6, r0
 800b696:	f7f4 ff45 	bl	8000524 <__aeabi_i2d>
 800b69a:	3630      	adds	r6, #48	; 0x30
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	f7f4 fdf0 	bl	8000288 <__aeabi_dsub>
 800b6a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ae:	429d      	cmp	r5, r3
 800b6b0:	4680      	mov	r8, r0
 800b6b2:	4689      	mov	r9, r1
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	d124      	bne.n	800b704 <_dtoa_r+0x60c>
 800b6ba:	4b1b      	ldr	r3, [pc, #108]	; (800b728 <_dtoa_r+0x630>)
 800b6bc:	4650      	mov	r0, sl
 800b6be:	4659      	mov	r1, fp
 800b6c0:	f7f4 fde4 	bl	800028c <__adddf3>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	f7f5 fa24 	bl	8000b18 <__aeabi_dcmpgt>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d173      	bne.n	800b7bc <_dtoa_r+0x6c4>
 800b6d4:	4652      	mov	r2, sl
 800b6d6:	465b      	mov	r3, fp
 800b6d8:	4913      	ldr	r1, [pc, #76]	; (800b728 <_dtoa_r+0x630>)
 800b6da:	2000      	movs	r0, #0
 800b6dc:	f7f4 fdd4 	bl	8000288 <__aeabi_dsub>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	f7f5 f9f8 	bl	8000adc <__aeabi_dcmplt>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	f43f af35 	beq.w	800b55c <_dtoa_r+0x464>
 800b6f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b6f4:	1e6b      	subs	r3, r5, #1
 800b6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6fc:	2b30      	cmp	r3, #48	; 0x30
 800b6fe:	d0f8      	beq.n	800b6f2 <_dtoa_r+0x5fa>
 800b700:	9700      	str	r7, [sp, #0]
 800b702:	e049      	b.n	800b798 <_dtoa_r+0x6a0>
 800b704:	4b05      	ldr	r3, [pc, #20]	; (800b71c <_dtoa_r+0x624>)
 800b706:	f7f4 ff77 	bl	80005f8 <__aeabi_dmul>
 800b70a:	4680      	mov	r8, r0
 800b70c:	4689      	mov	r9, r1
 800b70e:	e7bd      	b.n	800b68c <_dtoa_r+0x594>
 800b710:	0800e730 	.word	0x0800e730
 800b714:	0800e708 	.word	0x0800e708
 800b718:	3ff00000 	.word	0x3ff00000
 800b71c:	40240000 	.word	0x40240000
 800b720:	401c0000 	.word	0x401c0000
 800b724:	40140000 	.word	0x40140000
 800b728:	3fe00000 	.word	0x3fe00000
 800b72c:	9d01      	ldr	r5, [sp, #4]
 800b72e:	4656      	mov	r6, sl
 800b730:	465f      	mov	r7, fp
 800b732:	4642      	mov	r2, r8
 800b734:	464b      	mov	r3, r9
 800b736:	4630      	mov	r0, r6
 800b738:	4639      	mov	r1, r7
 800b73a:	f7f5 f887 	bl	800084c <__aeabi_ddiv>
 800b73e:	f7f5 fa0b 	bl	8000b58 <__aeabi_d2iz>
 800b742:	4682      	mov	sl, r0
 800b744:	f7f4 feee 	bl	8000524 <__aeabi_i2d>
 800b748:	4642      	mov	r2, r8
 800b74a:	464b      	mov	r3, r9
 800b74c:	f7f4 ff54 	bl	80005f8 <__aeabi_dmul>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4630      	mov	r0, r6
 800b756:	4639      	mov	r1, r7
 800b758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b75c:	f7f4 fd94 	bl	8000288 <__aeabi_dsub>
 800b760:	f805 6b01 	strb.w	r6, [r5], #1
 800b764:	9e01      	ldr	r6, [sp, #4]
 800b766:	9f03      	ldr	r7, [sp, #12]
 800b768:	1bae      	subs	r6, r5, r6
 800b76a:	42b7      	cmp	r7, r6
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	d135      	bne.n	800b7de <_dtoa_r+0x6e6>
 800b772:	f7f4 fd8b 	bl	800028c <__adddf3>
 800b776:	4642      	mov	r2, r8
 800b778:	464b      	mov	r3, r9
 800b77a:	4606      	mov	r6, r0
 800b77c:	460f      	mov	r7, r1
 800b77e:	f7f5 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800b782:	b9d0      	cbnz	r0, 800b7ba <_dtoa_r+0x6c2>
 800b784:	4642      	mov	r2, r8
 800b786:	464b      	mov	r3, r9
 800b788:	4630      	mov	r0, r6
 800b78a:	4639      	mov	r1, r7
 800b78c:	f7f5 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b790:	b110      	cbz	r0, 800b798 <_dtoa_r+0x6a0>
 800b792:	f01a 0f01 	tst.w	sl, #1
 800b796:	d110      	bne.n	800b7ba <_dtoa_r+0x6c2>
 800b798:	4620      	mov	r0, r4
 800b79a:	ee18 1a10 	vmov	r1, s16
 800b79e:	f000 fbc5 	bl	800bf2c <_Bfree>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9800      	ldr	r0, [sp, #0]
 800b7a6:	702b      	strb	r3, [r5, #0]
 800b7a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	6018      	str	r0, [r3, #0]
 800b7ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f43f acf1 	beq.w	800b198 <_dtoa_r+0xa0>
 800b7b6:	601d      	str	r5, [r3, #0]
 800b7b8:	e4ee      	b.n	800b198 <_dtoa_r+0xa0>
 800b7ba:	9f00      	ldr	r7, [sp, #0]
 800b7bc:	462b      	mov	r3, r5
 800b7be:	461d      	mov	r5, r3
 800b7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7c4:	2a39      	cmp	r2, #57	; 0x39
 800b7c6:	d106      	bne.n	800b7d6 <_dtoa_r+0x6de>
 800b7c8:	9a01      	ldr	r2, [sp, #4]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d1f7      	bne.n	800b7be <_dtoa_r+0x6c6>
 800b7ce:	9901      	ldr	r1, [sp, #4]
 800b7d0:	2230      	movs	r2, #48	; 0x30
 800b7d2:	3701      	adds	r7, #1
 800b7d4:	700a      	strb	r2, [r1, #0]
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	3201      	adds	r2, #1
 800b7da:	701a      	strb	r2, [r3, #0]
 800b7dc:	e790      	b.n	800b700 <_dtoa_r+0x608>
 800b7de:	4ba6      	ldr	r3, [pc, #664]	; (800ba78 <_dtoa_r+0x980>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f7f4 ff09 	bl	80005f8 <__aeabi_dmul>
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460f      	mov	r7, r1
 800b7ee:	f7f5 f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d09d      	beq.n	800b732 <_dtoa_r+0x63a>
 800b7f6:	e7cf      	b.n	800b798 <_dtoa_r+0x6a0>
 800b7f8:	9a08      	ldr	r2, [sp, #32]
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	f000 80d7 	beq.w	800b9ae <_dtoa_r+0x8b6>
 800b800:	9a06      	ldr	r2, [sp, #24]
 800b802:	2a01      	cmp	r2, #1
 800b804:	f300 80ba 	bgt.w	800b97c <_dtoa_r+0x884>
 800b808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	f000 80b2 	beq.w	800b974 <_dtoa_r+0x87c>
 800b810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b814:	9e07      	ldr	r6, [sp, #28]
 800b816:	9d04      	ldr	r5, [sp, #16]
 800b818:	9a04      	ldr	r2, [sp, #16]
 800b81a:	441a      	add	r2, r3
 800b81c:	9204      	str	r2, [sp, #16]
 800b81e:	9a05      	ldr	r2, [sp, #20]
 800b820:	2101      	movs	r1, #1
 800b822:	441a      	add	r2, r3
 800b824:	4620      	mov	r0, r4
 800b826:	9205      	str	r2, [sp, #20]
 800b828:	f000 fc38 	bl	800c09c <__i2b>
 800b82c:	4607      	mov	r7, r0
 800b82e:	2d00      	cmp	r5, #0
 800b830:	dd0c      	ble.n	800b84c <_dtoa_r+0x754>
 800b832:	9b05      	ldr	r3, [sp, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd09      	ble.n	800b84c <_dtoa_r+0x754>
 800b838:	42ab      	cmp	r3, r5
 800b83a:	9a04      	ldr	r2, [sp, #16]
 800b83c:	bfa8      	it	ge
 800b83e:	462b      	movge	r3, r5
 800b840:	1ad2      	subs	r2, r2, r3
 800b842:	9204      	str	r2, [sp, #16]
 800b844:	9a05      	ldr	r2, [sp, #20]
 800b846:	1aed      	subs	r5, r5, r3
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	9305      	str	r3, [sp, #20]
 800b84c:	9b07      	ldr	r3, [sp, #28]
 800b84e:	b31b      	cbz	r3, 800b898 <_dtoa_r+0x7a0>
 800b850:	9b08      	ldr	r3, [sp, #32]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80af 	beq.w	800b9b6 <_dtoa_r+0x8be>
 800b858:	2e00      	cmp	r6, #0
 800b85a:	dd13      	ble.n	800b884 <_dtoa_r+0x78c>
 800b85c:	4639      	mov	r1, r7
 800b85e:	4632      	mov	r2, r6
 800b860:	4620      	mov	r0, r4
 800b862:	f000 fcdb 	bl	800c21c <__pow5mult>
 800b866:	ee18 2a10 	vmov	r2, s16
 800b86a:	4601      	mov	r1, r0
 800b86c:	4607      	mov	r7, r0
 800b86e:	4620      	mov	r0, r4
 800b870:	f000 fc2a 	bl	800c0c8 <__multiply>
 800b874:	ee18 1a10 	vmov	r1, s16
 800b878:	4680      	mov	r8, r0
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 fb56 	bl	800bf2c <_Bfree>
 800b880:	ee08 8a10 	vmov	s16, r8
 800b884:	9b07      	ldr	r3, [sp, #28]
 800b886:	1b9a      	subs	r2, r3, r6
 800b888:	d006      	beq.n	800b898 <_dtoa_r+0x7a0>
 800b88a:	ee18 1a10 	vmov	r1, s16
 800b88e:	4620      	mov	r0, r4
 800b890:	f000 fcc4 	bl	800c21c <__pow5mult>
 800b894:	ee08 0a10 	vmov	s16, r0
 800b898:	2101      	movs	r1, #1
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fbfe 	bl	800c09c <__i2b>
 800b8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	f340 8088 	ble.w	800b9ba <_dtoa_r+0x8c2>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4601      	mov	r1, r0
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fcb4 	bl	800c21c <__pow5mult>
 800b8b4:	9b06      	ldr	r3, [sp, #24]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	f340 8081 	ble.w	800b9c0 <_dtoa_r+0x8c8>
 800b8be:	f04f 0800 	mov.w	r8, #0
 800b8c2:	6933      	ldr	r3, [r6, #16]
 800b8c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b8c8:	6918      	ldr	r0, [r3, #16]
 800b8ca:	f000 fb97 	bl	800bffc <__hi0bits>
 800b8ce:	f1c0 0020 	rsb	r0, r0, #32
 800b8d2:	9b05      	ldr	r3, [sp, #20]
 800b8d4:	4418      	add	r0, r3
 800b8d6:	f010 001f 	ands.w	r0, r0, #31
 800b8da:	f000 8092 	beq.w	800ba02 <_dtoa_r+0x90a>
 800b8de:	f1c0 0320 	rsb	r3, r0, #32
 800b8e2:	2b04      	cmp	r3, #4
 800b8e4:	f340 808a 	ble.w	800b9fc <_dtoa_r+0x904>
 800b8e8:	f1c0 001c 	rsb	r0, r0, #28
 800b8ec:	9b04      	ldr	r3, [sp, #16]
 800b8ee:	4403      	add	r3, r0
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	9b05      	ldr	r3, [sp, #20]
 800b8f4:	4403      	add	r3, r0
 800b8f6:	4405      	add	r5, r0
 800b8f8:	9305      	str	r3, [sp, #20]
 800b8fa:	9b04      	ldr	r3, [sp, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	dd07      	ble.n	800b910 <_dtoa_r+0x818>
 800b900:	ee18 1a10 	vmov	r1, s16
 800b904:	461a      	mov	r2, r3
 800b906:	4620      	mov	r0, r4
 800b908:	f000 fce2 	bl	800c2d0 <__lshift>
 800b90c:	ee08 0a10 	vmov	s16, r0
 800b910:	9b05      	ldr	r3, [sp, #20]
 800b912:	2b00      	cmp	r3, #0
 800b914:	dd05      	ble.n	800b922 <_dtoa_r+0x82a>
 800b916:	4631      	mov	r1, r6
 800b918:	461a      	mov	r2, r3
 800b91a:	4620      	mov	r0, r4
 800b91c:	f000 fcd8 	bl	800c2d0 <__lshift>
 800b920:	4606      	mov	r6, r0
 800b922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b924:	2b00      	cmp	r3, #0
 800b926:	d06e      	beq.n	800ba06 <_dtoa_r+0x90e>
 800b928:	ee18 0a10 	vmov	r0, s16
 800b92c:	4631      	mov	r1, r6
 800b92e:	f000 fd3f 	bl	800c3b0 <__mcmp>
 800b932:	2800      	cmp	r0, #0
 800b934:	da67      	bge.n	800ba06 <_dtoa_r+0x90e>
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	3b01      	subs	r3, #1
 800b93a:	ee18 1a10 	vmov	r1, s16
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	220a      	movs	r2, #10
 800b942:	2300      	movs	r3, #0
 800b944:	4620      	mov	r0, r4
 800b946:	f000 fb13 	bl	800bf70 <__multadd>
 800b94a:	9b08      	ldr	r3, [sp, #32]
 800b94c:	ee08 0a10 	vmov	s16, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 81b1 	beq.w	800bcb8 <_dtoa_r+0xbc0>
 800b956:	2300      	movs	r3, #0
 800b958:	4639      	mov	r1, r7
 800b95a:	220a      	movs	r2, #10
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 fb07 	bl	800bf70 <__multadd>
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	4607      	mov	r7, r0
 800b968:	f300 808e 	bgt.w	800ba88 <_dtoa_r+0x990>
 800b96c:	9b06      	ldr	r3, [sp, #24]
 800b96e:	2b02      	cmp	r3, #2
 800b970:	dc51      	bgt.n	800ba16 <_dtoa_r+0x91e>
 800b972:	e089      	b.n	800ba88 <_dtoa_r+0x990>
 800b974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b97a:	e74b      	b.n	800b814 <_dtoa_r+0x71c>
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	1e5e      	subs	r6, r3, #1
 800b980:	9b07      	ldr	r3, [sp, #28]
 800b982:	42b3      	cmp	r3, r6
 800b984:	bfbf      	itttt	lt
 800b986:	9b07      	ldrlt	r3, [sp, #28]
 800b988:	9607      	strlt	r6, [sp, #28]
 800b98a:	1af2      	sublt	r2, r6, r3
 800b98c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b98e:	bfb6      	itet	lt
 800b990:	189b      	addlt	r3, r3, r2
 800b992:	1b9e      	subge	r6, r3, r6
 800b994:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	bfb8      	it	lt
 800b99a:	2600      	movlt	r6, #0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	bfb7      	itett	lt
 800b9a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b9a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b9a8:	1a9d      	sublt	r5, r3, r2
 800b9aa:	2300      	movlt	r3, #0
 800b9ac:	e734      	b.n	800b818 <_dtoa_r+0x720>
 800b9ae:	9e07      	ldr	r6, [sp, #28]
 800b9b0:	9d04      	ldr	r5, [sp, #16]
 800b9b2:	9f08      	ldr	r7, [sp, #32]
 800b9b4:	e73b      	b.n	800b82e <_dtoa_r+0x736>
 800b9b6:	9a07      	ldr	r2, [sp, #28]
 800b9b8:	e767      	b.n	800b88a <_dtoa_r+0x792>
 800b9ba:	9b06      	ldr	r3, [sp, #24]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	dc18      	bgt.n	800b9f2 <_dtoa_r+0x8fa>
 800b9c0:	f1ba 0f00 	cmp.w	sl, #0
 800b9c4:	d115      	bne.n	800b9f2 <_dtoa_r+0x8fa>
 800b9c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9ca:	b993      	cbnz	r3, 800b9f2 <_dtoa_r+0x8fa>
 800b9cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9d0:	0d1b      	lsrs	r3, r3, #20
 800b9d2:	051b      	lsls	r3, r3, #20
 800b9d4:	b183      	cbz	r3, 800b9f8 <_dtoa_r+0x900>
 800b9d6:	9b04      	ldr	r3, [sp, #16]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	9b05      	ldr	r3, [sp, #20]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	9305      	str	r3, [sp, #20]
 800b9e2:	f04f 0801 	mov.w	r8, #1
 800b9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f47f af6a 	bne.w	800b8c2 <_dtoa_r+0x7ca>
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	e76f      	b.n	800b8d2 <_dtoa_r+0x7da>
 800b9f2:	f04f 0800 	mov.w	r8, #0
 800b9f6:	e7f6      	b.n	800b9e6 <_dtoa_r+0x8ee>
 800b9f8:	4698      	mov	r8, r3
 800b9fa:	e7f4      	b.n	800b9e6 <_dtoa_r+0x8ee>
 800b9fc:	f43f af7d 	beq.w	800b8fa <_dtoa_r+0x802>
 800ba00:	4618      	mov	r0, r3
 800ba02:	301c      	adds	r0, #28
 800ba04:	e772      	b.n	800b8ec <_dtoa_r+0x7f4>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	dc37      	bgt.n	800ba7c <_dtoa_r+0x984>
 800ba0c:	9b06      	ldr	r3, [sp, #24]
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	dd34      	ble.n	800ba7c <_dtoa_r+0x984>
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	9302      	str	r3, [sp, #8]
 800ba16:	9b02      	ldr	r3, [sp, #8]
 800ba18:	b96b      	cbnz	r3, 800ba36 <_dtoa_r+0x93e>
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	2205      	movs	r2, #5
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 faa6 	bl	800bf70 <__multadd>
 800ba24:	4601      	mov	r1, r0
 800ba26:	4606      	mov	r6, r0
 800ba28:	ee18 0a10 	vmov	r0, s16
 800ba2c:	f000 fcc0 	bl	800c3b0 <__mcmp>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	f73f adbb 	bgt.w	800b5ac <_dtoa_r+0x4b4>
 800ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba38:	9d01      	ldr	r5, [sp, #4]
 800ba3a:	43db      	mvns	r3, r3
 800ba3c:	9300      	str	r3, [sp, #0]
 800ba3e:	f04f 0800 	mov.w	r8, #0
 800ba42:	4631      	mov	r1, r6
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 fa71 	bl	800bf2c <_Bfree>
 800ba4a:	2f00      	cmp	r7, #0
 800ba4c:	f43f aea4 	beq.w	800b798 <_dtoa_r+0x6a0>
 800ba50:	f1b8 0f00 	cmp.w	r8, #0
 800ba54:	d005      	beq.n	800ba62 <_dtoa_r+0x96a>
 800ba56:	45b8      	cmp	r8, r7
 800ba58:	d003      	beq.n	800ba62 <_dtoa_r+0x96a>
 800ba5a:	4641      	mov	r1, r8
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 fa65 	bl	800bf2c <_Bfree>
 800ba62:	4639      	mov	r1, r7
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fa61 	bl	800bf2c <_Bfree>
 800ba6a:	e695      	b.n	800b798 <_dtoa_r+0x6a0>
 800ba6c:	2600      	movs	r6, #0
 800ba6e:	4637      	mov	r7, r6
 800ba70:	e7e1      	b.n	800ba36 <_dtoa_r+0x93e>
 800ba72:	9700      	str	r7, [sp, #0]
 800ba74:	4637      	mov	r7, r6
 800ba76:	e599      	b.n	800b5ac <_dtoa_r+0x4b4>
 800ba78:	40240000 	.word	0x40240000
 800ba7c:	9b08      	ldr	r3, [sp, #32]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 80ca 	beq.w	800bc18 <_dtoa_r+0xb20>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	9302      	str	r3, [sp, #8]
 800ba88:	2d00      	cmp	r5, #0
 800ba8a:	dd05      	ble.n	800ba98 <_dtoa_r+0x9a0>
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 fc1d 	bl	800c2d0 <__lshift>
 800ba96:	4607      	mov	r7, r0
 800ba98:	f1b8 0f00 	cmp.w	r8, #0
 800ba9c:	d05b      	beq.n	800bb56 <_dtoa_r+0xa5e>
 800ba9e:	6879      	ldr	r1, [r7, #4]
 800baa0:	4620      	mov	r0, r4
 800baa2:	f000 fa03 	bl	800beac <_Balloc>
 800baa6:	4605      	mov	r5, r0
 800baa8:	b928      	cbnz	r0, 800bab6 <_dtoa_r+0x9be>
 800baaa:	4b87      	ldr	r3, [pc, #540]	; (800bcc8 <_dtoa_r+0xbd0>)
 800baac:	4602      	mov	r2, r0
 800baae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bab2:	f7ff bb3b 	b.w	800b12c <_dtoa_r+0x34>
 800bab6:	693a      	ldr	r2, [r7, #16]
 800bab8:	3202      	adds	r2, #2
 800baba:	0092      	lsls	r2, r2, #2
 800babc:	f107 010c 	add.w	r1, r7, #12
 800bac0:	300c      	adds	r0, #12
 800bac2:	f7fe fc76 	bl	800a3b2 <memcpy>
 800bac6:	2201      	movs	r2, #1
 800bac8:	4629      	mov	r1, r5
 800baca:	4620      	mov	r0, r4
 800bacc:	f000 fc00 	bl	800c2d0 <__lshift>
 800bad0:	9b01      	ldr	r3, [sp, #4]
 800bad2:	f103 0901 	add.w	r9, r3, #1
 800bad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bada:	4413      	add	r3, r2
 800badc:	9305      	str	r3, [sp, #20]
 800bade:	f00a 0301 	and.w	r3, sl, #1
 800bae2:	46b8      	mov	r8, r7
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	4607      	mov	r7, r0
 800bae8:	4631      	mov	r1, r6
 800baea:	ee18 0a10 	vmov	r0, s16
 800baee:	f7ff fa75 	bl	800afdc <quorem>
 800baf2:	4641      	mov	r1, r8
 800baf4:	9002      	str	r0, [sp, #8]
 800baf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bafa:	ee18 0a10 	vmov	r0, s16
 800bafe:	f000 fc57 	bl	800c3b0 <__mcmp>
 800bb02:	463a      	mov	r2, r7
 800bb04:	9003      	str	r0, [sp, #12]
 800bb06:	4631      	mov	r1, r6
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f000 fc6d 	bl	800c3e8 <__mdiff>
 800bb0e:	68c2      	ldr	r2, [r0, #12]
 800bb10:	f109 3bff 	add.w	fp, r9, #4294967295
 800bb14:	4605      	mov	r5, r0
 800bb16:	bb02      	cbnz	r2, 800bb5a <_dtoa_r+0xa62>
 800bb18:	4601      	mov	r1, r0
 800bb1a:	ee18 0a10 	vmov	r0, s16
 800bb1e:	f000 fc47 	bl	800c3b0 <__mcmp>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4629      	mov	r1, r5
 800bb26:	4620      	mov	r0, r4
 800bb28:	9207      	str	r2, [sp, #28]
 800bb2a:	f000 f9ff 	bl	800bf2c <_Bfree>
 800bb2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bb32:	ea43 0102 	orr.w	r1, r3, r2
 800bb36:	9b04      	ldr	r3, [sp, #16]
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	464d      	mov	r5, r9
 800bb3c:	d10f      	bne.n	800bb5e <_dtoa_r+0xa66>
 800bb3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb42:	d02a      	beq.n	800bb9a <_dtoa_r+0xaa2>
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dd02      	ble.n	800bb50 <_dtoa_r+0xa58>
 800bb4a:	9b02      	ldr	r3, [sp, #8]
 800bb4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb50:	f88b a000 	strb.w	sl, [fp]
 800bb54:	e775      	b.n	800ba42 <_dtoa_r+0x94a>
 800bb56:	4638      	mov	r0, r7
 800bb58:	e7ba      	b.n	800bad0 <_dtoa_r+0x9d8>
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	e7e2      	b.n	800bb24 <_dtoa_r+0xa2c>
 800bb5e:	9b03      	ldr	r3, [sp, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	db04      	blt.n	800bb6e <_dtoa_r+0xa76>
 800bb64:	9906      	ldr	r1, [sp, #24]
 800bb66:	430b      	orrs	r3, r1
 800bb68:	9904      	ldr	r1, [sp, #16]
 800bb6a:	430b      	orrs	r3, r1
 800bb6c:	d122      	bne.n	800bbb4 <_dtoa_r+0xabc>
 800bb6e:	2a00      	cmp	r2, #0
 800bb70:	ddee      	ble.n	800bb50 <_dtoa_r+0xa58>
 800bb72:	ee18 1a10 	vmov	r1, s16
 800bb76:	2201      	movs	r2, #1
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 fba9 	bl	800c2d0 <__lshift>
 800bb7e:	4631      	mov	r1, r6
 800bb80:	ee08 0a10 	vmov	s16, r0
 800bb84:	f000 fc14 	bl	800c3b0 <__mcmp>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	dc03      	bgt.n	800bb94 <_dtoa_r+0xa9c>
 800bb8c:	d1e0      	bne.n	800bb50 <_dtoa_r+0xa58>
 800bb8e:	f01a 0f01 	tst.w	sl, #1
 800bb92:	d0dd      	beq.n	800bb50 <_dtoa_r+0xa58>
 800bb94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb98:	d1d7      	bne.n	800bb4a <_dtoa_r+0xa52>
 800bb9a:	2339      	movs	r3, #57	; 0x39
 800bb9c:	f88b 3000 	strb.w	r3, [fp]
 800bba0:	462b      	mov	r3, r5
 800bba2:	461d      	mov	r5, r3
 800bba4:	3b01      	subs	r3, #1
 800bba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bbaa:	2a39      	cmp	r2, #57	; 0x39
 800bbac:	d071      	beq.n	800bc92 <_dtoa_r+0xb9a>
 800bbae:	3201      	adds	r2, #1
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	e746      	b.n	800ba42 <_dtoa_r+0x94a>
 800bbb4:	2a00      	cmp	r2, #0
 800bbb6:	dd07      	ble.n	800bbc8 <_dtoa_r+0xad0>
 800bbb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbbc:	d0ed      	beq.n	800bb9a <_dtoa_r+0xaa2>
 800bbbe:	f10a 0301 	add.w	r3, sl, #1
 800bbc2:	f88b 3000 	strb.w	r3, [fp]
 800bbc6:	e73c      	b.n	800ba42 <_dtoa_r+0x94a>
 800bbc8:	9b05      	ldr	r3, [sp, #20]
 800bbca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bbce:	4599      	cmp	r9, r3
 800bbd0:	d047      	beq.n	800bc62 <_dtoa_r+0xb6a>
 800bbd2:	ee18 1a10 	vmov	r1, s16
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	220a      	movs	r2, #10
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 f9c8 	bl	800bf70 <__multadd>
 800bbe0:	45b8      	cmp	r8, r7
 800bbe2:	ee08 0a10 	vmov	s16, r0
 800bbe6:	f04f 0300 	mov.w	r3, #0
 800bbea:	f04f 020a 	mov.w	r2, #10
 800bbee:	4641      	mov	r1, r8
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	d106      	bne.n	800bc02 <_dtoa_r+0xb0a>
 800bbf4:	f000 f9bc 	bl	800bf70 <__multadd>
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	f109 0901 	add.w	r9, r9, #1
 800bc00:	e772      	b.n	800bae8 <_dtoa_r+0x9f0>
 800bc02:	f000 f9b5 	bl	800bf70 <__multadd>
 800bc06:	4639      	mov	r1, r7
 800bc08:	4680      	mov	r8, r0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	220a      	movs	r2, #10
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f000 f9ae 	bl	800bf70 <__multadd>
 800bc14:	4607      	mov	r7, r0
 800bc16:	e7f1      	b.n	800bbfc <_dtoa_r+0xb04>
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	9302      	str	r3, [sp, #8]
 800bc1c:	9d01      	ldr	r5, [sp, #4]
 800bc1e:	ee18 0a10 	vmov	r0, s16
 800bc22:	4631      	mov	r1, r6
 800bc24:	f7ff f9da 	bl	800afdc <quorem>
 800bc28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc2c:	9b01      	ldr	r3, [sp, #4]
 800bc2e:	f805 ab01 	strb.w	sl, [r5], #1
 800bc32:	1aea      	subs	r2, r5, r3
 800bc34:	9b02      	ldr	r3, [sp, #8]
 800bc36:	4293      	cmp	r3, r2
 800bc38:	dd09      	ble.n	800bc4e <_dtoa_r+0xb56>
 800bc3a:	ee18 1a10 	vmov	r1, s16
 800bc3e:	2300      	movs	r3, #0
 800bc40:	220a      	movs	r2, #10
 800bc42:	4620      	mov	r0, r4
 800bc44:	f000 f994 	bl	800bf70 <__multadd>
 800bc48:	ee08 0a10 	vmov	s16, r0
 800bc4c:	e7e7      	b.n	800bc1e <_dtoa_r+0xb26>
 800bc4e:	9b02      	ldr	r3, [sp, #8]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	bfc8      	it	gt
 800bc54:	461d      	movgt	r5, r3
 800bc56:	9b01      	ldr	r3, [sp, #4]
 800bc58:	bfd8      	it	le
 800bc5a:	2501      	movle	r5, #1
 800bc5c:	441d      	add	r5, r3
 800bc5e:	f04f 0800 	mov.w	r8, #0
 800bc62:	ee18 1a10 	vmov	r1, s16
 800bc66:	2201      	movs	r2, #1
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fb31 	bl	800c2d0 <__lshift>
 800bc6e:	4631      	mov	r1, r6
 800bc70:	ee08 0a10 	vmov	s16, r0
 800bc74:	f000 fb9c 	bl	800c3b0 <__mcmp>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	dc91      	bgt.n	800bba0 <_dtoa_r+0xaa8>
 800bc7c:	d102      	bne.n	800bc84 <_dtoa_r+0xb8c>
 800bc7e:	f01a 0f01 	tst.w	sl, #1
 800bc82:	d18d      	bne.n	800bba0 <_dtoa_r+0xaa8>
 800bc84:	462b      	mov	r3, r5
 800bc86:	461d      	mov	r5, r3
 800bc88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc8c:	2a30      	cmp	r2, #48	; 0x30
 800bc8e:	d0fa      	beq.n	800bc86 <_dtoa_r+0xb8e>
 800bc90:	e6d7      	b.n	800ba42 <_dtoa_r+0x94a>
 800bc92:	9a01      	ldr	r2, [sp, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d184      	bne.n	800bba2 <_dtoa_r+0xaaa>
 800bc98:	9b00      	ldr	r3, [sp, #0]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	2331      	movs	r3, #49	; 0x31
 800bca0:	7013      	strb	r3, [r2, #0]
 800bca2:	e6ce      	b.n	800ba42 <_dtoa_r+0x94a>
 800bca4:	4b09      	ldr	r3, [pc, #36]	; (800bccc <_dtoa_r+0xbd4>)
 800bca6:	f7ff ba95 	b.w	800b1d4 <_dtoa_r+0xdc>
 800bcaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f47f aa6e 	bne.w	800b18e <_dtoa_r+0x96>
 800bcb2:	4b07      	ldr	r3, [pc, #28]	; (800bcd0 <_dtoa_r+0xbd8>)
 800bcb4:	f7ff ba8e 	b.w	800b1d4 <_dtoa_r+0xdc>
 800bcb8:	9b02      	ldr	r3, [sp, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dcae      	bgt.n	800bc1c <_dtoa_r+0xb24>
 800bcbe:	9b06      	ldr	r3, [sp, #24]
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	f73f aea8 	bgt.w	800ba16 <_dtoa_r+0x91e>
 800bcc6:	e7a9      	b.n	800bc1c <_dtoa_r+0xb24>
 800bcc8:	0800e69b 	.word	0x0800e69b
 800bccc:	0800e5f8 	.word	0x0800e5f8
 800bcd0:	0800e61c 	.word	0x0800e61c

0800bcd4 <__sflush_r>:
 800bcd4:	898a      	ldrh	r2, [r1, #12]
 800bcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcda:	4605      	mov	r5, r0
 800bcdc:	0710      	lsls	r0, r2, #28
 800bcde:	460c      	mov	r4, r1
 800bce0:	d458      	bmi.n	800bd94 <__sflush_r+0xc0>
 800bce2:	684b      	ldr	r3, [r1, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dc05      	bgt.n	800bcf4 <__sflush_r+0x20>
 800bce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	dc02      	bgt.n	800bcf4 <__sflush_r+0x20>
 800bcee:	2000      	movs	r0, #0
 800bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcf6:	2e00      	cmp	r6, #0
 800bcf8:	d0f9      	beq.n	800bcee <__sflush_r+0x1a>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd00:	682f      	ldr	r7, [r5, #0]
 800bd02:	602b      	str	r3, [r5, #0]
 800bd04:	d032      	beq.n	800bd6c <__sflush_r+0x98>
 800bd06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	075a      	lsls	r2, r3, #29
 800bd0c:	d505      	bpl.n	800bd1a <__sflush_r+0x46>
 800bd0e:	6863      	ldr	r3, [r4, #4]
 800bd10:	1ac0      	subs	r0, r0, r3
 800bd12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd14:	b10b      	cbz	r3, 800bd1a <__sflush_r+0x46>
 800bd16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd18:	1ac0      	subs	r0, r0, r3
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd20:	6a21      	ldr	r1, [r4, #32]
 800bd22:	4628      	mov	r0, r5
 800bd24:	47b0      	blx	r6
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	d106      	bne.n	800bd3a <__sflush_r+0x66>
 800bd2c:	6829      	ldr	r1, [r5, #0]
 800bd2e:	291d      	cmp	r1, #29
 800bd30:	d82c      	bhi.n	800bd8c <__sflush_r+0xb8>
 800bd32:	4a2a      	ldr	r2, [pc, #168]	; (800bddc <__sflush_r+0x108>)
 800bd34:	40ca      	lsrs	r2, r1
 800bd36:	07d6      	lsls	r6, r2, #31
 800bd38:	d528      	bpl.n	800bd8c <__sflush_r+0xb8>
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	6062      	str	r2, [r4, #4]
 800bd3e:	04d9      	lsls	r1, r3, #19
 800bd40:	6922      	ldr	r2, [r4, #16]
 800bd42:	6022      	str	r2, [r4, #0]
 800bd44:	d504      	bpl.n	800bd50 <__sflush_r+0x7c>
 800bd46:	1c42      	adds	r2, r0, #1
 800bd48:	d101      	bne.n	800bd4e <__sflush_r+0x7a>
 800bd4a:	682b      	ldr	r3, [r5, #0]
 800bd4c:	b903      	cbnz	r3, 800bd50 <__sflush_r+0x7c>
 800bd4e:	6560      	str	r0, [r4, #84]	; 0x54
 800bd50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd52:	602f      	str	r7, [r5, #0]
 800bd54:	2900      	cmp	r1, #0
 800bd56:	d0ca      	beq.n	800bcee <__sflush_r+0x1a>
 800bd58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd5c:	4299      	cmp	r1, r3
 800bd5e:	d002      	beq.n	800bd66 <__sflush_r+0x92>
 800bd60:	4628      	mov	r0, r5
 800bd62:	f000 fc3d 	bl	800c5e0 <_free_r>
 800bd66:	2000      	movs	r0, #0
 800bd68:	6360      	str	r0, [r4, #52]	; 0x34
 800bd6a:	e7c1      	b.n	800bcf0 <__sflush_r+0x1c>
 800bd6c:	6a21      	ldr	r1, [r4, #32]
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4628      	mov	r0, r5
 800bd72:	47b0      	blx	r6
 800bd74:	1c41      	adds	r1, r0, #1
 800bd76:	d1c7      	bne.n	800bd08 <__sflush_r+0x34>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d0c4      	beq.n	800bd08 <__sflush_r+0x34>
 800bd7e:	2b1d      	cmp	r3, #29
 800bd80:	d001      	beq.n	800bd86 <__sflush_r+0xb2>
 800bd82:	2b16      	cmp	r3, #22
 800bd84:	d101      	bne.n	800bd8a <__sflush_r+0xb6>
 800bd86:	602f      	str	r7, [r5, #0]
 800bd88:	e7b1      	b.n	800bcee <__sflush_r+0x1a>
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd90:	81a3      	strh	r3, [r4, #12]
 800bd92:	e7ad      	b.n	800bcf0 <__sflush_r+0x1c>
 800bd94:	690f      	ldr	r7, [r1, #16]
 800bd96:	2f00      	cmp	r7, #0
 800bd98:	d0a9      	beq.n	800bcee <__sflush_r+0x1a>
 800bd9a:	0793      	lsls	r3, r2, #30
 800bd9c:	680e      	ldr	r6, [r1, #0]
 800bd9e:	bf08      	it	eq
 800bda0:	694b      	ldreq	r3, [r1, #20]
 800bda2:	600f      	str	r7, [r1, #0]
 800bda4:	bf18      	it	ne
 800bda6:	2300      	movne	r3, #0
 800bda8:	eba6 0807 	sub.w	r8, r6, r7
 800bdac:	608b      	str	r3, [r1, #8]
 800bdae:	f1b8 0f00 	cmp.w	r8, #0
 800bdb2:	dd9c      	ble.n	800bcee <__sflush_r+0x1a>
 800bdb4:	6a21      	ldr	r1, [r4, #32]
 800bdb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdb8:	4643      	mov	r3, r8
 800bdba:	463a      	mov	r2, r7
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b0      	blx	r6
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	dc06      	bgt.n	800bdd2 <__sflush_r+0xfe>
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdca:	81a3      	strh	r3, [r4, #12]
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	e78e      	b.n	800bcf0 <__sflush_r+0x1c>
 800bdd2:	4407      	add	r7, r0
 800bdd4:	eba8 0800 	sub.w	r8, r8, r0
 800bdd8:	e7e9      	b.n	800bdae <__sflush_r+0xda>
 800bdda:	bf00      	nop
 800bddc:	20400001 	.word	0x20400001

0800bde0 <_fflush_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	690b      	ldr	r3, [r1, #16]
 800bde4:	4605      	mov	r5, r0
 800bde6:	460c      	mov	r4, r1
 800bde8:	b913      	cbnz	r3, 800bdf0 <_fflush_r+0x10>
 800bdea:	2500      	movs	r5, #0
 800bdec:	4628      	mov	r0, r5
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	b118      	cbz	r0, 800bdfa <_fflush_r+0x1a>
 800bdf2:	6983      	ldr	r3, [r0, #24]
 800bdf4:	b90b      	cbnz	r3, 800bdfa <_fflush_r+0x1a>
 800bdf6:	f7fe fa17 	bl	800a228 <__sinit>
 800bdfa:	4b14      	ldr	r3, [pc, #80]	; (800be4c <_fflush_r+0x6c>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	d11b      	bne.n	800be38 <_fflush_r+0x58>
 800be00:	686c      	ldr	r4, [r5, #4]
 800be02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0ef      	beq.n	800bdea <_fflush_r+0xa>
 800be0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be0c:	07d0      	lsls	r0, r2, #31
 800be0e:	d404      	bmi.n	800be1a <_fflush_r+0x3a>
 800be10:	0599      	lsls	r1, r3, #22
 800be12:	d402      	bmi.n	800be1a <_fflush_r+0x3a>
 800be14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be16:	f7fe faca 	bl	800a3ae <__retarget_lock_acquire_recursive>
 800be1a:	4628      	mov	r0, r5
 800be1c:	4621      	mov	r1, r4
 800be1e:	f7ff ff59 	bl	800bcd4 <__sflush_r>
 800be22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be24:	07da      	lsls	r2, r3, #31
 800be26:	4605      	mov	r5, r0
 800be28:	d4e0      	bmi.n	800bdec <_fflush_r+0xc>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	059b      	lsls	r3, r3, #22
 800be2e:	d4dd      	bmi.n	800bdec <_fflush_r+0xc>
 800be30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be32:	f7fe fabd 	bl	800a3b0 <__retarget_lock_release_recursive>
 800be36:	e7d9      	b.n	800bdec <_fflush_r+0xc>
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <_fflush_r+0x70>)
 800be3a:	429c      	cmp	r4, r3
 800be3c:	d101      	bne.n	800be42 <_fflush_r+0x62>
 800be3e:	68ac      	ldr	r4, [r5, #8]
 800be40:	e7df      	b.n	800be02 <_fflush_r+0x22>
 800be42:	4b04      	ldr	r3, [pc, #16]	; (800be54 <_fflush_r+0x74>)
 800be44:	429c      	cmp	r4, r3
 800be46:	bf08      	it	eq
 800be48:	68ec      	ldreq	r4, [r5, #12]
 800be4a:	e7da      	b.n	800be02 <_fflush_r+0x22>
 800be4c:	0800e5a4 	.word	0x0800e5a4
 800be50:	0800e5c4 	.word	0x0800e5c4
 800be54:	0800e584 	.word	0x0800e584

0800be58 <_localeconv_r>:
 800be58:	4800      	ldr	r0, [pc, #0]	; (800be5c <_localeconv_r+0x4>)
 800be5a:	4770      	bx	lr
 800be5c:	20000164 	.word	0x20000164

0800be60 <_lseek_r>:
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	4d07      	ldr	r5, [pc, #28]	; (800be80 <_lseek_r+0x20>)
 800be64:	4604      	mov	r4, r0
 800be66:	4608      	mov	r0, r1
 800be68:	4611      	mov	r1, r2
 800be6a:	2200      	movs	r2, #0
 800be6c:	602a      	str	r2, [r5, #0]
 800be6e:	461a      	mov	r2, r3
 800be70:	f7f6 faac 	bl	80023cc <_lseek>
 800be74:	1c43      	adds	r3, r0, #1
 800be76:	d102      	bne.n	800be7e <_lseek_r+0x1e>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	b103      	cbz	r3, 800be7e <_lseek_r+0x1e>
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	20001ed0 	.word	0x20001ed0

0800be84 <malloc>:
 800be84:	4b02      	ldr	r3, [pc, #8]	; (800be90 <malloc+0xc>)
 800be86:	4601      	mov	r1, r0
 800be88:	6818      	ldr	r0, [r3, #0]
 800be8a:	f7fe bac9 	b.w	800a420 <_malloc_r>
 800be8e:	bf00      	nop
 800be90:	20000010 	.word	0x20000010

0800be94 <__malloc_lock>:
 800be94:	4801      	ldr	r0, [pc, #4]	; (800be9c <__malloc_lock+0x8>)
 800be96:	f7fe ba8a 	b.w	800a3ae <__retarget_lock_acquire_recursive>
 800be9a:	bf00      	nop
 800be9c:	20001ec4 	.word	0x20001ec4

0800bea0 <__malloc_unlock>:
 800bea0:	4801      	ldr	r0, [pc, #4]	; (800bea8 <__malloc_unlock+0x8>)
 800bea2:	f7fe ba85 	b.w	800a3b0 <__retarget_lock_release_recursive>
 800bea6:	bf00      	nop
 800bea8:	20001ec4 	.word	0x20001ec4

0800beac <_Balloc>:
 800beac:	b570      	push	{r4, r5, r6, lr}
 800beae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800beb0:	4604      	mov	r4, r0
 800beb2:	460d      	mov	r5, r1
 800beb4:	b976      	cbnz	r6, 800bed4 <_Balloc+0x28>
 800beb6:	2010      	movs	r0, #16
 800beb8:	f7ff ffe4 	bl	800be84 <malloc>
 800bebc:	4602      	mov	r2, r0
 800bebe:	6260      	str	r0, [r4, #36]	; 0x24
 800bec0:	b920      	cbnz	r0, 800becc <_Balloc+0x20>
 800bec2:	4b18      	ldr	r3, [pc, #96]	; (800bf24 <_Balloc+0x78>)
 800bec4:	4818      	ldr	r0, [pc, #96]	; (800bf28 <_Balloc+0x7c>)
 800bec6:	2166      	movs	r1, #102	; 0x66
 800bec8:	f000 fd44 	bl	800c954 <__assert_func>
 800becc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bed0:	6006      	str	r6, [r0, #0]
 800bed2:	60c6      	str	r6, [r0, #12]
 800bed4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bed6:	68f3      	ldr	r3, [r6, #12]
 800bed8:	b183      	cbz	r3, 800befc <_Balloc+0x50>
 800beda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bee2:	b9b8      	cbnz	r0, 800bf14 <_Balloc+0x68>
 800bee4:	2101      	movs	r1, #1
 800bee6:	fa01 f605 	lsl.w	r6, r1, r5
 800beea:	1d72      	adds	r2, r6, #5
 800beec:	0092      	lsls	r2, r2, #2
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 fb60 	bl	800c5b4 <_calloc_r>
 800bef4:	b160      	cbz	r0, 800bf10 <_Balloc+0x64>
 800bef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800befa:	e00e      	b.n	800bf1a <_Balloc+0x6e>
 800befc:	2221      	movs	r2, #33	; 0x21
 800befe:	2104      	movs	r1, #4
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 fb57 	bl	800c5b4 <_calloc_r>
 800bf06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf08:	60f0      	str	r0, [r6, #12]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1e4      	bne.n	800beda <_Balloc+0x2e>
 800bf10:	2000      	movs	r0, #0
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
 800bf14:	6802      	ldr	r2, [r0, #0]
 800bf16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf20:	e7f7      	b.n	800bf12 <_Balloc+0x66>
 800bf22:	bf00      	nop
 800bf24:	0800e629 	.word	0x0800e629
 800bf28:	0800e6ac 	.word	0x0800e6ac

0800bf2c <_Bfree>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf30:	4605      	mov	r5, r0
 800bf32:	460c      	mov	r4, r1
 800bf34:	b976      	cbnz	r6, 800bf54 <_Bfree+0x28>
 800bf36:	2010      	movs	r0, #16
 800bf38:	f7ff ffa4 	bl	800be84 <malloc>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	6268      	str	r0, [r5, #36]	; 0x24
 800bf40:	b920      	cbnz	r0, 800bf4c <_Bfree+0x20>
 800bf42:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <_Bfree+0x3c>)
 800bf44:	4809      	ldr	r0, [pc, #36]	; (800bf6c <_Bfree+0x40>)
 800bf46:	218a      	movs	r1, #138	; 0x8a
 800bf48:	f000 fd04 	bl	800c954 <__assert_func>
 800bf4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf50:	6006      	str	r6, [r0, #0]
 800bf52:	60c6      	str	r6, [r0, #12]
 800bf54:	b13c      	cbz	r4, 800bf66 <_Bfree+0x3a>
 800bf56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf58:	6862      	ldr	r2, [r4, #4]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf60:	6021      	str	r1, [r4, #0]
 800bf62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf66:	bd70      	pop	{r4, r5, r6, pc}
 800bf68:	0800e629 	.word	0x0800e629
 800bf6c:	0800e6ac 	.word	0x0800e6ac

0800bf70 <__multadd>:
 800bf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf74:	690d      	ldr	r5, [r1, #16]
 800bf76:	4607      	mov	r7, r0
 800bf78:	460c      	mov	r4, r1
 800bf7a:	461e      	mov	r6, r3
 800bf7c:	f101 0c14 	add.w	ip, r1, #20
 800bf80:	2000      	movs	r0, #0
 800bf82:	f8dc 3000 	ldr.w	r3, [ip]
 800bf86:	b299      	uxth	r1, r3
 800bf88:	fb02 6101 	mla	r1, r2, r1, r6
 800bf8c:	0c1e      	lsrs	r6, r3, #16
 800bf8e:	0c0b      	lsrs	r3, r1, #16
 800bf90:	fb02 3306 	mla	r3, r2, r6, r3
 800bf94:	b289      	uxth	r1, r1
 800bf96:	3001      	adds	r0, #1
 800bf98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf9c:	4285      	cmp	r5, r0
 800bf9e:	f84c 1b04 	str.w	r1, [ip], #4
 800bfa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfa6:	dcec      	bgt.n	800bf82 <__multadd+0x12>
 800bfa8:	b30e      	cbz	r6, 800bfee <__multadd+0x7e>
 800bfaa:	68a3      	ldr	r3, [r4, #8]
 800bfac:	42ab      	cmp	r3, r5
 800bfae:	dc19      	bgt.n	800bfe4 <__multadd+0x74>
 800bfb0:	6861      	ldr	r1, [r4, #4]
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	3101      	adds	r1, #1
 800bfb6:	f7ff ff79 	bl	800beac <_Balloc>
 800bfba:	4680      	mov	r8, r0
 800bfbc:	b928      	cbnz	r0, 800bfca <__multadd+0x5a>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	4b0c      	ldr	r3, [pc, #48]	; (800bff4 <__multadd+0x84>)
 800bfc2:	480d      	ldr	r0, [pc, #52]	; (800bff8 <__multadd+0x88>)
 800bfc4:	21b5      	movs	r1, #181	; 0xb5
 800bfc6:	f000 fcc5 	bl	800c954 <__assert_func>
 800bfca:	6922      	ldr	r2, [r4, #16]
 800bfcc:	3202      	adds	r2, #2
 800bfce:	f104 010c 	add.w	r1, r4, #12
 800bfd2:	0092      	lsls	r2, r2, #2
 800bfd4:	300c      	adds	r0, #12
 800bfd6:	f7fe f9ec 	bl	800a3b2 <memcpy>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4638      	mov	r0, r7
 800bfde:	f7ff ffa5 	bl	800bf2c <_Bfree>
 800bfe2:	4644      	mov	r4, r8
 800bfe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfe8:	3501      	adds	r5, #1
 800bfea:	615e      	str	r6, [r3, #20]
 800bfec:	6125      	str	r5, [r4, #16]
 800bfee:	4620      	mov	r0, r4
 800bff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff4:	0800e69b 	.word	0x0800e69b
 800bff8:	0800e6ac 	.word	0x0800e6ac

0800bffc <__hi0bits>:
 800bffc:	0c03      	lsrs	r3, r0, #16
 800bffe:	041b      	lsls	r3, r3, #16
 800c000:	b9d3      	cbnz	r3, 800c038 <__hi0bits+0x3c>
 800c002:	0400      	lsls	r0, r0, #16
 800c004:	2310      	movs	r3, #16
 800c006:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c00a:	bf04      	itt	eq
 800c00c:	0200      	lsleq	r0, r0, #8
 800c00e:	3308      	addeq	r3, #8
 800c010:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c014:	bf04      	itt	eq
 800c016:	0100      	lsleq	r0, r0, #4
 800c018:	3304      	addeq	r3, #4
 800c01a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c01e:	bf04      	itt	eq
 800c020:	0080      	lsleq	r0, r0, #2
 800c022:	3302      	addeq	r3, #2
 800c024:	2800      	cmp	r0, #0
 800c026:	db05      	blt.n	800c034 <__hi0bits+0x38>
 800c028:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c02c:	f103 0301 	add.w	r3, r3, #1
 800c030:	bf08      	it	eq
 800c032:	2320      	moveq	r3, #32
 800c034:	4618      	mov	r0, r3
 800c036:	4770      	bx	lr
 800c038:	2300      	movs	r3, #0
 800c03a:	e7e4      	b.n	800c006 <__hi0bits+0xa>

0800c03c <__lo0bits>:
 800c03c:	6803      	ldr	r3, [r0, #0]
 800c03e:	f013 0207 	ands.w	r2, r3, #7
 800c042:	4601      	mov	r1, r0
 800c044:	d00b      	beq.n	800c05e <__lo0bits+0x22>
 800c046:	07da      	lsls	r2, r3, #31
 800c048:	d423      	bmi.n	800c092 <__lo0bits+0x56>
 800c04a:	0798      	lsls	r0, r3, #30
 800c04c:	bf49      	itett	mi
 800c04e:	085b      	lsrmi	r3, r3, #1
 800c050:	089b      	lsrpl	r3, r3, #2
 800c052:	2001      	movmi	r0, #1
 800c054:	600b      	strmi	r3, [r1, #0]
 800c056:	bf5c      	itt	pl
 800c058:	600b      	strpl	r3, [r1, #0]
 800c05a:	2002      	movpl	r0, #2
 800c05c:	4770      	bx	lr
 800c05e:	b298      	uxth	r0, r3
 800c060:	b9a8      	cbnz	r0, 800c08e <__lo0bits+0x52>
 800c062:	0c1b      	lsrs	r3, r3, #16
 800c064:	2010      	movs	r0, #16
 800c066:	b2da      	uxtb	r2, r3
 800c068:	b90a      	cbnz	r2, 800c06e <__lo0bits+0x32>
 800c06a:	3008      	adds	r0, #8
 800c06c:	0a1b      	lsrs	r3, r3, #8
 800c06e:	071a      	lsls	r2, r3, #28
 800c070:	bf04      	itt	eq
 800c072:	091b      	lsreq	r3, r3, #4
 800c074:	3004      	addeq	r0, #4
 800c076:	079a      	lsls	r2, r3, #30
 800c078:	bf04      	itt	eq
 800c07a:	089b      	lsreq	r3, r3, #2
 800c07c:	3002      	addeq	r0, #2
 800c07e:	07da      	lsls	r2, r3, #31
 800c080:	d403      	bmi.n	800c08a <__lo0bits+0x4e>
 800c082:	085b      	lsrs	r3, r3, #1
 800c084:	f100 0001 	add.w	r0, r0, #1
 800c088:	d005      	beq.n	800c096 <__lo0bits+0x5a>
 800c08a:	600b      	str	r3, [r1, #0]
 800c08c:	4770      	bx	lr
 800c08e:	4610      	mov	r0, r2
 800c090:	e7e9      	b.n	800c066 <__lo0bits+0x2a>
 800c092:	2000      	movs	r0, #0
 800c094:	4770      	bx	lr
 800c096:	2020      	movs	r0, #32
 800c098:	4770      	bx	lr
	...

0800c09c <__i2b>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	460c      	mov	r4, r1
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	f7ff ff03 	bl	800beac <_Balloc>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	b928      	cbnz	r0, 800c0b6 <__i2b+0x1a>
 800c0aa:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <__i2b+0x24>)
 800c0ac:	4805      	ldr	r0, [pc, #20]	; (800c0c4 <__i2b+0x28>)
 800c0ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0b2:	f000 fc4f 	bl	800c954 <__assert_func>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	6144      	str	r4, [r0, #20]
 800c0ba:	6103      	str	r3, [r0, #16]
 800c0bc:	bd10      	pop	{r4, pc}
 800c0be:	bf00      	nop
 800c0c0:	0800e69b 	.word	0x0800e69b
 800c0c4:	0800e6ac 	.word	0x0800e6ac

0800c0c8 <__multiply>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4691      	mov	r9, r2
 800c0ce:	690a      	ldr	r2, [r1, #16]
 800c0d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	bfb8      	it	lt
 800c0d8:	460b      	movlt	r3, r1
 800c0da:	460c      	mov	r4, r1
 800c0dc:	bfbc      	itt	lt
 800c0de:	464c      	movlt	r4, r9
 800c0e0:	4699      	movlt	r9, r3
 800c0e2:	6927      	ldr	r7, [r4, #16]
 800c0e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	6861      	ldr	r1, [r4, #4]
 800c0ec:	eb07 060a 	add.w	r6, r7, sl
 800c0f0:	42b3      	cmp	r3, r6
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	bfb8      	it	lt
 800c0f6:	3101      	addlt	r1, #1
 800c0f8:	f7ff fed8 	bl	800beac <_Balloc>
 800c0fc:	b930      	cbnz	r0, 800c10c <__multiply+0x44>
 800c0fe:	4602      	mov	r2, r0
 800c100:	4b44      	ldr	r3, [pc, #272]	; (800c214 <__multiply+0x14c>)
 800c102:	4845      	ldr	r0, [pc, #276]	; (800c218 <__multiply+0x150>)
 800c104:	f240 115d 	movw	r1, #349	; 0x15d
 800c108:	f000 fc24 	bl	800c954 <__assert_func>
 800c10c:	f100 0514 	add.w	r5, r0, #20
 800c110:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c114:	462b      	mov	r3, r5
 800c116:	2200      	movs	r2, #0
 800c118:	4543      	cmp	r3, r8
 800c11a:	d321      	bcc.n	800c160 <__multiply+0x98>
 800c11c:	f104 0314 	add.w	r3, r4, #20
 800c120:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c124:	f109 0314 	add.w	r3, r9, #20
 800c128:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c12c:	9202      	str	r2, [sp, #8]
 800c12e:	1b3a      	subs	r2, r7, r4
 800c130:	3a15      	subs	r2, #21
 800c132:	f022 0203 	bic.w	r2, r2, #3
 800c136:	3204      	adds	r2, #4
 800c138:	f104 0115 	add.w	r1, r4, #21
 800c13c:	428f      	cmp	r7, r1
 800c13e:	bf38      	it	cc
 800c140:	2204      	movcc	r2, #4
 800c142:	9201      	str	r2, [sp, #4]
 800c144:	9a02      	ldr	r2, [sp, #8]
 800c146:	9303      	str	r3, [sp, #12]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d80c      	bhi.n	800c166 <__multiply+0x9e>
 800c14c:	2e00      	cmp	r6, #0
 800c14e:	dd03      	ble.n	800c158 <__multiply+0x90>
 800c150:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c154:	2b00      	cmp	r3, #0
 800c156:	d05a      	beq.n	800c20e <__multiply+0x146>
 800c158:	6106      	str	r6, [r0, #16]
 800c15a:	b005      	add	sp, #20
 800c15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c160:	f843 2b04 	str.w	r2, [r3], #4
 800c164:	e7d8      	b.n	800c118 <__multiply+0x50>
 800c166:	f8b3 a000 	ldrh.w	sl, [r3]
 800c16a:	f1ba 0f00 	cmp.w	sl, #0
 800c16e:	d024      	beq.n	800c1ba <__multiply+0xf2>
 800c170:	f104 0e14 	add.w	lr, r4, #20
 800c174:	46a9      	mov	r9, r5
 800c176:	f04f 0c00 	mov.w	ip, #0
 800c17a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c17e:	f8d9 1000 	ldr.w	r1, [r9]
 800c182:	fa1f fb82 	uxth.w	fp, r2
 800c186:	b289      	uxth	r1, r1
 800c188:	fb0a 110b 	mla	r1, sl, fp, r1
 800c18c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c190:	f8d9 2000 	ldr.w	r2, [r9]
 800c194:	4461      	add	r1, ip
 800c196:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c19a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c19e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1a2:	b289      	uxth	r1, r1
 800c1a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1a8:	4577      	cmp	r7, lr
 800c1aa:	f849 1b04 	str.w	r1, [r9], #4
 800c1ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1b2:	d8e2      	bhi.n	800c17a <__multiply+0xb2>
 800c1b4:	9a01      	ldr	r2, [sp, #4]
 800c1b6:	f845 c002 	str.w	ip, [r5, r2]
 800c1ba:	9a03      	ldr	r2, [sp, #12]
 800c1bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	f1b9 0f00 	cmp.w	r9, #0
 800c1c6:	d020      	beq.n	800c20a <__multiply+0x142>
 800c1c8:	6829      	ldr	r1, [r5, #0]
 800c1ca:	f104 0c14 	add.w	ip, r4, #20
 800c1ce:	46ae      	mov	lr, r5
 800c1d0:	f04f 0a00 	mov.w	sl, #0
 800c1d4:	f8bc b000 	ldrh.w	fp, [ip]
 800c1d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c1dc:	fb09 220b 	mla	r2, r9, fp, r2
 800c1e0:	4492      	add	sl, r2
 800c1e2:	b289      	uxth	r1, r1
 800c1e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c1e8:	f84e 1b04 	str.w	r1, [lr], #4
 800c1ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1f0:	f8be 1000 	ldrh.w	r1, [lr]
 800c1f4:	0c12      	lsrs	r2, r2, #16
 800c1f6:	fb09 1102 	mla	r1, r9, r2, r1
 800c1fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1fe:	4567      	cmp	r7, ip
 800c200:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c204:	d8e6      	bhi.n	800c1d4 <__multiply+0x10c>
 800c206:	9a01      	ldr	r2, [sp, #4]
 800c208:	50a9      	str	r1, [r5, r2]
 800c20a:	3504      	adds	r5, #4
 800c20c:	e79a      	b.n	800c144 <__multiply+0x7c>
 800c20e:	3e01      	subs	r6, #1
 800c210:	e79c      	b.n	800c14c <__multiply+0x84>
 800c212:	bf00      	nop
 800c214:	0800e69b 	.word	0x0800e69b
 800c218:	0800e6ac 	.word	0x0800e6ac

0800c21c <__pow5mult>:
 800c21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c220:	4615      	mov	r5, r2
 800c222:	f012 0203 	ands.w	r2, r2, #3
 800c226:	4606      	mov	r6, r0
 800c228:	460f      	mov	r7, r1
 800c22a:	d007      	beq.n	800c23c <__pow5mult+0x20>
 800c22c:	4c25      	ldr	r4, [pc, #148]	; (800c2c4 <__pow5mult+0xa8>)
 800c22e:	3a01      	subs	r2, #1
 800c230:	2300      	movs	r3, #0
 800c232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c236:	f7ff fe9b 	bl	800bf70 <__multadd>
 800c23a:	4607      	mov	r7, r0
 800c23c:	10ad      	asrs	r5, r5, #2
 800c23e:	d03d      	beq.n	800c2bc <__pow5mult+0xa0>
 800c240:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c242:	b97c      	cbnz	r4, 800c264 <__pow5mult+0x48>
 800c244:	2010      	movs	r0, #16
 800c246:	f7ff fe1d 	bl	800be84 <malloc>
 800c24a:	4602      	mov	r2, r0
 800c24c:	6270      	str	r0, [r6, #36]	; 0x24
 800c24e:	b928      	cbnz	r0, 800c25c <__pow5mult+0x40>
 800c250:	4b1d      	ldr	r3, [pc, #116]	; (800c2c8 <__pow5mult+0xac>)
 800c252:	481e      	ldr	r0, [pc, #120]	; (800c2cc <__pow5mult+0xb0>)
 800c254:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c258:	f000 fb7c 	bl	800c954 <__assert_func>
 800c25c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c260:	6004      	str	r4, [r0, #0]
 800c262:	60c4      	str	r4, [r0, #12]
 800c264:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c268:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c26c:	b94c      	cbnz	r4, 800c282 <__pow5mult+0x66>
 800c26e:	f240 2171 	movw	r1, #625	; 0x271
 800c272:	4630      	mov	r0, r6
 800c274:	f7ff ff12 	bl	800c09c <__i2b>
 800c278:	2300      	movs	r3, #0
 800c27a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c27e:	4604      	mov	r4, r0
 800c280:	6003      	str	r3, [r0, #0]
 800c282:	f04f 0900 	mov.w	r9, #0
 800c286:	07eb      	lsls	r3, r5, #31
 800c288:	d50a      	bpl.n	800c2a0 <__pow5mult+0x84>
 800c28a:	4639      	mov	r1, r7
 800c28c:	4622      	mov	r2, r4
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff ff1a 	bl	800c0c8 <__multiply>
 800c294:	4639      	mov	r1, r7
 800c296:	4680      	mov	r8, r0
 800c298:	4630      	mov	r0, r6
 800c29a:	f7ff fe47 	bl	800bf2c <_Bfree>
 800c29e:	4647      	mov	r7, r8
 800c2a0:	106d      	asrs	r5, r5, #1
 800c2a2:	d00b      	beq.n	800c2bc <__pow5mult+0xa0>
 800c2a4:	6820      	ldr	r0, [r4, #0]
 800c2a6:	b938      	cbnz	r0, 800c2b8 <__pow5mult+0x9c>
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	f7ff ff0b 	bl	800c0c8 <__multiply>
 800c2b2:	6020      	str	r0, [r4, #0]
 800c2b4:	f8c0 9000 	str.w	r9, [r0]
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	e7e4      	b.n	800c286 <__pow5mult+0x6a>
 800c2bc:	4638      	mov	r0, r7
 800c2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0800e7f8 	.word	0x0800e7f8
 800c2c8:	0800e629 	.word	0x0800e629
 800c2cc:	0800e6ac 	.word	0x0800e6ac

0800c2d0 <__lshift>:
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	6849      	ldr	r1, [r1, #4]
 800c2d8:	6923      	ldr	r3, [r4, #16]
 800c2da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	4607      	mov	r7, r0
 800c2e2:	4691      	mov	r9, r2
 800c2e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2e8:	f108 0601 	add.w	r6, r8, #1
 800c2ec:	42b3      	cmp	r3, r6
 800c2ee:	db0b      	blt.n	800c308 <__lshift+0x38>
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	f7ff fddb 	bl	800beac <_Balloc>
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	b948      	cbnz	r0, 800c30e <__lshift+0x3e>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	4b2a      	ldr	r3, [pc, #168]	; (800c3a8 <__lshift+0xd8>)
 800c2fe:	482b      	ldr	r0, [pc, #172]	; (800c3ac <__lshift+0xdc>)
 800c300:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c304:	f000 fb26 	bl	800c954 <__assert_func>
 800c308:	3101      	adds	r1, #1
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	e7ee      	b.n	800c2ec <__lshift+0x1c>
 800c30e:	2300      	movs	r3, #0
 800c310:	f100 0114 	add.w	r1, r0, #20
 800c314:	f100 0210 	add.w	r2, r0, #16
 800c318:	4618      	mov	r0, r3
 800c31a:	4553      	cmp	r3, sl
 800c31c:	db37      	blt.n	800c38e <__lshift+0xbe>
 800c31e:	6920      	ldr	r0, [r4, #16]
 800c320:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c324:	f104 0314 	add.w	r3, r4, #20
 800c328:	f019 091f 	ands.w	r9, r9, #31
 800c32c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c330:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c334:	d02f      	beq.n	800c396 <__lshift+0xc6>
 800c336:	f1c9 0e20 	rsb	lr, r9, #32
 800c33a:	468a      	mov	sl, r1
 800c33c:	f04f 0c00 	mov.w	ip, #0
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	fa02 f209 	lsl.w	r2, r2, r9
 800c346:	ea42 020c 	orr.w	r2, r2, ip
 800c34a:	f84a 2b04 	str.w	r2, [sl], #4
 800c34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c352:	4298      	cmp	r0, r3
 800c354:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c358:	d8f2      	bhi.n	800c340 <__lshift+0x70>
 800c35a:	1b03      	subs	r3, r0, r4
 800c35c:	3b15      	subs	r3, #21
 800c35e:	f023 0303 	bic.w	r3, r3, #3
 800c362:	3304      	adds	r3, #4
 800c364:	f104 0215 	add.w	r2, r4, #21
 800c368:	4290      	cmp	r0, r2
 800c36a:	bf38      	it	cc
 800c36c:	2304      	movcc	r3, #4
 800c36e:	f841 c003 	str.w	ip, [r1, r3]
 800c372:	f1bc 0f00 	cmp.w	ip, #0
 800c376:	d001      	beq.n	800c37c <__lshift+0xac>
 800c378:	f108 0602 	add.w	r6, r8, #2
 800c37c:	3e01      	subs	r6, #1
 800c37e:	4638      	mov	r0, r7
 800c380:	612e      	str	r6, [r5, #16]
 800c382:	4621      	mov	r1, r4
 800c384:	f7ff fdd2 	bl	800bf2c <_Bfree>
 800c388:	4628      	mov	r0, r5
 800c38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c392:	3301      	adds	r3, #1
 800c394:	e7c1      	b.n	800c31a <__lshift+0x4a>
 800c396:	3904      	subs	r1, #4
 800c398:	f853 2b04 	ldr.w	r2, [r3], #4
 800c39c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	d8f9      	bhi.n	800c398 <__lshift+0xc8>
 800c3a4:	e7ea      	b.n	800c37c <__lshift+0xac>
 800c3a6:	bf00      	nop
 800c3a8:	0800e69b 	.word	0x0800e69b
 800c3ac:	0800e6ac 	.word	0x0800e6ac

0800c3b0 <__mcmp>:
 800c3b0:	b530      	push	{r4, r5, lr}
 800c3b2:	6902      	ldr	r2, [r0, #16]
 800c3b4:	690c      	ldr	r4, [r1, #16]
 800c3b6:	1b12      	subs	r2, r2, r4
 800c3b8:	d10e      	bne.n	800c3d8 <__mcmp+0x28>
 800c3ba:	f100 0314 	add.w	r3, r0, #20
 800c3be:	3114      	adds	r1, #20
 800c3c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c3c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c3cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3d0:	42a5      	cmp	r5, r4
 800c3d2:	d003      	beq.n	800c3dc <__mcmp+0x2c>
 800c3d4:	d305      	bcc.n	800c3e2 <__mcmp+0x32>
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	4610      	mov	r0, r2
 800c3da:	bd30      	pop	{r4, r5, pc}
 800c3dc:	4283      	cmp	r3, r0
 800c3de:	d3f3      	bcc.n	800c3c8 <__mcmp+0x18>
 800c3e0:	e7fa      	b.n	800c3d8 <__mcmp+0x28>
 800c3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e6:	e7f7      	b.n	800c3d8 <__mcmp+0x28>

0800c3e8 <__mdiff>:
 800c3e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	460c      	mov	r4, r1
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	4690      	mov	r8, r2
 800c3f6:	f7ff ffdb 	bl	800c3b0 <__mcmp>
 800c3fa:	1e05      	subs	r5, r0, #0
 800c3fc:	d110      	bne.n	800c420 <__mdiff+0x38>
 800c3fe:	4629      	mov	r1, r5
 800c400:	4630      	mov	r0, r6
 800c402:	f7ff fd53 	bl	800beac <_Balloc>
 800c406:	b930      	cbnz	r0, 800c416 <__mdiff+0x2e>
 800c408:	4b3a      	ldr	r3, [pc, #232]	; (800c4f4 <__mdiff+0x10c>)
 800c40a:	4602      	mov	r2, r0
 800c40c:	f240 2132 	movw	r1, #562	; 0x232
 800c410:	4839      	ldr	r0, [pc, #228]	; (800c4f8 <__mdiff+0x110>)
 800c412:	f000 fa9f 	bl	800c954 <__assert_func>
 800c416:	2301      	movs	r3, #1
 800c418:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c41c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c420:	bfa4      	itt	ge
 800c422:	4643      	movge	r3, r8
 800c424:	46a0      	movge	r8, r4
 800c426:	4630      	mov	r0, r6
 800c428:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c42c:	bfa6      	itte	ge
 800c42e:	461c      	movge	r4, r3
 800c430:	2500      	movge	r5, #0
 800c432:	2501      	movlt	r5, #1
 800c434:	f7ff fd3a 	bl	800beac <_Balloc>
 800c438:	b920      	cbnz	r0, 800c444 <__mdiff+0x5c>
 800c43a:	4b2e      	ldr	r3, [pc, #184]	; (800c4f4 <__mdiff+0x10c>)
 800c43c:	4602      	mov	r2, r0
 800c43e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c442:	e7e5      	b.n	800c410 <__mdiff+0x28>
 800c444:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c448:	6926      	ldr	r6, [r4, #16]
 800c44a:	60c5      	str	r5, [r0, #12]
 800c44c:	f104 0914 	add.w	r9, r4, #20
 800c450:	f108 0514 	add.w	r5, r8, #20
 800c454:	f100 0e14 	add.w	lr, r0, #20
 800c458:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c45c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c460:	f108 0210 	add.w	r2, r8, #16
 800c464:	46f2      	mov	sl, lr
 800c466:	2100      	movs	r1, #0
 800c468:	f859 3b04 	ldr.w	r3, [r9], #4
 800c46c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c470:	fa1f f883 	uxth.w	r8, r3
 800c474:	fa11 f18b 	uxtah	r1, r1, fp
 800c478:	0c1b      	lsrs	r3, r3, #16
 800c47a:	eba1 0808 	sub.w	r8, r1, r8
 800c47e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c482:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c486:	fa1f f888 	uxth.w	r8, r8
 800c48a:	1419      	asrs	r1, r3, #16
 800c48c:	454e      	cmp	r6, r9
 800c48e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c492:	f84a 3b04 	str.w	r3, [sl], #4
 800c496:	d8e7      	bhi.n	800c468 <__mdiff+0x80>
 800c498:	1b33      	subs	r3, r6, r4
 800c49a:	3b15      	subs	r3, #21
 800c49c:	f023 0303 	bic.w	r3, r3, #3
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	3415      	adds	r4, #21
 800c4a4:	42a6      	cmp	r6, r4
 800c4a6:	bf38      	it	cc
 800c4a8:	2304      	movcc	r3, #4
 800c4aa:	441d      	add	r5, r3
 800c4ac:	4473      	add	r3, lr
 800c4ae:	469e      	mov	lr, r3
 800c4b0:	462e      	mov	r6, r5
 800c4b2:	4566      	cmp	r6, ip
 800c4b4:	d30e      	bcc.n	800c4d4 <__mdiff+0xec>
 800c4b6:	f10c 0203 	add.w	r2, ip, #3
 800c4ba:	1b52      	subs	r2, r2, r5
 800c4bc:	f022 0203 	bic.w	r2, r2, #3
 800c4c0:	3d03      	subs	r5, #3
 800c4c2:	45ac      	cmp	ip, r5
 800c4c4:	bf38      	it	cc
 800c4c6:	2200      	movcc	r2, #0
 800c4c8:	441a      	add	r2, r3
 800c4ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c4ce:	b17b      	cbz	r3, 800c4f0 <__mdiff+0x108>
 800c4d0:	6107      	str	r7, [r0, #16]
 800c4d2:	e7a3      	b.n	800c41c <__mdiff+0x34>
 800c4d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c4d8:	fa11 f288 	uxtah	r2, r1, r8
 800c4dc:	1414      	asrs	r4, r2, #16
 800c4de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c4e2:	b292      	uxth	r2, r2
 800c4e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c4e8:	f84e 2b04 	str.w	r2, [lr], #4
 800c4ec:	1421      	asrs	r1, r4, #16
 800c4ee:	e7e0      	b.n	800c4b2 <__mdiff+0xca>
 800c4f0:	3f01      	subs	r7, #1
 800c4f2:	e7ea      	b.n	800c4ca <__mdiff+0xe2>
 800c4f4:	0800e69b 	.word	0x0800e69b
 800c4f8:	0800e6ac 	.word	0x0800e6ac

0800c4fc <__d2b>:
 800c4fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c500:	4689      	mov	r9, r1
 800c502:	2101      	movs	r1, #1
 800c504:	ec57 6b10 	vmov	r6, r7, d0
 800c508:	4690      	mov	r8, r2
 800c50a:	f7ff fccf 	bl	800beac <_Balloc>
 800c50e:	4604      	mov	r4, r0
 800c510:	b930      	cbnz	r0, 800c520 <__d2b+0x24>
 800c512:	4602      	mov	r2, r0
 800c514:	4b25      	ldr	r3, [pc, #148]	; (800c5ac <__d2b+0xb0>)
 800c516:	4826      	ldr	r0, [pc, #152]	; (800c5b0 <__d2b+0xb4>)
 800c518:	f240 310a 	movw	r1, #778	; 0x30a
 800c51c:	f000 fa1a 	bl	800c954 <__assert_func>
 800c520:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c524:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c528:	bb35      	cbnz	r5, 800c578 <__d2b+0x7c>
 800c52a:	2e00      	cmp	r6, #0
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	d028      	beq.n	800c582 <__d2b+0x86>
 800c530:	4668      	mov	r0, sp
 800c532:	9600      	str	r6, [sp, #0]
 800c534:	f7ff fd82 	bl	800c03c <__lo0bits>
 800c538:	9900      	ldr	r1, [sp, #0]
 800c53a:	b300      	cbz	r0, 800c57e <__d2b+0x82>
 800c53c:	9a01      	ldr	r2, [sp, #4]
 800c53e:	f1c0 0320 	rsb	r3, r0, #32
 800c542:	fa02 f303 	lsl.w	r3, r2, r3
 800c546:	430b      	orrs	r3, r1
 800c548:	40c2      	lsrs	r2, r0
 800c54a:	6163      	str	r3, [r4, #20]
 800c54c:	9201      	str	r2, [sp, #4]
 800c54e:	9b01      	ldr	r3, [sp, #4]
 800c550:	61a3      	str	r3, [r4, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	bf14      	ite	ne
 800c556:	2202      	movne	r2, #2
 800c558:	2201      	moveq	r2, #1
 800c55a:	6122      	str	r2, [r4, #16]
 800c55c:	b1d5      	cbz	r5, 800c594 <__d2b+0x98>
 800c55e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c562:	4405      	add	r5, r0
 800c564:	f8c9 5000 	str.w	r5, [r9]
 800c568:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c56c:	f8c8 0000 	str.w	r0, [r8]
 800c570:	4620      	mov	r0, r4
 800c572:	b003      	add	sp, #12
 800c574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c57c:	e7d5      	b.n	800c52a <__d2b+0x2e>
 800c57e:	6161      	str	r1, [r4, #20]
 800c580:	e7e5      	b.n	800c54e <__d2b+0x52>
 800c582:	a801      	add	r0, sp, #4
 800c584:	f7ff fd5a 	bl	800c03c <__lo0bits>
 800c588:	9b01      	ldr	r3, [sp, #4]
 800c58a:	6163      	str	r3, [r4, #20]
 800c58c:	2201      	movs	r2, #1
 800c58e:	6122      	str	r2, [r4, #16]
 800c590:	3020      	adds	r0, #32
 800c592:	e7e3      	b.n	800c55c <__d2b+0x60>
 800c594:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c598:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c59c:	f8c9 0000 	str.w	r0, [r9]
 800c5a0:	6918      	ldr	r0, [r3, #16]
 800c5a2:	f7ff fd2b 	bl	800bffc <__hi0bits>
 800c5a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5aa:	e7df      	b.n	800c56c <__d2b+0x70>
 800c5ac:	0800e69b 	.word	0x0800e69b
 800c5b0:	0800e6ac 	.word	0x0800e6ac

0800c5b4 <_calloc_r>:
 800c5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5b6:	fba1 2402 	umull	r2, r4, r1, r2
 800c5ba:	b94c      	cbnz	r4, 800c5d0 <_calloc_r+0x1c>
 800c5bc:	4611      	mov	r1, r2
 800c5be:	9201      	str	r2, [sp, #4]
 800c5c0:	f7fd ff2e 	bl	800a420 <_malloc_r>
 800c5c4:	9a01      	ldr	r2, [sp, #4]
 800c5c6:	4605      	mov	r5, r0
 800c5c8:	b930      	cbnz	r0, 800c5d8 <_calloc_r+0x24>
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	b003      	add	sp, #12
 800c5ce:	bd30      	pop	{r4, r5, pc}
 800c5d0:	220c      	movs	r2, #12
 800c5d2:	6002      	str	r2, [r0, #0]
 800c5d4:	2500      	movs	r5, #0
 800c5d6:	e7f8      	b.n	800c5ca <_calloc_r+0x16>
 800c5d8:	4621      	mov	r1, r4
 800c5da:	f7fd fef8 	bl	800a3ce <memset>
 800c5de:	e7f4      	b.n	800c5ca <_calloc_r+0x16>

0800c5e0 <_free_r>:
 800c5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5e2:	2900      	cmp	r1, #0
 800c5e4:	d044      	beq.n	800c670 <_free_r+0x90>
 800c5e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ea:	9001      	str	r0, [sp, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f1a1 0404 	sub.w	r4, r1, #4
 800c5f2:	bfb8      	it	lt
 800c5f4:	18e4      	addlt	r4, r4, r3
 800c5f6:	f7ff fc4d 	bl	800be94 <__malloc_lock>
 800c5fa:	4a1e      	ldr	r2, [pc, #120]	; (800c674 <_free_r+0x94>)
 800c5fc:	9801      	ldr	r0, [sp, #4]
 800c5fe:	6813      	ldr	r3, [r2, #0]
 800c600:	b933      	cbnz	r3, 800c610 <_free_r+0x30>
 800c602:	6063      	str	r3, [r4, #4]
 800c604:	6014      	str	r4, [r2, #0]
 800c606:	b003      	add	sp, #12
 800c608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c60c:	f7ff bc48 	b.w	800bea0 <__malloc_unlock>
 800c610:	42a3      	cmp	r3, r4
 800c612:	d908      	bls.n	800c626 <_free_r+0x46>
 800c614:	6825      	ldr	r5, [r4, #0]
 800c616:	1961      	adds	r1, r4, r5
 800c618:	428b      	cmp	r3, r1
 800c61a:	bf01      	itttt	eq
 800c61c:	6819      	ldreq	r1, [r3, #0]
 800c61e:	685b      	ldreq	r3, [r3, #4]
 800c620:	1949      	addeq	r1, r1, r5
 800c622:	6021      	streq	r1, [r4, #0]
 800c624:	e7ed      	b.n	800c602 <_free_r+0x22>
 800c626:	461a      	mov	r2, r3
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	b10b      	cbz	r3, 800c630 <_free_r+0x50>
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	d9fa      	bls.n	800c626 <_free_r+0x46>
 800c630:	6811      	ldr	r1, [r2, #0]
 800c632:	1855      	adds	r5, r2, r1
 800c634:	42a5      	cmp	r5, r4
 800c636:	d10b      	bne.n	800c650 <_free_r+0x70>
 800c638:	6824      	ldr	r4, [r4, #0]
 800c63a:	4421      	add	r1, r4
 800c63c:	1854      	adds	r4, r2, r1
 800c63e:	42a3      	cmp	r3, r4
 800c640:	6011      	str	r1, [r2, #0]
 800c642:	d1e0      	bne.n	800c606 <_free_r+0x26>
 800c644:	681c      	ldr	r4, [r3, #0]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	6053      	str	r3, [r2, #4]
 800c64a:	4421      	add	r1, r4
 800c64c:	6011      	str	r1, [r2, #0]
 800c64e:	e7da      	b.n	800c606 <_free_r+0x26>
 800c650:	d902      	bls.n	800c658 <_free_r+0x78>
 800c652:	230c      	movs	r3, #12
 800c654:	6003      	str	r3, [r0, #0]
 800c656:	e7d6      	b.n	800c606 <_free_r+0x26>
 800c658:	6825      	ldr	r5, [r4, #0]
 800c65a:	1961      	adds	r1, r4, r5
 800c65c:	428b      	cmp	r3, r1
 800c65e:	bf04      	itt	eq
 800c660:	6819      	ldreq	r1, [r3, #0]
 800c662:	685b      	ldreq	r3, [r3, #4]
 800c664:	6063      	str	r3, [r4, #4]
 800c666:	bf04      	itt	eq
 800c668:	1949      	addeq	r1, r1, r5
 800c66a:	6021      	streq	r1, [r4, #0]
 800c66c:	6054      	str	r4, [r2, #4]
 800c66e:	e7ca      	b.n	800c606 <_free_r+0x26>
 800c670:	b003      	add	sp, #12
 800c672:	bd30      	pop	{r4, r5, pc}
 800c674:	20001ec8 	.word	0x20001ec8

0800c678 <__ssputs_r>:
 800c678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c67c:	688e      	ldr	r6, [r1, #8]
 800c67e:	429e      	cmp	r6, r3
 800c680:	4682      	mov	sl, r0
 800c682:	460c      	mov	r4, r1
 800c684:	4690      	mov	r8, r2
 800c686:	461f      	mov	r7, r3
 800c688:	d838      	bhi.n	800c6fc <__ssputs_r+0x84>
 800c68a:	898a      	ldrh	r2, [r1, #12]
 800c68c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c690:	d032      	beq.n	800c6f8 <__ssputs_r+0x80>
 800c692:	6825      	ldr	r5, [r4, #0]
 800c694:	6909      	ldr	r1, [r1, #16]
 800c696:	eba5 0901 	sub.w	r9, r5, r1
 800c69a:	6965      	ldr	r5, [r4, #20]
 800c69c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	444b      	add	r3, r9
 800c6a8:	106d      	asrs	r5, r5, #1
 800c6aa:	429d      	cmp	r5, r3
 800c6ac:	bf38      	it	cc
 800c6ae:	461d      	movcc	r5, r3
 800c6b0:	0553      	lsls	r3, r2, #21
 800c6b2:	d531      	bpl.n	800c718 <__ssputs_r+0xa0>
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	f7fd feb3 	bl	800a420 <_malloc_r>
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	b950      	cbnz	r0, 800c6d4 <__ssputs_r+0x5c>
 800c6be:	230c      	movs	r3, #12
 800c6c0:	f8ca 3000 	str.w	r3, [sl]
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d4:	6921      	ldr	r1, [r4, #16]
 800c6d6:	464a      	mov	r2, r9
 800c6d8:	f7fd fe6b 	bl	800a3b2 <memcpy>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	6126      	str	r6, [r4, #16]
 800c6ea:	6165      	str	r5, [r4, #20]
 800c6ec:	444e      	add	r6, r9
 800c6ee:	eba5 0509 	sub.w	r5, r5, r9
 800c6f2:	6026      	str	r6, [r4, #0]
 800c6f4:	60a5      	str	r5, [r4, #8]
 800c6f6:	463e      	mov	r6, r7
 800c6f8:	42be      	cmp	r6, r7
 800c6fa:	d900      	bls.n	800c6fe <__ssputs_r+0x86>
 800c6fc:	463e      	mov	r6, r7
 800c6fe:	6820      	ldr	r0, [r4, #0]
 800c700:	4632      	mov	r2, r6
 800c702:	4641      	mov	r1, r8
 800c704:	f000 f968 	bl	800c9d8 <memmove>
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	1b9b      	subs	r3, r3, r6
 800c70c:	60a3      	str	r3, [r4, #8]
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	4433      	add	r3, r6
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	2000      	movs	r0, #0
 800c716:	e7db      	b.n	800c6d0 <__ssputs_r+0x58>
 800c718:	462a      	mov	r2, r5
 800c71a:	f000 f977 	bl	800ca0c <_realloc_r>
 800c71e:	4606      	mov	r6, r0
 800c720:	2800      	cmp	r0, #0
 800c722:	d1e1      	bne.n	800c6e8 <__ssputs_r+0x70>
 800c724:	6921      	ldr	r1, [r4, #16]
 800c726:	4650      	mov	r0, sl
 800c728:	f7ff ff5a 	bl	800c5e0 <_free_r>
 800c72c:	e7c7      	b.n	800c6be <__ssputs_r+0x46>
	...

0800c730 <_svfiprintf_r>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	4698      	mov	r8, r3
 800c736:	898b      	ldrh	r3, [r1, #12]
 800c738:	061b      	lsls	r3, r3, #24
 800c73a:	b09d      	sub	sp, #116	; 0x74
 800c73c:	4607      	mov	r7, r0
 800c73e:	460d      	mov	r5, r1
 800c740:	4614      	mov	r4, r2
 800c742:	d50e      	bpl.n	800c762 <_svfiprintf_r+0x32>
 800c744:	690b      	ldr	r3, [r1, #16]
 800c746:	b963      	cbnz	r3, 800c762 <_svfiprintf_r+0x32>
 800c748:	2140      	movs	r1, #64	; 0x40
 800c74a:	f7fd fe69 	bl	800a420 <_malloc_r>
 800c74e:	6028      	str	r0, [r5, #0]
 800c750:	6128      	str	r0, [r5, #16]
 800c752:	b920      	cbnz	r0, 800c75e <_svfiprintf_r+0x2e>
 800c754:	230c      	movs	r3, #12
 800c756:	603b      	str	r3, [r7, #0]
 800c758:	f04f 30ff 	mov.w	r0, #4294967295
 800c75c:	e0d1      	b.n	800c902 <_svfiprintf_r+0x1d2>
 800c75e:	2340      	movs	r3, #64	; 0x40
 800c760:	616b      	str	r3, [r5, #20]
 800c762:	2300      	movs	r3, #0
 800c764:	9309      	str	r3, [sp, #36]	; 0x24
 800c766:	2320      	movs	r3, #32
 800c768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c76c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c770:	2330      	movs	r3, #48	; 0x30
 800c772:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c91c <_svfiprintf_r+0x1ec>
 800c776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c77a:	f04f 0901 	mov.w	r9, #1
 800c77e:	4623      	mov	r3, r4
 800c780:	469a      	mov	sl, r3
 800c782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c786:	b10a      	cbz	r2, 800c78c <_svfiprintf_r+0x5c>
 800c788:	2a25      	cmp	r2, #37	; 0x25
 800c78a:	d1f9      	bne.n	800c780 <_svfiprintf_r+0x50>
 800c78c:	ebba 0b04 	subs.w	fp, sl, r4
 800c790:	d00b      	beq.n	800c7aa <_svfiprintf_r+0x7a>
 800c792:	465b      	mov	r3, fp
 800c794:	4622      	mov	r2, r4
 800c796:	4629      	mov	r1, r5
 800c798:	4638      	mov	r0, r7
 800c79a:	f7ff ff6d 	bl	800c678 <__ssputs_r>
 800c79e:	3001      	adds	r0, #1
 800c7a0:	f000 80aa 	beq.w	800c8f8 <_svfiprintf_r+0x1c8>
 800c7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a6:	445a      	add	r2, fp
 800c7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 80a2 	beq.w	800c8f8 <_svfiprintf_r+0x1c8>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7be:	f10a 0a01 	add.w	sl, sl, #1
 800c7c2:	9304      	str	r3, [sp, #16]
 800c7c4:	9307      	str	r3, [sp, #28]
 800c7c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c7cc:	4654      	mov	r4, sl
 800c7ce:	2205      	movs	r2, #5
 800c7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d4:	4851      	ldr	r0, [pc, #324]	; (800c91c <_svfiprintf_r+0x1ec>)
 800c7d6:	f7f3 fd03 	bl	80001e0 <memchr>
 800c7da:	9a04      	ldr	r2, [sp, #16]
 800c7dc:	b9d8      	cbnz	r0, 800c816 <_svfiprintf_r+0xe6>
 800c7de:	06d0      	lsls	r0, r2, #27
 800c7e0:	bf44      	itt	mi
 800c7e2:	2320      	movmi	r3, #32
 800c7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e8:	0711      	lsls	r1, r2, #28
 800c7ea:	bf44      	itt	mi
 800c7ec:	232b      	movmi	r3, #43	; 0x2b
 800c7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f8:	d015      	beq.n	800c826 <_svfiprintf_r+0xf6>
 800c7fa:	9a07      	ldr	r2, [sp, #28]
 800c7fc:	4654      	mov	r4, sl
 800c7fe:	2000      	movs	r0, #0
 800c800:	f04f 0c0a 	mov.w	ip, #10
 800c804:	4621      	mov	r1, r4
 800c806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c80a:	3b30      	subs	r3, #48	; 0x30
 800c80c:	2b09      	cmp	r3, #9
 800c80e:	d94e      	bls.n	800c8ae <_svfiprintf_r+0x17e>
 800c810:	b1b0      	cbz	r0, 800c840 <_svfiprintf_r+0x110>
 800c812:	9207      	str	r2, [sp, #28]
 800c814:	e014      	b.n	800c840 <_svfiprintf_r+0x110>
 800c816:	eba0 0308 	sub.w	r3, r0, r8
 800c81a:	fa09 f303 	lsl.w	r3, r9, r3
 800c81e:	4313      	orrs	r3, r2
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	46a2      	mov	sl, r4
 800c824:	e7d2      	b.n	800c7cc <_svfiprintf_r+0x9c>
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	1d19      	adds	r1, r3, #4
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	9103      	str	r1, [sp, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	bfbb      	ittet	lt
 800c832:	425b      	neglt	r3, r3
 800c834:	f042 0202 	orrlt.w	r2, r2, #2
 800c838:	9307      	strge	r3, [sp, #28]
 800c83a:	9307      	strlt	r3, [sp, #28]
 800c83c:	bfb8      	it	lt
 800c83e:	9204      	strlt	r2, [sp, #16]
 800c840:	7823      	ldrb	r3, [r4, #0]
 800c842:	2b2e      	cmp	r3, #46	; 0x2e
 800c844:	d10c      	bne.n	800c860 <_svfiprintf_r+0x130>
 800c846:	7863      	ldrb	r3, [r4, #1]
 800c848:	2b2a      	cmp	r3, #42	; 0x2a
 800c84a:	d135      	bne.n	800c8b8 <_svfiprintf_r+0x188>
 800c84c:	9b03      	ldr	r3, [sp, #12]
 800c84e:	1d1a      	adds	r2, r3, #4
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	9203      	str	r2, [sp, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	bfb8      	it	lt
 800c858:	f04f 33ff 	movlt.w	r3, #4294967295
 800c85c:	3402      	adds	r4, #2
 800c85e:	9305      	str	r3, [sp, #20]
 800c860:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c92c <_svfiprintf_r+0x1fc>
 800c864:	7821      	ldrb	r1, [r4, #0]
 800c866:	2203      	movs	r2, #3
 800c868:	4650      	mov	r0, sl
 800c86a:	f7f3 fcb9 	bl	80001e0 <memchr>
 800c86e:	b140      	cbz	r0, 800c882 <_svfiprintf_r+0x152>
 800c870:	2340      	movs	r3, #64	; 0x40
 800c872:	eba0 000a 	sub.w	r0, r0, sl
 800c876:	fa03 f000 	lsl.w	r0, r3, r0
 800c87a:	9b04      	ldr	r3, [sp, #16]
 800c87c:	4303      	orrs	r3, r0
 800c87e:	3401      	adds	r4, #1
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c886:	4826      	ldr	r0, [pc, #152]	; (800c920 <_svfiprintf_r+0x1f0>)
 800c888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c88c:	2206      	movs	r2, #6
 800c88e:	f7f3 fca7 	bl	80001e0 <memchr>
 800c892:	2800      	cmp	r0, #0
 800c894:	d038      	beq.n	800c908 <_svfiprintf_r+0x1d8>
 800c896:	4b23      	ldr	r3, [pc, #140]	; (800c924 <_svfiprintf_r+0x1f4>)
 800c898:	bb1b      	cbnz	r3, 800c8e2 <_svfiprintf_r+0x1b2>
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	3307      	adds	r3, #7
 800c89e:	f023 0307 	bic.w	r3, r3, #7
 800c8a2:	3308      	adds	r3, #8
 800c8a4:	9303      	str	r3, [sp, #12]
 800c8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a8:	4433      	add	r3, r6
 800c8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ac:	e767      	b.n	800c77e <_svfiprintf_r+0x4e>
 800c8ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	2001      	movs	r0, #1
 800c8b6:	e7a5      	b.n	800c804 <_svfiprintf_r+0xd4>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	3401      	adds	r4, #1
 800c8bc:	9305      	str	r3, [sp, #20]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	f04f 0c0a 	mov.w	ip, #10
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ca:	3a30      	subs	r2, #48	; 0x30
 800c8cc:	2a09      	cmp	r2, #9
 800c8ce:	d903      	bls.n	800c8d8 <_svfiprintf_r+0x1a8>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0c5      	beq.n	800c860 <_svfiprintf_r+0x130>
 800c8d4:	9105      	str	r1, [sp, #20]
 800c8d6:	e7c3      	b.n	800c860 <_svfiprintf_r+0x130>
 800c8d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8dc:	4604      	mov	r4, r0
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e7f0      	b.n	800c8c4 <_svfiprintf_r+0x194>
 800c8e2:	ab03      	add	r3, sp, #12
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	462a      	mov	r2, r5
 800c8e8:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <_svfiprintf_r+0x1f8>)
 800c8ea:	a904      	add	r1, sp, #16
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7fd feab 	bl	800a648 <_printf_float>
 800c8f2:	1c42      	adds	r2, r0, #1
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	d1d6      	bne.n	800c8a6 <_svfiprintf_r+0x176>
 800c8f8:	89ab      	ldrh	r3, [r5, #12]
 800c8fa:	065b      	lsls	r3, r3, #25
 800c8fc:	f53f af2c 	bmi.w	800c758 <_svfiprintf_r+0x28>
 800c900:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c902:	b01d      	add	sp, #116	; 0x74
 800c904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c908:	ab03      	add	r3, sp, #12
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	462a      	mov	r2, r5
 800c90e:	4b06      	ldr	r3, [pc, #24]	; (800c928 <_svfiprintf_r+0x1f8>)
 800c910:	a904      	add	r1, sp, #16
 800c912:	4638      	mov	r0, r7
 800c914:	f7fe f93c 	bl	800ab90 <_printf_i>
 800c918:	e7eb      	b.n	800c8f2 <_svfiprintf_r+0x1c2>
 800c91a:	bf00      	nop
 800c91c:	0800e804 	.word	0x0800e804
 800c920:	0800e80e 	.word	0x0800e80e
 800c924:	0800a649 	.word	0x0800a649
 800c928:	0800c679 	.word	0x0800c679
 800c92c:	0800e80a 	.word	0x0800e80a

0800c930 <_read_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4d07      	ldr	r5, [pc, #28]	; (800c950 <_read_r+0x20>)
 800c934:	4604      	mov	r4, r0
 800c936:	4608      	mov	r0, r1
 800c938:	4611      	mov	r1, r2
 800c93a:	2200      	movs	r2, #0
 800c93c:	602a      	str	r2, [r5, #0]
 800c93e:	461a      	mov	r2, r3
 800c940:	f7f5 fce4 	bl	800230c <_read>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	d102      	bne.n	800c94e <_read_r+0x1e>
 800c948:	682b      	ldr	r3, [r5, #0]
 800c94a:	b103      	cbz	r3, 800c94e <_read_r+0x1e>
 800c94c:	6023      	str	r3, [r4, #0]
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
 800c950:	20001ed0 	.word	0x20001ed0

0800c954 <__assert_func>:
 800c954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c956:	4614      	mov	r4, r2
 800c958:	461a      	mov	r2, r3
 800c95a:	4b09      	ldr	r3, [pc, #36]	; (800c980 <__assert_func+0x2c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4605      	mov	r5, r0
 800c960:	68d8      	ldr	r0, [r3, #12]
 800c962:	b14c      	cbz	r4, 800c978 <__assert_func+0x24>
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <__assert_func+0x30>)
 800c966:	9100      	str	r1, [sp, #0]
 800c968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c96c:	4906      	ldr	r1, [pc, #24]	; (800c988 <__assert_func+0x34>)
 800c96e:	462b      	mov	r3, r5
 800c970:	f000 f80e 	bl	800c990 <fiprintf>
 800c974:	f000 faa0 	bl	800ceb8 <abort>
 800c978:	4b04      	ldr	r3, [pc, #16]	; (800c98c <__assert_func+0x38>)
 800c97a:	461c      	mov	r4, r3
 800c97c:	e7f3      	b.n	800c966 <__assert_func+0x12>
 800c97e:	bf00      	nop
 800c980:	20000010 	.word	0x20000010
 800c984:	0800e815 	.word	0x0800e815
 800c988:	0800e822 	.word	0x0800e822
 800c98c:	0800e850 	.word	0x0800e850

0800c990 <fiprintf>:
 800c990:	b40e      	push	{r1, r2, r3}
 800c992:	b503      	push	{r0, r1, lr}
 800c994:	4601      	mov	r1, r0
 800c996:	ab03      	add	r3, sp, #12
 800c998:	4805      	ldr	r0, [pc, #20]	; (800c9b0 <fiprintf+0x20>)
 800c99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99e:	6800      	ldr	r0, [r0, #0]
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	f000 f88b 	bl	800cabc <_vfiprintf_r>
 800c9a6:	b002      	add	sp, #8
 800c9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9ac:	b003      	add	sp, #12
 800c9ae:	4770      	bx	lr
 800c9b0:	20000010 	.word	0x20000010

0800c9b4 <__ascii_mbtowc>:
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	b901      	cbnz	r1, 800c9ba <__ascii_mbtowc+0x6>
 800c9b8:	a901      	add	r1, sp, #4
 800c9ba:	b142      	cbz	r2, 800c9ce <__ascii_mbtowc+0x1a>
 800c9bc:	b14b      	cbz	r3, 800c9d2 <__ascii_mbtowc+0x1e>
 800c9be:	7813      	ldrb	r3, [r2, #0]
 800c9c0:	600b      	str	r3, [r1, #0]
 800c9c2:	7812      	ldrb	r2, [r2, #0]
 800c9c4:	1e10      	subs	r0, r2, #0
 800c9c6:	bf18      	it	ne
 800c9c8:	2001      	movne	r0, #1
 800c9ca:	b002      	add	sp, #8
 800c9cc:	4770      	bx	lr
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	e7fb      	b.n	800c9ca <__ascii_mbtowc+0x16>
 800c9d2:	f06f 0001 	mvn.w	r0, #1
 800c9d6:	e7f8      	b.n	800c9ca <__ascii_mbtowc+0x16>

0800c9d8 <memmove>:
 800c9d8:	4288      	cmp	r0, r1
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	eb01 0402 	add.w	r4, r1, r2
 800c9e0:	d902      	bls.n	800c9e8 <memmove+0x10>
 800c9e2:	4284      	cmp	r4, r0
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	d807      	bhi.n	800c9f8 <memmove+0x20>
 800c9e8:	1e43      	subs	r3, r0, #1
 800c9ea:	42a1      	cmp	r1, r4
 800c9ec:	d008      	beq.n	800ca00 <memmove+0x28>
 800c9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9f6:	e7f8      	b.n	800c9ea <memmove+0x12>
 800c9f8:	4402      	add	r2, r0
 800c9fa:	4601      	mov	r1, r0
 800c9fc:	428a      	cmp	r2, r1
 800c9fe:	d100      	bne.n	800ca02 <memmove+0x2a>
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca0a:	e7f7      	b.n	800c9fc <memmove+0x24>

0800ca0c <_realloc_r>:
 800ca0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca10:	4680      	mov	r8, r0
 800ca12:	4614      	mov	r4, r2
 800ca14:	460e      	mov	r6, r1
 800ca16:	b921      	cbnz	r1, 800ca22 <_realloc_r+0x16>
 800ca18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	f7fd bcff 	b.w	800a420 <_malloc_r>
 800ca22:	b92a      	cbnz	r2, 800ca30 <_realloc_r+0x24>
 800ca24:	f7ff fddc 	bl	800c5e0 <_free_r>
 800ca28:	4625      	mov	r5, r4
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca30:	f000 faae 	bl	800cf90 <_malloc_usable_size_r>
 800ca34:	4284      	cmp	r4, r0
 800ca36:	4607      	mov	r7, r0
 800ca38:	d802      	bhi.n	800ca40 <_realloc_r+0x34>
 800ca3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca3e:	d812      	bhi.n	800ca66 <_realloc_r+0x5a>
 800ca40:	4621      	mov	r1, r4
 800ca42:	4640      	mov	r0, r8
 800ca44:	f7fd fcec 	bl	800a420 <_malloc_r>
 800ca48:	4605      	mov	r5, r0
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d0ed      	beq.n	800ca2a <_realloc_r+0x1e>
 800ca4e:	42bc      	cmp	r4, r7
 800ca50:	4622      	mov	r2, r4
 800ca52:	4631      	mov	r1, r6
 800ca54:	bf28      	it	cs
 800ca56:	463a      	movcs	r2, r7
 800ca58:	f7fd fcab 	bl	800a3b2 <memcpy>
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f7ff fdbe 	bl	800c5e0 <_free_r>
 800ca64:	e7e1      	b.n	800ca2a <_realloc_r+0x1e>
 800ca66:	4635      	mov	r5, r6
 800ca68:	e7df      	b.n	800ca2a <_realloc_r+0x1e>

0800ca6a <__sfputc_r>:
 800ca6a:	6893      	ldr	r3, [r2, #8]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	b410      	push	{r4}
 800ca72:	6093      	str	r3, [r2, #8]
 800ca74:	da08      	bge.n	800ca88 <__sfputc_r+0x1e>
 800ca76:	6994      	ldr	r4, [r2, #24]
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	db01      	blt.n	800ca80 <__sfputc_r+0x16>
 800ca7c:	290a      	cmp	r1, #10
 800ca7e:	d103      	bne.n	800ca88 <__sfputc_r+0x1e>
 800ca80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca84:	f000 b94a 	b.w	800cd1c <__swbuf_r>
 800ca88:	6813      	ldr	r3, [r2, #0]
 800ca8a:	1c58      	adds	r0, r3, #1
 800ca8c:	6010      	str	r0, [r2, #0]
 800ca8e:	7019      	strb	r1, [r3, #0]
 800ca90:	4608      	mov	r0, r1
 800ca92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <__sfputs_r>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	4606      	mov	r6, r0
 800ca9c:	460f      	mov	r7, r1
 800ca9e:	4614      	mov	r4, r2
 800caa0:	18d5      	adds	r5, r2, r3
 800caa2:	42ac      	cmp	r4, r5
 800caa4:	d101      	bne.n	800caaa <__sfputs_r+0x12>
 800caa6:	2000      	movs	r0, #0
 800caa8:	e007      	b.n	800caba <__sfputs_r+0x22>
 800caaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caae:	463a      	mov	r2, r7
 800cab0:	4630      	mov	r0, r6
 800cab2:	f7ff ffda 	bl	800ca6a <__sfputc_r>
 800cab6:	1c43      	adds	r3, r0, #1
 800cab8:	d1f3      	bne.n	800caa2 <__sfputs_r+0xa>
 800caba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cabc <_vfiprintf_r>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	460d      	mov	r5, r1
 800cac2:	b09d      	sub	sp, #116	; 0x74
 800cac4:	4614      	mov	r4, r2
 800cac6:	4698      	mov	r8, r3
 800cac8:	4606      	mov	r6, r0
 800caca:	b118      	cbz	r0, 800cad4 <_vfiprintf_r+0x18>
 800cacc:	6983      	ldr	r3, [r0, #24]
 800cace:	b90b      	cbnz	r3, 800cad4 <_vfiprintf_r+0x18>
 800cad0:	f7fd fbaa 	bl	800a228 <__sinit>
 800cad4:	4b89      	ldr	r3, [pc, #548]	; (800ccfc <_vfiprintf_r+0x240>)
 800cad6:	429d      	cmp	r5, r3
 800cad8:	d11b      	bne.n	800cb12 <_vfiprintf_r+0x56>
 800cada:	6875      	ldr	r5, [r6, #4]
 800cadc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cade:	07d9      	lsls	r1, r3, #31
 800cae0:	d405      	bmi.n	800caee <_vfiprintf_r+0x32>
 800cae2:	89ab      	ldrh	r3, [r5, #12]
 800cae4:	059a      	lsls	r2, r3, #22
 800cae6:	d402      	bmi.n	800caee <_vfiprintf_r+0x32>
 800cae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caea:	f7fd fc60 	bl	800a3ae <__retarget_lock_acquire_recursive>
 800caee:	89ab      	ldrh	r3, [r5, #12]
 800caf0:	071b      	lsls	r3, r3, #28
 800caf2:	d501      	bpl.n	800caf8 <_vfiprintf_r+0x3c>
 800caf4:	692b      	ldr	r3, [r5, #16]
 800caf6:	b9eb      	cbnz	r3, 800cb34 <_vfiprintf_r+0x78>
 800caf8:	4629      	mov	r1, r5
 800cafa:	4630      	mov	r0, r6
 800cafc:	f000 f96e 	bl	800cddc <__swsetup_r>
 800cb00:	b1c0      	cbz	r0, 800cb34 <_vfiprintf_r+0x78>
 800cb02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb04:	07dc      	lsls	r4, r3, #31
 800cb06:	d50e      	bpl.n	800cb26 <_vfiprintf_r+0x6a>
 800cb08:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0c:	b01d      	add	sp, #116	; 0x74
 800cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb12:	4b7b      	ldr	r3, [pc, #492]	; (800cd00 <_vfiprintf_r+0x244>)
 800cb14:	429d      	cmp	r5, r3
 800cb16:	d101      	bne.n	800cb1c <_vfiprintf_r+0x60>
 800cb18:	68b5      	ldr	r5, [r6, #8]
 800cb1a:	e7df      	b.n	800cadc <_vfiprintf_r+0x20>
 800cb1c:	4b79      	ldr	r3, [pc, #484]	; (800cd04 <_vfiprintf_r+0x248>)
 800cb1e:	429d      	cmp	r5, r3
 800cb20:	bf08      	it	eq
 800cb22:	68f5      	ldreq	r5, [r6, #12]
 800cb24:	e7da      	b.n	800cadc <_vfiprintf_r+0x20>
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	0598      	lsls	r0, r3, #22
 800cb2a:	d4ed      	bmi.n	800cb08 <_vfiprintf_r+0x4c>
 800cb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb2e:	f7fd fc3f 	bl	800a3b0 <__retarget_lock_release_recursive>
 800cb32:	e7e9      	b.n	800cb08 <_vfiprintf_r+0x4c>
 800cb34:	2300      	movs	r3, #0
 800cb36:	9309      	str	r3, [sp, #36]	; 0x24
 800cb38:	2320      	movs	r3, #32
 800cb3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb42:	2330      	movs	r3, #48	; 0x30
 800cb44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd08 <_vfiprintf_r+0x24c>
 800cb48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb4c:	f04f 0901 	mov.w	r9, #1
 800cb50:	4623      	mov	r3, r4
 800cb52:	469a      	mov	sl, r3
 800cb54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb58:	b10a      	cbz	r2, 800cb5e <_vfiprintf_r+0xa2>
 800cb5a:	2a25      	cmp	r2, #37	; 0x25
 800cb5c:	d1f9      	bne.n	800cb52 <_vfiprintf_r+0x96>
 800cb5e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb62:	d00b      	beq.n	800cb7c <_vfiprintf_r+0xc0>
 800cb64:	465b      	mov	r3, fp
 800cb66:	4622      	mov	r2, r4
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ff94 	bl	800ca98 <__sfputs_r>
 800cb70:	3001      	adds	r0, #1
 800cb72:	f000 80aa 	beq.w	800ccca <_vfiprintf_r+0x20e>
 800cb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb78:	445a      	add	r2, fp
 800cb7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f000 80a2 	beq.w	800ccca <_vfiprintf_r+0x20e>
 800cb86:	2300      	movs	r3, #0
 800cb88:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb90:	f10a 0a01 	add.w	sl, sl, #1
 800cb94:	9304      	str	r3, [sp, #16]
 800cb96:	9307      	str	r3, [sp, #28]
 800cb98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb9c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb9e:	4654      	mov	r4, sl
 800cba0:	2205      	movs	r2, #5
 800cba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba6:	4858      	ldr	r0, [pc, #352]	; (800cd08 <_vfiprintf_r+0x24c>)
 800cba8:	f7f3 fb1a 	bl	80001e0 <memchr>
 800cbac:	9a04      	ldr	r2, [sp, #16]
 800cbae:	b9d8      	cbnz	r0, 800cbe8 <_vfiprintf_r+0x12c>
 800cbb0:	06d1      	lsls	r1, r2, #27
 800cbb2:	bf44      	itt	mi
 800cbb4:	2320      	movmi	r3, #32
 800cbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbba:	0713      	lsls	r3, r2, #28
 800cbbc:	bf44      	itt	mi
 800cbbe:	232b      	movmi	r3, #43	; 0x2b
 800cbc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbc4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbca:	d015      	beq.n	800cbf8 <_vfiprintf_r+0x13c>
 800cbcc:	9a07      	ldr	r2, [sp, #28]
 800cbce:	4654      	mov	r4, sl
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	f04f 0c0a 	mov.w	ip, #10
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbdc:	3b30      	subs	r3, #48	; 0x30
 800cbde:	2b09      	cmp	r3, #9
 800cbe0:	d94e      	bls.n	800cc80 <_vfiprintf_r+0x1c4>
 800cbe2:	b1b0      	cbz	r0, 800cc12 <_vfiprintf_r+0x156>
 800cbe4:	9207      	str	r2, [sp, #28]
 800cbe6:	e014      	b.n	800cc12 <_vfiprintf_r+0x156>
 800cbe8:	eba0 0308 	sub.w	r3, r0, r8
 800cbec:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	46a2      	mov	sl, r4
 800cbf6:	e7d2      	b.n	800cb9e <_vfiprintf_r+0xe2>
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	1d19      	adds	r1, r3, #4
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	9103      	str	r1, [sp, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bfbb      	ittet	lt
 800cc04:	425b      	neglt	r3, r3
 800cc06:	f042 0202 	orrlt.w	r2, r2, #2
 800cc0a:	9307      	strge	r3, [sp, #28]
 800cc0c:	9307      	strlt	r3, [sp, #28]
 800cc0e:	bfb8      	it	lt
 800cc10:	9204      	strlt	r2, [sp, #16]
 800cc12:	7823      	ldrb	r3, [r4, #0]
 800cc14:	2b2e      	cmp	r3, #46	; 0x2e
 800cc16:	d10c      	bne.n	800cc32 <_vfiprintf_r+0x176>
 800cc18:	7863      	ldrb	r3, [r4, #1]
 800cc1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1c:	d135      	bne.n	800cc8a <_vfiprintf_r+0x1ce>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	1d1a      	adds	r2, r3, #4
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	9203      	str	r2, [sp, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfb8      	it	lt
 800cc2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc2e:	3402      	adds	r4, #2
 800cc30:	9305      	str	r3, [sp, #20]
 800cc32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd18 <_vfiprintf_r+0x25c>
 800cc36:	7821      	ldrb	r1, [r4, #0]
 800cc38:	2203      	movs	r2, #3
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	f7f3 fad0 	bl	80001e0 <memchr>
 800cc40:	b140      	cbz	r0, 800cc54 <_vfiprintf_r+0x198>
 800cc42:	2340      	movs	r3, #64	; 0x40
 800cc44:	eba0 000a 	sub.w	r0, r0, sl
 800cc48:	fa03 f000 	lsl.w	r0, r3, r0
 800cc4c:	9b04      	ldr	r3, [sp, #16]
 800cc4e:	4303      	orrs	r3, r0
 800cc50:	3401      	adds	r4, #1
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc58:	482c      	ldr	r0, [pc, #176]	; (800cd0c <_vfiprintf_r+0x250>)
 800cc5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc5e:	2206      	movs	r2, #6
 800cc60:	f7f3 fabe 	bl	80001e0 <memchr>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d03f      	beq.n	800cce8 <_vfiprintf_r+0x22c>
 800cc68:	4b29      	ldr	r3, [pc, #164]	; (800cd10 <_vfiprintf_r+0x254>)
 800cc6a:	bb1b      	cbnz	r3, 800ccb4 <_vfiprintf_r+0x1f8>
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	3307      	adds	r3, #7
 800cc70:	f023 0307 	bic.w	r3, r3, #7
 800cc74:	3308      	adds	r3, #8
 800cc76:	9303      	str	r3, [sp, #12]
 800cc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc7a:	443b      	add	r3, r7
 800cc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc7e:	e767      	b.n	800cb50 <_vfiprintf_r+0x94>
 800cc80:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc84:	460c      	mov	r4, r1
 800cc86:	2001      	movs	r0, #1
 800cc88:	e7a5      	b.n	800cbd6 <_vfiprintf_r+0x11a>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	3401      	adds	r4, #1
 800cc8e:	9305      	str	r3, [sp, #20]
 800cc90:	4619      	mov	r1, r3
 800cc92:	f04f 0c0a 	mov.w	ip, #10
 800cc96:	4620      	mov	r0, r4
 800cc98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc9c:	3a30      	subs	r2, #48	; 0x30
 800cc9e:	2a09      	cmp	r2, #9
 800cca0:	d903      	bls.n	800ccaa <_vfiprintf_r+0x1ee>
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0c5      	beq.n	800cc32 <_vfiprintf_r+0x176>
 800cca6:	9105      	str	r1, [sp, #20]
 800cca8:	e7c3      	b.n	800cc32 <_vfiprintf_r+0x176>
 800ccaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccae:	4604      	mov	r4, r0
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e7f0      	b.n	800cc96 <_vfiprintf_r+0x1da>
 800ccb4:	ab03      	add	r3, sp, #12
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	462a      	mov	r2, r5
 800ccba:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <_vfiprintf_r+0x258>)
 800ccbc:	a904      	add	r1, sp, #16
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7fd fcc2 	bl	800a648 <_printf_float>
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	1c78      	adds	r0, r7, #1
 800ccc8:	d1d6      	bne.n	800cc78 <_vfiprintf_r+0x1bc>
 800ccca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cccc:	07d9      	lsls	r1, r3, #31
 800ccce:	d405      	bmi.n	800ccdc <_vfiprintf_r+0x220>
 800ccd0:	89ab      	ldrh	r3, [r5, #12]
 800ccd2:	059a      	lsls	r2, r3, #22
 800ccd4:	d402      	bmi.n	800ccdc <_vfiprintf_r+0x220>
 800ccd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd8:	f7fd fb6a 	bl	800a3b0 <__retarget_lock_release_recursive>
 800ccdc:	89ab      	ldrh	r3, [r5, #12]
 800ccde:	065b      	lsls	r3, r3, #25
 800cce0:	f53f af12 	bmi.w	800cb08 <_vfiprintf_r+0x4c>
 800cce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cce6:	e711      	b.n	800cb0c <_vfiprintf_r+0x50>
 800cce8:	ab03      	add	r3, sp, #12
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	462a      	mov	r2, r5
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <_vfiprintf_r+0x258>)
 800ccf0:	a904      	add	r1, sp, #16
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7fd ff4c 	bl	800ab90 <_printf_i>
 800ccf8:	e7e4      	b.n	800ccc4 <_vfiprintf_r+0x208>
 800ccfa:	bf00      	nop
 800ccfc:	0800e5a4 	.word	0x0800e5a4
 800cd00:	0800e5c4 	.word	0x0800e5c4
 800cd04:	0800e584 	.word	0x0800e584
 800cd08:	0800e804 	.word	0x0800e804
 800cd0c:	0800e80e 	.word	0x0800e80e
 800cd10:	0800a649 	.word	0x0800a649
 800cd14:	0800ca99 	.word	0x0800ca99
 800cd18:	0800e80a 	.word	0x0800e80a

0800cd1c <__swbuf_r>:
 800cd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1e:	460e      	mov	r6, r1
 800cd20:	4614      	mov	r4, r2
 800cd22:	4605      	mov	r5, r0
 800cd24:	b118      	cbz	r0, 800cd2e <__swbuf_r+0x12>
 800cd26:	6983      	ldr	r3, [r0, #24]
 800cd28:	b90b      	cbnz	r3, 800cd2e <__swbuf_r+0x12>
 800cd2a:	f7fd fa7d 	bl	800a228 <__sinit>
 800cd2e:	4b21      	ldr	r3, [pc, #132]	; (800cdb4 <__swbuf_r+0x98>)
 800cd30:	429c      	cmp	r4, r3
 800cd32:	d12b      	bne.n	800cd8c <__swbuf_r+0x70>
 800cd34:	686c      	ldr	r4, [r5, #4]
 800cd36:	69a3      	ldr	r3, [r4, #24]
 800cd38:	60a3      	str	r3, [r4, #8]
 800cd3a:	89a3      	ldrh	r3, [r4, #12]
 800cd3c:	071a      	lsls	r2, r3, #28
 800cd3e:	d52f      	bpl.n	800cda0 <__swbuf_r+0x84>
 800cd40:	6923      	ldr	r3, [r4, #16]
 800cd42:	b36b      	cbz	r3, 800cda0 <__swbuf_r+0x84>
 800cd44:	6923      	ldr	r3, [r4, #16]
 800cd46:	6820      	ldr	r0, [r4, #0]
 800cd48:	1ac0      	subs	r0, r0, r3
 800cd4a:	6963      	ldr	r3, [r4, #20]
 800cd4c:	b2f6      	uxtb	r6, r6
 800cd4e:	4283      	cmp	r3, r0
 800cd50:	4637      	mov	r7, r6
 800cd52:	dc04      	bgt.n	800cd5e <__swbuf_r+0x42>
 800cd54:	4621      	mov	r1, r4
 800cd56:	4628      	mov	r0, r5
 800cd58:	f7ff f842 	bl	800bde0 <_fflush_r>
 800cd5c:	bb30      	cbnz	r0, 800cdac <__swbuf_r+0x90>
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	60a3      	str	r3, [r4, #8]
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	6022      	str	r2, [r4, #0]
 800cd6a:	701e      	strb	r6, [r3, #0]
 800cd6c:	6963      	ldr	r3, [r4, #20]
 800cd6e:	3001      	adds	r0, #1
 800cd70:	4283      	cmp	r3, r0
 800cd72:	d004      	beq.n	800cd7e <__swbuf_r+0x62>
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	07db      	lsls	r3, r3, #31
 800cd78:	d506      	bpl.n	800cd88 <__swbuf_r+0x6c>
 800cd7a:	2e0a      	cmp	r6, #10
 800cd7c:	d104      	bne.n	800cd88 <__swbuf_r+0x6c>
 800cd7e:	4621      	mov	r1, r4
 800cd80:	4628      	mov	r0, r5
 800cd82:	f7ff f82d 	bl	800bde0 <_fflush_r>
 800cd86:	b988      	cbnz	r0, 800cdac <__swbuf_r+0x90>
 800cd88:	4638      	mov	r0, r7
 800cd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd8c:	4b0a      	ldr	r3, [pc, #40]	; (800cdb8 <__swbuf_r+0x9c>)
 800cd8e:	429c      	cmp	r4, r3
 800cd90:	d101      	bne.n	800cd96 <__swbuf_r+0x7a>
 800cd92:	68ac      	ldr	r4, [r5, #8]
 800cd94:	e7cf      	b.n	800cd36 <__swbuf_r+0x1a>
 800cd96:	4b09      	ldr	r3, [pc, #36]	; (800cdbc <__swbuf_r+0xa0>)
 800cd98:	429c      	cmp	r4, r3
 800cd9a:	bf08      	it	eq
 800cd9c:	68ec      	ldreq	r4, [r5, #12]
 800cd9e:	e7ca      	b.n	800cd36 <__swbuf_r+0x1a>
 800cda0:	4621      	mov	r1, r4
 800cda2:	4628      	mov	r0, r5
 800cda4:	f000 f81a 	bl	800cddc <__swsetup_r>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d0cb      	beq.n	800cd44 <__swbuf_r+0x28>
 800cdac:	f04f 37ff 	mov.w	r7, #4294967295
 800cdb0:	e7ea      	b.n	800cd88 <__swbuf_r+0x6c>
 800cdb2:	bf00      	nop
 800cdb4:	0800e5a4 	.word	0x0800e5a4
 800cdb8:	0800e5c4 	.word	0x0800e5c4
 800cdbc:	0800e584 	.word	0x0800e584

0800cdc0 <__ascii_wctomb>:
 800cdc0:	b149      	cbz	r1, 800cdd6 <__ascii_wctomb+0x16>
 800cdc2:	2aff      	cmp	r2, #255	; 0xff
 800cdc4:	bf85      	ittet	hi
 800cdc6:	238a      	movhi	r3, #138	; 0x8a
 800cdc8:	6003      	strhi	r3, [r0, #0]
 800cdca:	700a      	strbls	r2, [r1, #0]
 800cdcc:	f04f 30ff 	movhi.w	r0, #4294967295
 800cdd0:	bf98      	it	ls
 800cdd2:	2001      	movls	r0, #1
 800cdd4:	4770      	bx	lr
 800cdd6:	4608      	mov	r0, r1
 800cdd8:	4770      	bx	lr
	...

0800cddc <__swsetup_r>:
 800cddc:	4b32      	ldr	r3, [pc, #200]	; (800cea8 <__swsetup_r+0xcc>)
 800cdde:	b570      	push	{r4, r5, r6, lr}
 800cde0:	681d      	ldr	r5, [r3, #0]
 800cde2:	4606      	mov	r6, r0
 800cde4:	460c      	mov	r4, r1
 800cde6:	b125      	cbz	r5, 800cdf2 <__swsetup_r+0x16>
 800cde8:	69ab      	ldr	r3, [r5, #24]
 800cdea:	b913      	cbnz	r3, 800cdf2 <__swsetup_r+0x16>
 800cdec:	4628      	mov	r0, r5
 800cdee:	f7fd fa1b 	bl	800a228 <__sinit>
 800cdf2:	4b2e      	ldr	r3, [pc, #184]	; (800ceac <__swsetup_r+0xd0>)
 800cdf4:	429c      	cmp	r4, r3
 800cdf6:	d10f      	bne.n	800ce18 <__swsetup_r+0x3c>
 800cdf8:	686c      	ldr	r4, [r5, #4]
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce00:	0719      	lsls	r1, r3, #28
 800ce02:	d42c      	bmi.n	800ce5e <__swsetup_r+0x82>
 800ce04:	06dd      	lsls	r5, r3, #27
 800ce06:	d411      	bmi.n	800ce2c <__swsetup_r+0x50>
 800ce08:	2309      	movs	r3, #9
 800ce0a:	6033      	str	r3, [r6, #0]
 800ce0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce10:	81a3      	strh	r3, [r4, #12]
 800ce12:	f04f 30ff 	mov.w	r0, #4294967295
 800ce16:	e03e      	b.n	800ce96 <__swsetup_r+0xba>
 800ce18:	4b25      	ldr	r3, [pc, #148]	; (800ceb0 <__swsetup_r+0xd4>)
 800ce1a:	429c      	cmp	r4, r3
 800ce1c:	d101      	bne.n	800ce22 <__swsetup_r+0x46>
 800ce1e:	68ac      	ldr	r4, [r5, #8]
 800ce20:	e7eb      	b.n	800cdfa <__swsetup_r+0x1e>
 800ce22:	4b24      	ldr	r3, [pc, #144]	; (800ceb4 <__swsetup_r+0xd8>)
 800ce24:	429c      	cmp	r4, r3
 800ce26:	bf08      	it	eq
 800ce28:	68ec      	ldreq	r4, [r5, #12]
 800ce2a:	e7e6      	b.n	800cdfa <__swsetup_r+0x1e>
 800ce2c:	0758      	lsls	r0, r3, #29
 800ce2e:	d512      	bpl.n	800ce56 <__swsetup_r+0x7a>
 800ce30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce32:	b141      	cbz	r1, 800ce46 <__swsetup_r+0x6a>
 800ce34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce38:	4299      	cmp	r1, r3
 800ce3a:	d002      	beq.n	800ce42 <__swsetup_r+0x66>
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	f7ff fbcf 	bl	800c5e0 <_free_r>
 800ce42:	2300      	movs	r3, #0
 800ce44:	6363      	str	r3, [r4, #52]	; 0x34
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce4c:	81a3      	strh	r3, [r4, #12]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	6063      	str	r3, [r4, #4]
 800ce52:	6923      	ldr	r3, [r4, #16]
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	f043 0308 	orr.w	r3, r3, #8
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	6923      	ldr	r3, [r4, #16]
 800ce60:	b94b      	cbnz	r3, 800ce76 <__swsetup_r+0x9a>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce6c:	d003      	beq.n	800ce76 <__swsetup_r+0x9a>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4630      	mov	r0, r6
 800ce72:	f000 f84d 	bl	800cf10 <__smakebuf_r>
 800ce76:	89a0      	ldrh	r0, [r4, #12]
 800ce78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce7c:	f010 0301 	ands.w	r3, r0, #1
 800ce80:	d00a      	beq.n	800ce98 <__swsetup_r+0xbc>
 800ce82:	2300      	movs	r3, #0
 800ce84:	60a3      	str	r3, [r4, #8]
 800ce86:	6963      	ldr	r3, [r4, #20]
 800ce88:	425b      	negs	r3, r3
 800ce8a:	61a3      	str	r3, [r4, #24]
 800ce8c:	6923      	ldr	r3, [r4, #16]
 800ce8e:	b943      	cbnz	r3, 800cea2 <__swsetup_r+0xc6>
 800ce90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce94:	d1ba      	bne.n	800ce0c <__swsetup_r+0x30>
 800ce96:	bd70      	pop	{r4, r5, r6, pc}
 800ce98:	0781      	lsls	r1, r0, #30
 800ce9a:	bf58      	it	pl
 800ce9c:	6963      	ldrpl	r3, [r4, #20]
 800ce9e:	60a3      	str	r3, [r4, #8]
 800cea0:	e7f4      	b.n	800ce8c <__swsetup_r+0xb0>
 800cea2:	2000      	movs	r0, #0
 800cea4:	e7f7      	b.n	800ce96 <__swsetup_r+0xba>
 800cea6:	bf00      	nop
 800cea8:	20000010 	.word	0x20000010
 800ceac:	0800e5a4 	.word	0x0800e5a4
 800ceb0:	0800e5c4 	.word	0x0800e5c4
 800ceb4:	0800e584 	.word	0x0800e584

0800ceb8 <abort>:
 800ceb8:	b508      	push	{r3, lr}
 800ceba:	2006      	movs	r0, #6
 800cebc:	f000 f898 	bl	800cff0 <raise>
 800cec0:	2001      	movs	r0, #1
 800cec2:	f7f5 fa19 	bl	80022f8 <_exit>

0800cec6 <__swhatbuf_r>:
 800cec6:	b570      	push	{r4, r5, r6, lr}
 800cec8:	460e      	mov	r6, r1
 800ceca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cece:	2900      	cmp	r1, #0
 800ced0:	b096      	sub	sp, #88	; 0x58
 800ced2:	4614      	mov	r4, r2
 800ced4:	461d      	mov	r5, r3
 800ced6:	da08      	bge.n	800ceea <__swhatbuf_r+0x24>
 800ced8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	602a      	str	r2, [r5, #0]
 800cee0:	061a      	lsls	r2, r3, #24
 800cee2:	d410      	bmi.n	800cf06 <__swhatbuf_r+0x40>
 800cee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cee8:	e00e      	b.n	800cf08 <__swhatbuf_r+0x42>
 800ceea:	466a      	mov	r2, sp
 800ceec:	f000 f89c 	bl	800d028 <_fstat_r>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	dbf1      	blt.n	800ced8 <__swhatbuf_r+0x12>
 800cef4:	9a01      	ldr	r2, [sp, #4]
 800cef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cefa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cefe:	425a      	negs	r2, r3
 800cf00:	415a      	adcs	r2, r3
 800cf02:	602a      	str	r2, [r5, #0]
 800cf04:	e7ee      	b.n	800cee4 <__swhatbuf_r+0x1e>
 800cf06:	2340      	movs	r3, #64	; 0x40
 800cf08:	2000      	movs	r0, #0
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	b016      	add	sp, #88	; 0x58
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}

0800cf10 <__smakebuf_r>:
 800cf10:	898b      	ldrh	r3, [r1, #12]
 800cf12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf14:	079d      	lsls	r5, r3, #30
 800cf16:	4606      	mov	r6, r0
 800cf18:	460c      	mov	r4, r1
 800cf1a:	d507      	bpl.n	800cf2c <__smakebuf_r+0x1c>
 800cf1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf20:	6023      	str	r3, [r4, #0]
 800cf22:	6123      	str	r3, [r4, #16]
 800cf24:	2301      	movs	r3, #1
 800cf26:	6163      	str	r3, [r4, #20]
 800cf28:	b002      	add	sp, #8
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	ab01      	add	r3, sp, #4
 800cf2e:	466a      	mov	r2, sp
 800cf30:	f7ff ffc9 	bl	800cec6 <__swhatbuf_r>
 800cf34:	9900      	ldr	r1, [sp, #0]
 800cf36:	4605      	mov	r5, r0
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f7fd fa71 	bl	800a420 <_malloc_r>
 800cf3e:	b948      	cbnz	r0, 800cf54 <__smakebuf_r+0x44>
 800cf40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf44:	059a      	lsls	r2, r3, #22
 800cf46:	d4ef      	bmi.n	800cf28 <__smakebuf_r+0x18>
 800cf48:	f023 0303 	bic.w	r3, r3, #3
 800cf4c:	f043 0302 	orr.w	r3, r3, #2
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	e7e3      	b.n	800cf1c <__smakebuf_r+0xc>
 800cf54:	4b0d      	ldr	r3, [pc, #52]	; (800cf8c <__smakebuf_r+0x7c>)
 800cf56:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	6020      	str	r0, [r4, #0]
 800cf5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf60:	81a3      	strh	r3, [r4, #12]
 800cf62:	9b00      	ldr	r3, [sp, #0]
 800cf64:	6163      	str	r3, [r4, #20]
 800cf66:	9b01      	ldr	r3, [sp, #4]
 800cf68:	6120      	str	r0, [r4, #16]
 800cf6a:	b15b      	cbz	r3, 800cf84 <__smakebuf_r+0x74>
 800cf6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf70:	4630      	mov	r0, r6
 800cf72:	f000 f86b 	bl	800d04c <_isatty_r>
 800cf76:	b128      	cbz	r0, 800cf84 <__smakebuf_r+0x74>
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	f023 0303 	bic.w	r3, r3, #3
 800cf7e:	f043 0301 	orr.w	r3, r3, #1
 800cf82:	81a3      	strh	r3, [r4, #12]
 800cf84:	89a0      	ldrh	r0, [r4, #12]
 800cf86:	4305      	orrs	r5, r0
 800cf88:	81a5      	strh	r5, [r4, #12]
 800cf8a:	e7cd      	b.n	800cf28 <__smakebuf_r+0x18>
 800cf8c:	0800a1c1 	.word	0x0800a1c1

0800cf90 <_malloc_usable_size_r>:
 800cf90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf94:	1f18      	subs	r0, r3, #4
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	bfbc      	itt	lt
 800cf9a:	580b      	ldrlt	r3, [r1, r0]
 800cf9c:	18c0      	addlt	r0, r0, r3
 800cf9e:	4770      	bx	lr

0800cfa0 <_raise_r>:
 800cfa0:	291f      	cmp	r1, #31
 800cfa2:	b538      	push	{r3, r4, r5, lr}
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	460d      	mov	r5, r1
 800cfa8:	d904      	bls.n	800cfb4 <_raise_r+0x14>
 800cfaa:	2316      	movs	r3, #22
 800cfac:	6003      	str	r3, [r0, #0]
 800cfae:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb2:	bd38      	pop	{r3, r4, r5, pc}
 800cfb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cfb6:	b112      	cbz	r2, 800cfbe <_raise_r+0x1e>
 800cfb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfbc:	b94b      	cbnz	r3, 800cfd2 <_raise_r+0x32>
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 f830 	bl	800d024 <_getpid_r>
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	4601      	mov	r1, r0
 800cfc8:	4620      	mov	r0, r4
 800cfca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfce:	f000 b817 	b.w	800d000 <_kill_r>
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d00a      	beq.n	800cfec <_raise_r+0x4c>
 800cfd6:	1c59      	adds	r1, r3, #1
 800cfd8:	d103      	bne.n	800cfe2 <_raise_r+0x42>
 800cfda:	2316      	movs	r3, #22
 800cfdc:	6003      	str	r3, [r0, #0]
 800cfde:	2001      	movs	r0, #1
 800cfe0:	e7e7      	b.n	800cfb2 <_raise_r+0x12>
 800cfe2:	2400      	movs	r4, #0
 800cfe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfe8:	4628      	mov	r0, r5
 800cfea:	4798      	blx	r3
 800cfec:	2000      	movs	r0, #0
 800cfee:	e7e0      	b.n	800cfb2 <_raise_r+0x12>

0800cff0 <raise>:
 800cff0:	4b02      	ldr	r3, [pc, #8]	; (800cffc <raise+0xc>)
 800cff2:	4601      	mov	r1, r0
 800cff4:	6818      	ldr	r0, [r3, #0]
 800cff6:	f7ff bfd3 	b.w	800cfa0 <_raise_r>
 800cffa:	bf00      	nop
 800cffc:	20000010 	.word	0x20000010

0800d000 <_kill_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4d07      	ldr	r5, [pc, #28]	; (800d020 <_kill_r+0x20>)
 800d004:	2300      	movs	r3, #0
 800d006:	4604      	mov	r4, r0
 800d008:	4608      	mov	r0, r1
 800d00a:	4611      	mov	r1, r2
 800d00c:	602b      	str	r3, [r5, #0]
 800d00e:	f7f5 f963 	bl	80022d8 <_kill>
 800d012:	1c43      	adds	r3, r0, #1
 800d014:	d102      	bne.n	800d01c <_kill_r+0x1c>
 800d016:	682b      	ldr	r3, [r5, #0]
 800d018:	b103      	cbz	r3, 800d01c <_kill_r+0x1c>
 800d01a:	6023      	str	r3, [r4, #0]
 800d01c:	bd38      	pop	{r3, r4, r5, pc}
 800d01e:	bf00      	nop
 800d020:	20001ed0 	.word	0x20001ed0

0800d024 <_getpid_r>:
 800d024:	f7f5 b950 	b.w	80022c8 <_getpid>

0800d028 <_fstat_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d07      	ldr	r5, [pc, #28]	; (800d048 <_fstat_r+0x20>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	4611      	mov	r1, r2
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	f7f5 f9ae 	bl	8002396 <_fstat>
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	d102      	bne.n	800d044 <_fstat_r+0x1c>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b103      	cbz	r3, 800d044 <_fstat_r+0x1c>
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	20001ed0 	.word	0x20001ed0

0800d04c <_isatty_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d06      	ldr	r5, [pc, #24]	; (800d068 <_isatty_r+0x1c>)
 800d050:	2300      	movs	r3, #0
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f5 f9ad 	bl	80023b6 <_isatty>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_isatty_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_isatty_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	20001ed0 	.word	0x20001ed0

0800d06c <cosf>:
 800d06c:	ee10 3a10 	vmov	r3, s0
 800d070:	b507      	push	{r0, r1, r2, lr}
 800d072:	4a1e      	ldr	r2, [pc, #120]	; (800d0ec <cosf+0x80>)
 800d074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d078:	4293      	cmp	r3, r2
 800d07a:	dc06      	bgt.n	800d08a <cosf+0x1e>
 800d07c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800d0f0 <cosf+0x84>
 800d080:	b003      	add	sp, #12
 800d082:	f85d eb04 	ldr.w	lr, [sp], #4
 800d086:	f000 bb9b 	b.w	800d7c0 <__kernel_cosf>
 800d08a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d08e:	db04      	blt.n	800d09a <cosf+0x2e>
 800d090:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d094:	b003      	add	sp, #12
 800d096:	f85d fb04 	ldr.w	pc, [sp], #4
 800d09a:	4668      	mov	r0, sp
 800d09c:	f000 fa50 	bl	800d540 <__ieee754_rem_pio2f>
 800d0a0:	f000 0003 	and.w	r0, r0, #3
 800d0a4:	2801      	cmp	r0, #1
 800d0a6:	d009      	beq.n	800d0bc <cosf+0x50>
 800d0a8:	2802      	cmp	r0, #2
 800d0aa:	d010      	beq.n	800d0ce <cosf+0x62>
 800d0ac:	b9b0      	cbnz	r0, 800d0dc <cosf+0x70>
 800d0ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0b2:	ed9d 0a00 	vldr	s0, [sp]
 800d0b6:	f000 fb83 	bl	800d7c0 <__kernel_cosf>
 800d0ba:	e7eb      	b.n	800d094 <cosf+0x28>
 800d0bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0c0:	ed9d 0a00 	vldr	s0, [sp]
 800d0c4:	f000 fe52 	bl	800dd6c <__kernel_sinf>
 800d0c8:	eeb1 0a40 	vneg.f32	s0, s0
 800d0cc:	e7e2      	b.n	800d094 <cosf+0x28>
 800d0ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0d2:	ed9d 0a00 	vldr	s0, [sp]
 800d0d6:	f000 fb73 	bl	800d7c0 <__kernel_cosf>
 800d0da:	e7f5      	b.n	800d0c8 <cosf+0x5c>
 800d0dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0e0:	ed9d 0a00 	vldr	s0, [sp]
 800d0e4:	2001      	movs	r0, #1
 800d0e6:	f000 fe41 	bl	800dd6c <__kernel_sinf>
 800d0ea:	e7d3      	b.n	800d094 <cosf+0x28>
 800d0ec:	3f490fd8 	.word	0x3f490fd8
 800d0f0:	00000000 	.word	0x00000000

0800d0f4 <sinf>:
 800d0f4:	ee10 3a10 	vmov	r3, s0
 800d0f8:	b507      	push	{r0, r1, r2, lr}
 800d0fa:	4a1f      	ldr	r2, [pc, #124]	; (800d178 <sinf+0x84>)
 800d0fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d100:	4293      	cmp	r3, r2
 800d102:	dc07      	bgt.n	800d114 <sinf+0x20>
 800d104:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800d17c <sinf+0x88>
 800d108:	2000      	movs	r0, #0
 800d10a:	b003      	add	sp, #12
 800d10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d110:	f000 be2c 	b.w	800dd6c <__kernel_sinf>
 800d114:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d118:	db04      	blt.n	800d124 <sinf+0x30>
 800d11a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d11e:	b003      	add	sp, #12
 800d120:	f85d fb04 	ldr.w	pc, [sp], #4
 800d124:	4668      	mov	r0, sp
 800d126:	f000 fa0b 	bl	800d540 <__ieee754_rem_pio2f>
 800d12a:	f000 0003 	and.w	r0, r0, #3
 800d12e:	2801      	cmp	r0, #1
 800d130:	d00a      	beq.n	800d148 <sinf+0x54>
 800d132:	2802      	cmp	r0, #2
 800d134:	d00f      	beq.n	800d156 <sinf+0x62>
 800d136:	b9c0      	cbnz	r0, 800d16a <sinf+0x76>
 800d138:	eddd 0a01 	vldr	s1, [sp, #4]
 800d13c:	ed9d 0a00 	vldr	s0, [sp]
 800d140:	2001      	movs	r0, #1
 800d142:	f000 fe13 	bl	800dd6c <__kernel_sinf>
 800d146:	e7ea      	b.n	800d11e <sinf+0x2a>
 800d148:	eddd 0a01 	vldr	s1, [sp, #4]
 800d14c:	ed9d 0a00 	vldr	s0, [sp]
 800d150:	f000 fb36 	bl	800d7c0 <__kernel_cosf>
 800d154:	e7e3      	b.n	800d11e <sinf+0x2a>
 800d156:	eddd 0a01 	vldr	s1, [sp, #4]
 800d15a:	ed9d 0a00 	vldr	s0, [sp]
 800d15e:	2001      	movs	r0, #1
 800d160:	f000 fe04 	bl	800dd6c <__kernel_sinf>
 800d164:	eeb1 0a40 	vneg.f32	s0, s0
 800d168:	e7d9      	b.n	800d11e <sinf+0x2a>
 800d16a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d16e:	ed9d 0a00 	vldr	s0, [sp]
 800d172:	f000 fb25 	bl	800d7c0 <__kernel_cosf>
 800d176:	e7f5      	b.n	800d164 <sinf+0x70>
 800d178:	3f490fd8 	.word	0x3f490fd8
 800d17c:	00000000 	.word	0x00000000

0800d180 <tanf>:
 800d180:	ee10 3a10 	vmov	r3, s0
 800d184:	b507      	push	{r0, r1, r2, lr}
 800d186:	4a12      	ldr	r2, [pc, #72]	; (800d1d0 <tanf+0x50>)
 800d188:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d18c:	4293      	cmp	r3, r2
 800d18e:	dc07      	bgt.n	800d1a0 <tanf+0x20>
 800d190:	eddf 0a10 	vldr	s1, [pc, #64]	; 800d1d4 <tanf+0x54>
 800d194:	2001      	movs	r0, #1
 800d196:	b003      	add	sp, #12
 800d198:	f85d eb04 	ldr.w	lr, [sp], #4
 800d19c:	f000 be2e 	b.w	800ddfc <__kernel_tanf>
 800d1a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d1a4:	db04      	blt.n	800d1b0 <tanf+0x30>
 800d1a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d1aa:	b003      	add	sp, #12
 800d1ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1b0:	4668      	mov	r0, sp
 800d1b2:	f000 f9c5 	bl	800d540 <__ieee754_rem_pio2f>
 800d1b6:	0040      	lsls	r0, r0, #1
 800d1b8:	f000 0002 	and.w	r0, r0, #2
 800d1bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800d1c0:	ed9d 0a00 	vldr	s0, [sp]
 800d1c4:	f1c0 0001 	rsb	r0, r0, #1
 800d1c8:	f000 fe18 	bl	800ddfc <__kernel_tanf>
 800d1cc:	e7ed      	b.n	800d1aa <tanf+0x2a>
 800d1ce:	bf00      	nop
 800d1d0:	3f490fda 	.word	0x3f490fda
 800d1d4:	00000000 	.word	0x00000000

0800d1d8 <asinf>:
 800d1d8:	b508      	push	{r3, lr}
 800d1da:	ed2d 8b02 	vpush	{d8}
 800d1de:	eeb0 8a40 	vmov.f32	s16, s0
 800d1e2:	f000 f827 	bl	800d234 <__ieee754_asinf>
 800d1e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800d1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ee:	eef0 8a40 	vmov.f32	s17, s0
 800d1f2:	d615      	bvs.n	800d220 <asinf+0x48>
 800d1f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d1f8:	f000 ffb4 	bl	800e164 <fabsf>
 800d1fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d200:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d208:	dd0a      	ble.n	800d220 <asinf+0x48>
 800d20a:	f7fc ffaf 	bl	800a16c <__errno>
 800d20e:	ecbd 8b02 	vpop	{d8}
 800d212:	2321      	movs	r3, #33	; 0x21
 800d214:	6003      	str	r3, [r0, #0]
 800d216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d21a:	4804      	ldr	r0, [pc, #16]	; (800d22c <asinf+0x54>)
 800d21c:	f000 bfec 	b.w	800e1f8 <nanf>
 800d220:	eeb0 0a68 	vmov.f32	s0, s17
 800d224:	ecbd 8b02 	vpop	{d8}
 800d228:	bd08      	pop	{r3, pc}
 800d22a:	bf00      	nop
 800d22c:	0800e850 	.word	0x0800e850

0800d230 <atan2f>:
 800d230:	f000 b8e6 	b.w	800d400 <__ieee754_atan2f>

0800d234 <__ieee754_asinf>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	ee10 5a10 	vmov	r5, s0
 800d23a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d23e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d242:	ed2d 8b04 	vpush	{d8-d9}
 800d246:	d10c      	bne.n	800d262 <__ieee754_asinf+0x2e>
 800d248:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800d3c0 <__ieee754_asinf+0x18c>
 800d24c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800d3c4 <__ieee754_asinf+0x190>
 800d250:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d254:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d258:	eeb0 0a67 	vmov.f32	s0, s15
 800d25c:	ecbd 8b04 	vpop	{d8-d9}
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	dd04      	ble.n	800d26e <__ieee754_asinf+0x3a>
 800d264:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d268:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d26c:	e7f6      	b.n	800d25c <__ieee754_asinf+0x28>
 800d26e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d272:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d276:	da0b      	bge.n	800d290 <__ieee754_asinf+0x5c>
 800d278:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d27c:	da52      	bge.n	800d324 <__ieee754_asinf+0xf0>
 800d27e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800d3c8 <__ieee754_asinf+0x194>
 800d282:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d286:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28e:	dce5      	bgt.n	800d25c <__ieee754_asinf+0x28>
 800d290:	f000 ff68 	bl	800e164 <fabsf>
 800d294:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800d298:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800d29c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800d2a0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800d3cc <__ieee754_asinf+0x198>
 800d2a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800d3d0 <__ieee754_asinf+0x19c>
 800d2a8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800d3d4 <__ieee754_asinf+0x1a0>
 800d2ac:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d2b0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800d3d8 <__ieee754_asinf+0x1a4>
 800d2b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d2b8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d3dc <__ieee754_asinf+0x1a8>
 800d2bc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d2c0:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d3e0 <__ieee754_asinf+0x1ac>
 800d2c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d2c8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d3e4 <__ieee754_asinf+0x1b0>
 800d2cc:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d2d0:	eddf 7a45 	vldr	s15, [pc, #276]	; 800d3e8 <__ieee754_asinf+0x1b4>
 800d2d4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d2d8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d3ec <__ieee754_asinf+0x1b8>
 800d2dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d2e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d3f0 <__ieee754_asinf+0x1bc>
 800d2e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d2e8:	eeb0 0a48 	vmov.f32	s0, s16
 800d2ec:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d2f0:	f000 fa62 	bl	800d7b8 <__ieee754_sqrtf>
 800d2f4:	4b3f      	ldr	r3, [pc, #252]	; (800d3f4 <__ieee754_asinf+0x1c0>)
 800d2f6:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d2fa:	429c      	cmp	r4, r3
 800d2fc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d300:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d304:	dd3d      	ble.n	800d382 <__ieee754_asinf+0x14e>
 800d306:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d30a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800d3f8 <__ieee754_asinf+0x1c4>
 800d30e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800d312:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800d3c4 <__ieee754_asinf+0x190>
 800d316:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d31a:	2d00      	cmp	r5, #0
 800d31c:	bfd8      	it	le
 800d31e:	eeb1 0a40 	vnegle.f32	s0, s0
 800d322:	e79b      	b.n	800d25c <__ieee754_asinf+0x28>
 800d324:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d328:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d3cc <__ieee754_asinf+0x198>
 800d32c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d3d0 <__ieee754_asinf+0x19c>
 800d330:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800d3e4 <__ieee754_asinf+0x1b0>
 800d334:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d338:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d3d8 <__ieee754_asinf+0x1a4>
 800d33c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d340:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800d3dc <__ieee754_asinf+0x1a8>
 800d344:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d348:	eddf 6a25 	vldr	s13, [pc, #148]	; 800d3e0 <__ieee754_asinf+0x1ac>
 800d34c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d350:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d3d4 <__ieee754_asinf+0x1a0>
 800d354:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d358:	eddf 6a23 	vldr	s13, [pc, #140]	; 800d3e8 <__ieee754_asinf+0x1b4>
 800d35c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d360:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800d3ec <__ieee754_asinf+0x1b8>
 800d364:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d368:	eddf 6a21 	vldr	s13, [pc, #132]	; 800d3f0 <__ieee754_asinf+0x1bc>
 800d36c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d370:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d374:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d378:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d37c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d380:	e76c      	b.n	800d25c <__ieee754_asinf+0x28>
 800d382:	ee10 3a10 	vmov	r3, s0
 800d386:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d38a:	f023 030f 	bic.w	r3, r3, #15
 800d38e:	ee07 3a10 	vmov	s14, r3
 800d392:	eea7 8a47 	vfms.f32	s16, s14, s14
 800d396:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d39a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d39e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800d3a2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d3c0 <__ieee754_asinf+0x18c>
 800d3a6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800d3aa:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800d3ae:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800d3fc <__ieee754_asinf+0x1c8>
 800d3b2:	eeb0 6a40 	vmov.f32	s12, s0
 800d3b6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d3ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d3be:	e7aa      	b.n	800d316 <__ieee754_asinf+0xe2>
 800d3c0:	b33bbd2e 	.word	0xb33bbd2e
 800d3c4:	3fc90fdb 	.word	0x3fc90fdb
 800d3c8:	7149f2ca 	.word	0x7149f2ca
 800d3cc:	3811ef08 	.word	0x3811ef08
 800d3d0:	3a4f7f04 	.word	0x3a4f7f04
 800d3d4:	3e2aaaab 	.word	0x3e2aaaab
 800d3d8:	bd241146 	.word	0xbd241146
 800d3dc:	3e4e0aa8 	.word	0x3e4e0aa8
 800d3e0:	bea6b090 	.word	0xbea6b090
 800d3e4:	3d9dc62e 	.word	0x3d9dc62e
 800d3e8:	bf303361 	.word	0xbf303361
 800d3ec:	4001572d 	.word	0x4001572d
 800d3f0:	c019d139 	.word	0xc019d139
 800d3f4:	3f799999 	.word	0x3f799999
 800d3f8:	333bbd2e 	.word	0x333bbd2e
 800d3fc:	3f490fdb 	.word	0x3f490fdb

0800d400 <__ieee754_atan2f>:
 800d400:	ee10 2a90 	vmov	r2, s1
 800d404:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d408:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d40c:	b510      	push	{r4, lr}
 800d40e:	eef0 7a40 	vmov.f32	s15, s0
 800d412:	dc06      	bgt.n	800d422 <__ieee754_atan2f+0x22>
 800d414:	ee10 0a10 	vmov	r0, s0
 800d418:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d41c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d420:	dd04      	ble.n	800d42c <__ieee754_atan2f+0x2c>
 800d422:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d426:	eeb0 0a67 	vmov.f32	s0, s15
 800d42a:	bd10      	pop	{r4, pc}
 800d42c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d430:	d103      	bne.n	800d43a <__ieee754_atan2f+0x3a>
 800d432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d436:	f000 bdc1 	b.w	800dfbc <atanf>
 800d43a:	1794      	asrs	r4, r2, #30
 800d43c:	f004 0402 	and.w	r4, r4, #2
 800d440:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d444:	b943      	cbnz	r3, 800d458 <__ieee754_atan2f+0x58>
 800d446:	2c02      	cmp	r4, #2
 800d448:	d05e      	beq.n	800d508 <__ieee754_atan2f+0x108>
 800d44a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d51c <__ieee754_atan2f+0x11c>
 800d44e:	2c03      	cmp	r4, #3
 800d450:	bf08      	it	eq
 800d452:	eef0 7a47 	vmoveq.f32	s15, s14
 800d456:	e7e6      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d458:	b941      	cbnz	r1, 800d46c <__ieee754_atan2f+0x6c>
 800d45a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800d520 <__ieee754_atan2f+0x120>
 800d45e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800d524 <__ieee754_atan2f+0x124>
 800d462:	2800      	cmp	r0, #0
 800d464:	bfb8      	it	lt
 800d466:	eef0 7a40 	vmovlt.f32	s15, s0
 800d46a:	e7dc      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d46c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d470:	d110      	bne.n	800d494 <__ieee754_atan2f+0x94>
 800d472:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d476:	f104 34ff 	add.w	r4, r4, #4294967295
 800d47a:	d107      	bne.n	800d48c <__ieee754_atan2f+0x8c>
 800d47c:	2c02      	cmp	r4, #2
 800d47e:	d846      	bhi.n	800d50e <__ieee754_atan2f+0x10e>
 800d480:	4b29      	ldr	r3, [pc, #164]	; (800d528 <__ieee754_atan2f+0x128>)
 800d482:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d486:	edd4 7a00 	vldr	s15, [r4]
 800d48a:	e7cc      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d48c:	2c02      	cmp	r4, #2
 800d48e:	d841      	bhi.n	800d514 <__ieee754_atan2f+0x114>
 800d490:	4b26      	ldr	r3, [pc, #152]	; (800d52c <__ieee754_atan2f+0x12c>)
 800d492:	e7f6      	b.n	800d482 <__ieee754_atan2f+0x82>
 800d494:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d498:	d0df      	beq.n	800d45a <__ieee754_atan2f+0x5a>
 800d49a:	1a5b      	subs	r3, r3, r1
 800d49c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800d4a0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d4a4:	da1a      	bge.n	800d4dc <__ieee754_atan2f+0xdc>
 800d4a6:	2a00      	cmp	r2, #0
 800d4a8:	da01      	bge.n	800d4ae <__ieee754_atan2f+0xae>
 800d4aa:	313c      	adds	r1, #60	; 0x3c
 800d4ac:	db19      	blt.n	800d4e2 <__ieee754_atan2f+0xe2>
 800d4ae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d4b2:	f000 fe57 	bl	800e164 <fabsf>
 800d4b6:	f000 fd81 	bl	800dfbc <atanf>
 800d4ba:	eef0 7a40 	vmov.f32	s15, s0
 800d4be:	2c01      	cmp	r4, #1
 800d4c0:	d012      	beq.n	800d4e8 <__ieee754_atan2f+0xe8>
 800d4c2:	2c02      	cmp	r4, #2
 800d4c4:	d017      	beq.n	800d4f6 <__ieee754_atan2f+0xf6>
 800d4c6:	2c00      	cmp	r4, #0
 800d4c8:	d0ad      	beq.n	800d426 <__ieee754_atan2f+0x26>
 800d4ca:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800d530 <__ieee754_atan2f+0x130>
 800d4ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d4d2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800d534 <__ieee754_atan2f+0x134>
 800d4d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d4da:	e7a4      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d4dc:	eddf 7a10 	vldr	s15, [pc, #64]	; 800d520 <__ieee754_atan2f+0x120>
 800d4e0:	e7ed      	b.n	800d4be <__ieee754_atan2f+0xbe>
 800d4e2:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d538 <__ieee754_atan2f+0x138>
 800d4e6:	e7ea      	b.n	800d4be <__ieee754_atan2f+0xbe>
 800d4e8:	ee17 3a90 	vmov	r3, s15
 800d4ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d4f0:	ee07 3a90 	vmov	s15, r3
 800d4f4:	e797      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d4f6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d530 <__ieee754_atan2f+0x130>
 800d4fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d4fe:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d534 <__ieee754_atan2f+0x134>
 800d502:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d506:	e78e      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d508:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800d534 <__ieee754_atan2f+0x134>
 800d50c:	e78b      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d50e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800d53c <__ieee754_atan2f+0x13c>
 800d512:	e788      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d514:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d538 <__ieee754_atan2f+0x138>
 800d518:	e785      	b.n	800d426 <__ieee754_atan2f+0x26>
 800d51a:	bf00      	nop
 800d51c:	c0490fdb 	.word	0xc0490fdb
 800d520:	3fc90fdb 	.word	0x3fc90fdb
 800d524:	bfc90fdb 	.word	0xbfc90fdb
 800d528:	0800e95c 	.word	0x0800e95c
 800d52c:	0800e968 	.word	0x0800e968
 800d530:	33bbbd2e 	.word	0x33bbbd2e
 800d534:	40490fdb 	.word	0x40490fdb
 800d538:	00000000 	.word	0x00000000
 800d53c:	3f490fdb 	.word	0x3f490fdb

0800d540 <__ieee754_rem_pio2f>:
 800d540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d542:	ee10 6a10 	vmov	r6, s0
 800d546:	4b8e      	ldr	r3, [pc, #568]	; (800d780 <__ieee754_rem_pio2f+0x240>)
 800d548:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d54c:	429d      	cmp	r5, r3
 800d54e:	b087      	sub	sp, #28
 800d550:	eef0 7a40 	vmov.f32	s15, s0
 800d554:	4604      	mov	r4, r0
 800d556:	dc05      	bgt.n	800d564 <__ieee754_rem_pio2f+0x24>
 800d558:	2300      	movs	r3, #0
 800d55a:	ed80 0a00 	vstr	s0, [r0]
 800d55e:	6043      	str	r3, [r0, #4]
 800d560:	2000      	movs	r0, #0
 800d562:	e01a      	b.n	800d59a <__ieee754_rem_pio2f+0x5a>
 800d564:	4b87      	ldr	r3, [pc, #540]	; (800d784 <__ieee754_rem_pio2f+0x244>)
 800d566:	429d      	cmp	r5, r3
 800d568:	dc46      	bgt.n	800d5f8 <__ieee754_rem_pio2f+0xb8>
 800d56a:	2e00      	cmp	r6, #0
 800d56c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d788 <__ieee754_rem_pio2f+0x248>
 800d570:	4b86      	ldr	r3, [pc, #536]	; (800d78c <__ieee754_rem_pio2f+0x24c>)
 800d572:	f025 050f 	bic.w	r5, r5, #15
 800d576:	dd1f      	ble.n	800d5b8 <__ieee754_rem_pio2f+0x78>
 800d578:	429d      	cmp	r5, r3
 800d57a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d57e:	d00e      	beq.n	800d59e <__ieee754_rem_pio2f+0x5e>
 800d580:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d790 <__ieee754_rem_pio2f+0x250>
 800d584:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d588:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d58c:	ed80 0a00 	vstr	s0, [r0]
 800d590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d594:	2001      	movs	r0, #1
 800d596:	edc4 7a01 	vstr	s15, [r4, #4]
 800d59a:	b007      	add	sp, #28
 800d59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d59e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d794 <__ieee754_rem_pio2f+0x254>
 800d5a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d798 <__ieee754_rem_pio2f+0x258>
 800d5a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d5aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d5ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d5b2:	edc0 6a00 	vstr	s13, [r0]
 800d5b6:	e7eb      	b.n	800d590 <__ieee754_rem_pio2f+0x50>
 800d5b8:	429d      	cmp	r5, r3
 800d5ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5be:	d00e      	beq.n	800d5de <__ieee754_rem_pio2f+0x9e>
 800d5c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d790 <__ieee754_rem_pio2f+0x250>
 800d5c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d5c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d5cc:	ed80 0a00 	vstr	s0, [r0]
 800d5d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d8:	edc4 7a01 	vstr	s15, [r4, #4]
 800d5dc:	e7dd      	b.n	800d59a <__ieee754_rem_pio2f+0x5a>
 800d5de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d794 <__ieee754_rem_pio2f+0x254>
 800d5e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d798 <__ieee754_rem_pio2f+0x258>
 800d5e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d5ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d5ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d5f2:	edc0 6a00 	vstr	s13, [r0]
 800d5f6:	e7eb      	b.n	800d5d0 <__ieee754_rem_pio2f+0x90>
 800d5f8:	4b68      	ldr	r3, [pc, #416]	; (800d79c <__ieee754_rem_pio2f+0x25c>)
 800d5fa:	429d      	cmp	r5, r3
 800d5fc:	dc72      	bgt.n	800d6e4 <__ieee754_rem_pio2f+0x1a4>
 800d5fe:	f000 fdb1 	bl	800e164 <fabsf>
 800d602:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d7a0 <__ieee754_rem_pio2f+0x260>
 800d606:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d60a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d60e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d616:	ee17 0a90 	vmov	r0, s15
 800d61a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d788 <__ieee754_rem_pio2f+0x248>
 800d61e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d622:	281f      	cmp	r0, #31
 800d624:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d790 <__ieee754_rem_pio2f+0x250>
 800d628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d62c:	eeb1 6a47 	vneg.f32	s12, s14
 800d630:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d634:	ee16 2a90 	vmov	r2, s13
 800d638:	dc1c      	bgt.n	800d674 <__ieee754_rem_pio2f+0x134>
 800d63a:	495a      	ldr	r1, [pc, #360]	; (800d7a4 <__ieee754_rem_pio2f+0x264>)
 800d63c:	1e47      	subs	r7, r0, #1
 800d63e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d642:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d646:	428b      	cmp	r3, r1
 800d648:	d014      	beq.n	800d674 <__ieee754_rem_pio2f+0x134>
 800d64a:	6022      	str	r2, [r4, #0]
 800d64c:	ed94 7a00 	vldr	s14, [r4]
 800d650:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d654:	2e00      	cmp	r6, #0
 800d656:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d65a:	ed84 0a01 	vstr	s0, [r4, #4]
 800d65e:	da9c      	bge.n	800d59a <__ieee754_rem_pio2f+0x5a>
 800d660:	eeb1 7a47 	vneg.f32	s14, s14
 800d664:	eeb1 0a40 	vneg.f32	s0, s0
 800d668:	ed84 7a00 	vstr	s14, [r4]
 800d66c:	ed84 0a01 	vstr	s0, [r4, #4]
 800d670:	4240      	negs	r0, r0
 800d672:	e792      	b.n	800d59a <__ieee754_rem_pio2f+0x5a>
 800d674:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d678:	15eb      	asrs	r3, r5, #23
 800d67a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d67e:	2d08      	cmp	r5, #8
 800d680:	dde3      	ble.n	800d64a <__ieee754_rem_pio2f+0x10a>
 800d682:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d794 <__ieee754_rem_pio2f+0x254>
 800d686:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d798 <__ieee754_rem_pio2f+0x258>
 800d68a:	eef0 6a40 	vmov.f32	s13, s0
 800d68e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d692:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d696:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d69a:	eef0 7a40 	vmov.f32	s15, s0
 800d69e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d6a2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d6a6:	ee15 2a90 	vmov	r2, s11
 800d6aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d6ae:	1a5b      	subs	r3, r3, r1
 800d6b0:	2b19      	cmp	r3, #25
 800d6b2:	dc04      	bgt.n	800d6be <__ieee754_rem_pio2f+0x17e>
 800d6b4:	edc4 5a00 	vstr	s11, [r4]
 800d6b8:	eeb0 0a66 	vmov.f32	s0, s13
 800d6bc:	e7c6      	b.n	800d64c <__ieee754_rem_pio2f+0x10c>
 800d6be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d7a8 <__ieee754_rem_pio2f+0x268>
 800d6c2:	eeb0 0a66 	vmov.f32	s0, s13
 800d6c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d6ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d6ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d7ac <__ieee754_rem_pio2f+0x26c>
 800d6d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d6d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d6da:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d6de:	ed84 7a00 	vstr	s14, [r4]
 800d6e2:	e7b3      	b.n	800d64c <__ieee754_rem_pio2f+0x10c>
 800d6e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d6e8:	db06      	blt.n	800d6f8 <__ieee754_rem_pio2f+0x1b8>
 800d6ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d6ee:	edc0 7a01 	vstr	s15, [r0, #4]
 800d6f2:	edc0 7a00 	vstr	s15, [r0]
 800d6f6:	e733      	b.n	800d560 <__ieee754_rem_pio2f+0x20>
 800d6f8:	15ea      	asrs	r2, r5, #23
 800d6fa:	3a86      	subs	r2, #134	; 0x86
 800d6fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d700:	ee07 3a90 	vmov	s15, r3
 800d704:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d708:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d7b0 <__ieee754_rem_pio2f+0x270>
 800d70c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d714:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d718:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d71c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d720:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d728:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d72c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d730:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d738:	edcd 7a05 	vstr	s15, [sp, #20]
 800d73c:	d11e      	bne.n	800d77c <__ieee754_rem_pio2f+0x23c>
 800d73e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d746:	bf14      	ite	ne
 800d748:	2302      	movne	r3, #2
 800d74a:	2301      	moveq	r3, #1
 800d74c:	4919      	ldr	r1, [pc, #100]	; (800d7b4 <__ieee754_rem_pio2f+0x274>)
 800d74e:	9101      	str	r1, [sp, #4]
 800d750:	2102      	movs	r1, #2
 800d752:	9100      	str	r1, [sp, #0]
 800d754:	a803      	add	r0, sp, #12
 800d756:	4621      	mov	r1, r4
 800d758:	f000 f892 	bl	800d880 <__kernel_rem_pio2f>
 800d75c:	2e00      	cmp	r6, #0
 800d75e:	f6bf af1c 	bge.w	800d59a <__ieee754_rem_pio2f+0x5a>
 800d762:	edd4 7a00 	vldr	s15, [r4]
 800d766:	eef1 7a67 	vneg.f32	s15, s15
 800d76a:	edc4 7a00 	vstr	s15, [r4]
 800d76e:	edd4 7a01 	vldr	s15, [r4, #4]
 800d772:	eef1 7a67 	vneg.f32	s15, s15
 800d776:	edc4 7a01 	vstr	s15, [r4, #4]
 800d77a:	e779      	b.n	800d670 <__ieee754_rem_pio2f+0x130>
 800d77c:	2303      	movs	r3, #3
 800d77e:	e7e5      	b.n	800d74c <__ieee754_rem_pio2f+0x20c>
 800d780:	3f490fd8 	.word	0x3f490fd8
 800d784:	4016cbe3 	.word	0x4016cbe3
 800d788:	3fc90f80 	.word	0x3fc90f80
 800d78c:	3fc90fd0 	.word	0x3fc90fd0
 800d790:	37354443 	.word	0x37354443
 800d794:	37354400 	.word	0x37354400
 800d798:	2e85a308 	.word	0x2e85a308
 800d79c:	43490f80 	.word	0x43490f80
 800d7a0:	3f22f984 	.word	0x3f22f984
 800d7a4:	0800e974 	.word	0x0800e974
 800d7a8:	2e85a300 	.word	0x2e85a300
 800d7ac:	248d3132 	.word	0x248d3132
 800d7b0:	43800000 	.word	0x43800000
 800d7b4:	0800e9f4 	.word	0x0800e9f4

0800d7b8 <__ieee754_sqrtf>:
 800d7b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d7bc:	4770      	bx	lr
	...

0800d7c0 <__kernel_cosf>:
 800d7c0:	ee10 3a10 	vmov	r3, s0
 800d7c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d7c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d7cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d7d0:	da05      	bge.n	800d7de <__kernel_cosf+0x1e>
 800d7d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d7d6:	ee17 2a90 	vmov	r2, s15
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	d03d      	beq.n	800d85a <__kernel_cosf+0x9a>
 800d7de:	ee60 5a00 	vmul.f32	s11, s0, s0
 800d7e2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d860 <__kernel_cosf+0xa0>
 800d7e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d864 <__kernel_cosf+0xa4>
 800d7ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800d868 <__kernel_cosf+0xa8>
 800d7ee:	4a1f      	ldr	r2, [pc, #124]	; (800d86c <__kernel_cosf+0xac>)
 800d7f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d870 <__kernel_cosf+0xb0>
 800d7fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d7fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d874 <__kernel_cosf+0xb4>
 800d802:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d806:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d878 <__kernel_cosf+0xb8>
 800d80a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d80e:	eeb0 7a66 	vmov.f32	s14, s13
 800d812:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d816:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d81a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800d81e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800d822:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800d826:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d82a:	dc04      	bgt.n	800d836 <__kernel_cosf+0x76>
 800d82c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d830:	ee36 0a47 	vsub.f32	s0, s12, s14
 800d834:	4770      	bx	lr
 800d836:	4a11      	ldr	r2, [pc, #68]	; (800d87c <__kernel_cosf+0xbc>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	bfda      	itte	le
 800d83c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d840:	ee06 3a90 	vmovle	s13, r3
 800d844:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800d848:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d84c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800d850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d854:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d858:	4770      	bx	lr
 800d85a:	eeb0 0a46 	vmov.f32	s0, s12
 800d85e:	4770      	bx	lr
 800d860:	ad47d74e 	.word	0xad47d74e
 800d864:	310f74f6 	.word	0x310f74f6
 800d868:	3d2aaaab 	.word	0x3d2aaaab
 800d86c:	3e999999 	.word	0x3e999999
 800d870:	b493f27c 	.word	0xb493f27c
 800d874:	37d00d01 	.word	0x37d00d01
 800d878:	bab60b61 	.word	0xbab60b61
 800d87c:	3f480000 	.word	0x3f480000

0800d880 <__kernel_rem_pio2f>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	ed2d 8b04 	vpush	{d8-d9}
 800d888:	b0d9      	sub	sp, #356	; 0x164
 800d88a:	4688      	mov	r8, r1
 800d88c:	9002      	str	r0, [sp, #8]
 800d88e:	49bb      	ldr	r1, [pc, #748]	; (800db7c <__kernel_rem_pio2f+0x2fc>)
 800d890:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800d898:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800d89c:	1e59      	subs	r1, r3, #1
 800d89e:	1d13      	adds	r3, r2, #4
 800d8a0:	db27      	blt.n	800d8f2 <__kernel_rem_pio2f+0x72>
 800d8a2:	f1b2 0b03 	subs.w	fp, r2, #3
 800d8a6:	bf48      	it	mi
 800d8a8:	f102 0b04 	addmi.w	fp, r2, #4
 800d8ac:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800d8b0:	1c45      	adds	r5, r0, #1
 800d8b2:	00ec      	lsls	r4, r5, #3
 800d8b4:	1a47      	subs	r7, r0, r1
 800d8b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800db8c <__kernel_rem_pio2f+0x30c>
 800d8ba:	9403      	str	r4, [sp, #12]
 800d8bc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800d8c0:	eb0a 0c01 	add.w	ip, sl, r1
 800d8c4:	ae1c      	add	r6, sp, #112	; 0x70
 800d8c6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800d8ca:	2400      	movs	r4, #0
 800d8cc:	4564      	cmp	r4, ip
 800d8ce:	dd12      	ble.n	800d8f6 <__kernel_rem_pio2f+0x76>
 800d8d0:	9b01      	ldr	r3, [sp, #4]
 800d8d2:	ac1c      	add	r4, sp, #112	; 0x70
 800d8d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d8d8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800d8dc:	f04f 0c00 	mov.w	ip, #0
 800d8e0:	45d4      	cmp	ip, sl
 800d8e2:	dc27      	bgt.n	800d934 <__kernel_rem_pio2f+0xb4>
 800d8e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d8e8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800db8c <__kernel_rem_pio2f+0x30c>
 800d8ec:	4627      	mov	r7, r4
 800d8ee:	2600      	movs	r6, #0
 800d8f0:	e016      	b.n	800d920 <__kernel_rem_pio2f+0xa0>
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	e7dc      	b.n	800d8b0 <__kernel_rem_pio2f+0x30>
 800d8f6:	42e7      	cmn	r7, r4
 800d8f8:	bf5d      	ittte	pl
 800d8fa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800d8fe:	ee07 3a90 	vmovpl	s15, r3
 800d902:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d906:	eef0 7a47 	vmovmi.f32	s15, s14
 800d90a:	ece6 7a01 	vstmia	r6!, {s15}
 800d90e:	3401      	adds	r4, #1
 800d910:	e7dc      	b.n	800d8cc <__kernel_rem_pio2f+0x4c>
 800d912:	ecf9 6a01 	vldmia	r9!, {s13}
 800d916:	ed97 7a00 	vldr	s14, [r7]
 800d91a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d91e:	3601      	adds	r6, #1
 800d920:	428e      	cmp	r6, r1
 800d922:	f1a7 0704 	sub.w	r7, r7, #4
 800d926:	ddf4      	ble.n	800d912 <__kernel_rem_pio2f+0x92>
 800d928:	eceb 7a01 	vstmia	fp!, {s15}
 800d92c:	f10c 0c01 	add.w	ip, ip, #1
 800d930:	3404      	adds	r4, #4
 800d932:	e7d5      	b.n	800d8e0 <__kernel_rem_pio2f+0x60>
 800d934:	ab08      	add	r3, sp, #32
 800d936:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d93a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800db88 <__kernel_rem_pio2f+0x308>
 800d93e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800db84 <__kernel_rem_pio2f+0x304>
 800d942:	9304      	str	r3, [sp, #16]
 800d944:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800d948:	4656      	mov	r6, sl
 800d94a:	00b3      	lsls	r3, r6, #2
 800d94c:	9305      	str	r3, [sp, #20]
 800d94e:	ab58      	add	r3, sp, #352	; 0x160
 800d950:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d954:	ac08      	add	r4, sp, #32
 800d956:	ab44      	add	r3, sp, #272	; 0x110
 800d958:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d95c:	46a4      	mov	ip, r4
 800d95e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d962:	4637      	mov	r7, r6
 800d964:	2f00      	cmp	r7, #0
 800d966:	f1a0 0004 	sub.w	r0, r0, #4
 800d96a:	dc4f      	bgt.n	800da0c <__kernel_rem_pio2f+0x18c>
 800d96c:	4628      	mov	r0, r5
 800d96e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d972:	f000 fc47 	bl	800e204 <scalbnf>
 800d976:	eeb0 8a40 	vmov.f32	s16, s0
 800d97a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d97e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d982:	f000 fbf7 	bl	800e174 <floorf>
 800d986:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d98a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d98e:	2d00      	cmp	r5, #0
 800d990:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d994:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d998:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800d99c:	ee17 9a90 	vmov	r9, s15
 800d9a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d9a4:	dd44      	ble.n	800da30 <__kernel_rem_pio2f+0x1b0>
 800d9a6:	f106 3cff 	add.w	ip, r6, #4294967295
 800d9aa:	ab08      	add	r3, sp, #32
 800d9ac:	f1c5 0e08 	rsb	lr, r5, #8
 800d9b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d9b4:	fa47 f00e 	asr.w	r0, r7, lr
 800d9b8:	4481      	add	r9, r0
 800d9ba:	fa00 f00e 	lsl.w	r0, r0, lr
 800d9be:	1a3f      	subs	r7, r7, r0
 800d9c0:	f1c5 0007 	rsb	r0, r5, #7
 800d9c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d9c8:	4107      	asrs	r7, r0
 800d9ca:	2f00      	cmp	r7, #0
 800d9cc:	dd3f      	ble.n	800da4e <__kernel_rem_pio2f+0x1ce>
 800d9ce:	f04f 0e00 	mov.w	lr, #0
 800d9d2:	f109 0901 	add.w	r9, r9, #1
 800d9d6:	4673      	mov	r3, lr
 800d9d8:	4576      	cmp	r6, lr
 800d9da:	dc6b      	bgt.n	800dab4 <__kernel_rem_pio2f+0x234>
 800d9dc:	2d00      	cmp	r5, #0
 800d9de:	dd04      	ble.n	800d9ea <__kernel_rem_pio2f+0x16a>
 800d9e0:	2d01      	cmp	r5, #1
 800d9e2:	d078      	beq.n	800dad6 <__kernel_rem_pio2f+0x256>
 800d9e4:	2d02      	cmp	r5, #2
 800d9e6:	f000 8081 	beq.w	800daec <__kernel_rem_pio2f+0x26c>
 800d9ea:	2f02      	cmp	r7, #2
 800d9ec:	d12f      	bne.n	800da4e <__kernel_rem_pio2f+0x1ce>
 800d9ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9f2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d9f6:	b353      	cbz	r3, 800da4e <__kernel_rem_pio2f+0x1ce>
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d9fe:	f000 fc01 	bl	800e204 <scalbnf>
 800da02:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800da06:	ee38 8a40 	vsub.f32	s16, s16, s0
 800da0a:	e020      	b.n	800da4e <__kernel_rem_pio2f+0x1ce>
 800da0c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800da10:	3f01      	subs	r7, #1
 800da12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da1a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800da1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800da22:	ecac 0a01 	vstmia	ip!, {s0}
 800da26:	ed90 0a00 	vldr	s0, [r0]
 800da2a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800da2e:	e799      	b.n	800d964 <__kernel_rem_pio2f+0xe4>
 800da30:	d105      	bne.n	800da3e <__kernel_rem_pio2f+0x1be>
 800da32:	1e70      	subs	r0, r6, #1
 800da34:	ab08      	add	r3, sp, #32
 800da36:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800da3a:	11ff      	asrs	r7, r7, #7
 800da3c:	e7c5      	b.n	800d9ca <__kernel_rem_pio2f+0x14a>
 800da3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800da42:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800da46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4a:	da31      	bge.n	800dab0 <__kernel_rem_pio2f+0x230>
 800da4c:	2700      	movs	r7, #0
 800da4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800da52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da56:	f040 809b 	bne.w	800db90 <__kernel_rem_pio2f+0x310>
 800da5a:	1e74      	subs	r4, r6, #1
 800da5c:	46a4      	mov	ip, r4
 800da5e:	2000      	movs	r0, #0
 800da60:	45d4      	cmp	ip, sl
 800da62:	da4a      	bge.n	800dafa <__kernel_rem_pio2f+0x27a>
 800da64:	2800      	cmp	r0, #0
 800da66:	d07a      	beq.n	800db5e <__kernel_rem_pio2f+0x2de>
 800da68:	ab08      	add	r3, sp, #32
 800da6a:	3d08      	subs	r5, #8
 800da6c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 8081 	beq.w	800db78 <__kernel_rem_pio2f+0x2f8>
 800da76:	4628      	mov	r0, r5
 800da78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800da7c:	00a5      	lsls	r5, r4, #2
 800da7e:	f000 fbc1 	bl	800e204 <scalbnf>
 800da82:	aa44      	add	r2, sp, #272	; 0x110
 800da84:	1d2b      	adds	r3, r5, #4
 800da86:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800db88 <__kernel_rem_pio2f+0x308>
 800da8a:	18d1      	adds	r1, r2, r3
 800da8c:	4622      	mov	r2, r4
 800da8e:	2a00      	cmp	r2, #0
 800da90:	f280 80ae 	bge.w	800dbf0 <__kernel_rem_pio2f+0x370>
 800da94:	4622      	mov	r2, r4
 800da96:	2a00      	cmp	r2, #0
 800da98:	f2c0 80cc 	blt.w	800dc34 <__kernel_rem_pio2f+0x3b4>
 800da9c:	a944      	add	r1, sp, #272	; 0x110
 800da9e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800daa2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800db80 <__kernel_rem_pio2f+0x300>
 800daa6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800db8c <__kernel_rem_pio2f+0x30c>
 800daaa:	2000      	movs	r0, #0
 800daac:	1aa1      	subs	r1, r4, r2
 800daae:	e0b6      	b.n	800dc1e <__kernel_rem_pio2f+0x39e>
 800dab0:	2702      	movs	r7, #2
 800dab2:	e78c      	b.n	800d9ce <__kernel_rem_pio2f+0x14e>
 800dab4:	6820      	ldr	r0, [r4, #0]
 800dab6:	b94b      	cbnz	r3, 800dacc <__kernel_rem_pio2f+0x24c>
 800dab8:	b118      	cbz	r0, 800dac2 <__kernel_rem_pio2f+0x242>
 800daba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800dabe:	6020      	str	r0, [r4, #0]
 800dac0:	2001      	movs	r0, #1
 800dac2:	f10e 0e01 	add.w	lr, lr, #1
 800dac6:	3404      	adds	r4, #4
 800dac8:	4603      	mov	r3, r0
 800daca:	e785      	b.n	800d9d8 <__kernel_rem_pio2f+0x158>
 800dacc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800dad0:	6020      	str	r0, [r4, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	e7f5      	b.n	800dac2 <__kernel_rem_pio2f+0x242>
 800dad6:	1e74      	subs	r4, r6, #1
 800dad8:	a808      	add	r0, sp, #32
 800dada:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800dade:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800dae2:	f10d 0c20 	add.w	ip, sp, #32
 800dae6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800daea:	e77e      	b.n	800d9ea <__kernel_rem_pio2f+0x16a>
 800daec:	1e74      	subs	r4, r6, #1
 800daee:	a808      	add	r0, sp, #32
 800daf0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800daf4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800daf8:	e7f3      	b.n	800dae2 <__kernel_rem_pio2f+0x262>
 800dafa:	ab08      	add	r3, sp, #32
 800dafc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800db00:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db04:	4318      	orrs	r0, r3
 800db06:	e7ab      	b.n	800da60 <__kernel_rem_pio2f+0x1e0>
 800db08:	f10c 0c01 	add.w	ip, ip, #1
 800db0c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800db10:	2c00      	cmp	r4, #0
 800db12:	d0f9      	beq.n	800db08 <__kernel_rem_pio2f+0x288>
 800db14:	9b05      	ldr	r3, [sp, #20]
 800db16:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800db1a:	eb0d 0003 	add.w	r0, sp, r3
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	18f4      	adds	r4, r6, r3
 800db22:	ab1c      	add	r3, sp, #112	; 0x70
 800db24:	1c77      	adds	r7, r6, #1
 800db26:	384c      	subs	r0, #76	; 0x4c
 800db28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db2c:	4466      	add	r6, ip
 800db2e:	42be      	cmp	r6, r7
 800db30:	f6ff af0b 	blt.w	800d94a <__kernel_rem_pio2f+0xca>
 800db34:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800db38:	f8dd e008 	ldr.w	lr, [sp, #8]
 800db3c:	ee07 3a90 	vmov	s15, r3
 800db40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db44:	f04f 0c00 	mov.w	ip, #0
 800db48:	ece4 7a01 	vstmia	r4!, {s15}
 800db4c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800db8c <__kernel_rem_pio2f+0x30c>
 800db50:	46a1      	mov	r9, r4
 800db52:	458c      	cmp	ip, r1
 800db54:	dd07      	ble.n	800db66 <__kernel_rem_pio2f+0x2e6>
 800db56:	ece0 7a01 	vstmia	r0!, {s15}
 800db5a:	3701      	adds	r7, #1
 800db5c:	e7e7      	b.n	800db2e <__kernel_rem_pio2f+0x2ae>
 800db5e:	9804      	ldr	r0, [sp, #16]
 800db60:	f04f 0c01 	mov.w	ip, #1
 800db64:	e7d2      	b.n	800db0c <__kernel_rem_pio2f+0x28c>
 800db66:	ecfe 6a01 	vldmia	lr!, {s13}
 800db6a:	ed39 7a01 	vldmdb	r9!, {s14}
 800db6e:	f10c 0c01 	add.w	ip, ip, #1
 800db72:	eee6 7a87 	vfma.f32	s15, s13, s14
 800db76:	e7ec      	b.n	800db52 <__kernel_rem_pio2f+0x2d2>
 800db78:	3c01      	subs	r4, #1
 800db7a:	e775      	b.n	800da68 <__kernel_rem_pio2f+0x1e8>
 800db7c:	0800ed38 	.word	0x0800ed38
 800db80:	0800ed0c 	.word	0x0800ed0c
 800db84:	43800000 	.word	0x43800000
 800db88:	3b800000 	.word	0x3b800000
 800db8c:	00000000 	.word	0x00000000
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	eeb0 0a48 	vmov.f32	s0, s16
 800db96:	1a98      	subs	r0, r3, r2
 800db98:	f000 fb34 	bl	800e204 <scalbnf>
 800db9c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800db84 <__kernel_rem_pio2f+0x304>
 800dba0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba8:	db19      	blt.n	800dbde <__kernel_rem_pio2f+0x35e>
 800dbaa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800db88 <__kernel_rem_pio2f+0x308>
 800dbae:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dbb2:	aa08      	add	r2, sp, #32
 800dbb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbb8:	1c74      	adds	r4, r6, #1
 800dbba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbbe:	3508      	adds	r5, #8
 800dbc0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dbc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dbcc:	ee10 3a10 	vmov	r3, s0
 800dbd0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800dbd4:	ee17 3a90 	vmov	r3, s15
 800dbd8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dbdc:	e74b      	b.n	800da76 <__kernel_rem_pio2f+0x1f6>
 800dbde:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dbe2:	aa08      	add	r2, sp, #32
 800dbe4:	ee10 3a10 	vmov	r3, s0
 800dbe8:	4634      	mov	r4, r6
 800dbea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800dbee:	e742      	b.n	800da76 <__kernel_rem_pio2f+0x1f6>
 800dbf0:	a808      	add	r0, sp, #32
 800dbf2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800dbf6:	9001      	str	r0, [sp, #4]
 800dbf8:	ee07 0a90 	vmov	s15, r0
 800dbfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc00:	3a01      	subs	r2, #1
 800dc02:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dc06:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dc0a:	ed61 7a01 	vstmdb	r1!, {s15}
 800dc0e:	e73e      	b.n	800da8e <__kernel_rem_pio2f+0x20e>
 800dc10:	ecfc 6a01 	vldmia	ip!, {s13}
 800dc14:	ecb6 7a01 	vldmia	r6!, {s14}
 800dc18:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	4550      	cmp	r0, sl
 800dc20:	dc01      	bgt.n	800dc26 <__kernel_rem_pio2f+0x3a6>
 800dc22:	4288      	cmp	r0, r1
 800dc24:	ddf4      	ble.n	800dc10 <__kernel_rem_pio2f+0x390>
 800dc26:	a858      	add	r0, sp, #352	; 0x160
 800dc28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc2c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800dc30:	3a01      	subs	r2, #1
 800dc32:	e730      	b.n	800da96 <__kernel_rem_pio2f+0x216>
 800dc34:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800dc36:	2a02      	cmp	r2, #2
 800dc38:	dc09      	bgt.n	800dc4e <__kernel_rem_pio2f+0x3ce>
 800dc3a:	2a00      	cmp	r2, #0
 800dc3c:	dc2a      	bgt.n	800dc94 <__kernel_rem_pio2f+0x414>
 800dc3e:	d043      	beq.n	800dcc8 <__kernel_rem_pio2f+0x448>
 800dc40:	f009 0007 	and.w	r0, r9, #7
 800dc44:	b059      	add	sp, #356	; 0x164
 800dc46:	ecbd 8b04 	vpop	{d8-d9}
 800dc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	d1f5      	bne.n	800dc40 <__kernel_rem_pio2f+0x3c0>
 800dc54:	ab30      	add	r3, sp, #192	; 0xc0
 800dc56:	442b      	add	r3, r5
 800dc58:	461a      	mov	r2, r3
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	f1a1 0104 	sub.w	r1, r1, #4
 800dc64:	dc51      	bgt.n	800dd0a <__kernel_rem_pio2f+0x48a>
 800dc66:	4621      	mov	r1, r4
 800dc68:	2901      	cmp	r1, #1
 800dc6a:	f1a2 0204 	sub.w	r2, r2, #4
 800dc6e:	dc5c      	bgt.n	800dd2a <__kernel_rem_pio2f+0x4aa>
 800dc70:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800db8c <__kernel_rem_pio2f+0x30c>
 800dc74:	3304      	adds	r3, #4
 800dc76:	2c01      	cmp	r4, #1
 800dc78:	dc67      	bgt.n	800dd4a <__kernel_rem_pio2f+0x4ca>
 800dc7a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800dc7e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800dc82:	2f00      	cmp	r7, #0
 800dc84:	d167      	bne.n	800dd56 <__kernel_rem_pio2f+0x4d6>
 800dc86:	edc8 6a00 	vstr	s13, [r8]
 800dc8a:	ed88 7a01 	vstr	s14, [r8, #4]
 800dc8e:	edc8 7a02 	vstr	s15, [r8, #8]
 800dc92:	e7d5      	b.n	800dc40 <__kernel_rem_pio2f+0x3c0>
 800dc94:	aa30      	add	r2, sp, #192	; 0xc0
 800dc96:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800db8c <__kernel_rem_pio2f+0x30c>
 800dc9a:	4413      	add	r3, r2
 800dc9c:	4622      	mov	r2, r4
 800dc9e:	2a00      	cmp	r2, #0
 800dca0:	da24      	bge.n	800dcec <__kernel_rem_pio2f+0x46c>
 800dca2:	b34f      	cbz	r7, 800dcf8 <__kernel_rem_pio2f+0x478>
 800dca4:	eef1 7a47 	vneg.f32	s15, s14
 800dca8:	edc8 7a00 	vstr	s15, [r8]
 800dcac:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800dcb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcb4:	aa31      	add	r2, sp, #196	; 0xc4
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	429c      	cmp	r4, r3
 800dcba:	da20      	bge.n	800dcfe <__kernel_rem_pio2f+0x47e>
 800dcbc:	b10f      	cbz	r7, 800dcc2 <__kernel_rem_pio2f+0x442>
 800dcbe:	eef1 7a67 	vneg.f32	s15, s15
 800dcc2:	edc8 7a01 	vstr	s15, [r8, #4]
 800dcc6:	e7bb      	b.n	800dc40 <__kernel_rem_pio2f+0x3c0>
 800dcc8:	aa30      	add	r2, sp, #192	; 0xc0
 800dcca:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800db8c <__kernel_rem_pio2f+0x30c>
 800dcce:	4413      	add	r3, r2
 800dcd0:	2c00      	cmp	r4, #0
 800dcd2:	da05      	bge.n	800dce0 <__kernel_rem_pio2f+0x460>
 800dcd4:	b10f      	cbz	r7, 800dcda <__kernel_rem_pio2f+0x45a>
 800dcd6:	eef1 7a67 	vneg.f32	s15, s15
 800dcda:	edc8 7a00 	vstr	s15, [r8]
 800dcde:	e7af      	b.n	800dc40 <__kernel_rem_pio2f+0x3c0>
 800dce0:	ed33 7a01 	vldmdb	r3!, {s14}
 800dce4:	3c01      	subs	r4, #1
 800dce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcea:	e7f1      	b.n	800dcd0 <__kernel_rem_pio2f+0x450>
 800dcec:	ed73 7a01 	vldmdb	r3!, {s15}
 800dcf0:	3a01      	subs	r2, #1
 800dcf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dcf6:	e7d2      	b.n	800dc9e <__kernel_rem_pio2f+0x41e>
 800dcf8:	eef0 7a47 	vmov.f32	s15, s14
 800dcfc:	e7d4      	b.n	800dca8 <__kernel_rem_pio2f+0x428>
 800dcfe:	ecb2 7a01 	vldmia	r2!, {s14}
 800dd02:	3301      	adds	r3, #1
 800dd04:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd08:	e7d6      	b.n	800dcb8 <__kernel_rem_pio2f+0x438>
 800dd0a:	edd1 7a00 	vldr	s15, [r1]
 800dd0e:	edd1 6a01 	vldr	s13, [r1, #4]
 800dd12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dd16:	3801      	subs	r0, #1
 800dd18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd1c:	ed81 7a00 	vstr	s14, [r1]
 800dd20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd24:	edc1 7a01 	vstr	s15, [r1, #4]
 800dd28:	e799      	b.n	800dc5e <__kernel_rem_pio2f+0x3de>
 800dd2a:	edd2 7a00 	vldr	s15, [r2]
 800dd2e:	edd2 6a01 	vldr	s13, [r2, #4]
 800dd32:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dd36:	3901      	subs	r1, #1
 800dd38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd3c:	ed82 7a00 	vstr	s14, [r2]
 800dd40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd44:	edc2 7a01 	vstr	s15, [r2, #4]
 800dd48:	e78e      	b.n	800dc68 <__kernel_rem_pio2f+0x3e8>
 800dd4a:	ed33 7a01 	vldmdb	r3!, {s14}
 800dd4e:	3c01      	subs	r4, #1
 800dd50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd54:	e78f      	b.n	800dc76 <__kernel_rem_pio2f+0x3f6>
 800dd56:	eef1 6a66 	vneg.f32	s13, s13
 800dd5a:	eeb1 7a47 	vneg.f32	s14, s14
 800dd5e:	edc8 6a00 	vstr	s13, [r8]
 800dd62:	ed88 7a01 	vstr	s14, [r8, #4]
 800dd66:	eef1 7a67 	vneg.f32	s15, s15
 800dd6a:	e790      	b.n	800dc8e <__kernel_rem_pio2f+0x40e>

0800dd6c <__kernel_sinf>:
 800dd6c:	ee10 3a10 	vmov	r3, s0
 800dd70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dd78:	da04      	bge.n	800dd84 <__kernel_sinf+0x18>
 800dd7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dd7e:	ee17 3a90 	vmov	r3, s15
 800dd82:	b35b      	cbz	r3, 800dddc <__kernel_sinf+0x70>
 800dd84:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dd88:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dde0 <__kernel_sinf+0x74>
 800dd8c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800dde4 <__kernel_sinf+0x78>
 800dd90:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dd94:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dde8 <__kernel_sinf+0x7c>
 800dd98:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dd9c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ddec <__kernel_sinf+0x80>
 800dda0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dda4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ddf0 <__kernel_sinf+0x84>
 800dda8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ddac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ddb0:	b930      	cbnz	r0, 800ddc0 <__kernel_sinf+0x54>
 800ddb2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ddf4 <__kernel_sinf+0x88>
 800ddb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ddba:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ddbe:	4770      	bx	lr
 800ddc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ddc4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ddc8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ddcc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ddd0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ddf8 <__kernel_sinf+0x8c>
 800ddd4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ddd8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	2f2ec9d3 	.word	0x2f2ec9d3
 800dde4:	b2d72f34 	.word	0xb2d72f34
 800dde8:	3638ef1b 	.word	0x3638ef1b
 800ddec:	b9500d01 	.word	0xb9500d01
 800ddf0:	3c088889 	.word	0x3c088889
 800ddf4:	be2aaaab 	.word	0xbe2aaaab
 800ddf8:	3e2aaaab 	.word	0x3e2aaaab

0800ddfc <__kernel_tanf>:
 800ddfc:	b508      	push	{r3, lr}
 800ddfe:	ee10 3a10 	vmov	r3, s0
 800de02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800de06:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800de0a:	eef0 7a40 	vmov.f32	s15, s0
 800de0e:	da17      	bge.n	800de40 <__kernel_tanf+0x44>
 800de10:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800de14:	ee17 1a10 	vmov	r1, s14
 800de18:	bb41      	cbnz	r1, 800de6c <__kernel_tanf+0x70>
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	4313      	orrs	r3, r2
 800de1e:	d108      	bne.n	800de32 <__kernel_tanf+0x36>
 800de20:	f000 f9a0 	bl	800e164 <fabsf>
 800de24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de2c:	eeb0 0a67 	vmov.f32	s0, s15
 800de30:	bd08      	pop	{r3, pc}
 800de32:	2801      	cmp	r0, #1
 800de34:	d0fa      	beq.n	800de2c <__kernel_tanf+0x30>
 800de36:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800de3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de3e:	e7f5      	b.n	800de2c <__kernel_tanf+0x30>
 800de40:	494c      	ldr	r1, [pc, #304]	; (800df74 <__kernel_tanf+0x178>)
 800de42:	428a      	cmp	r2, r1
 800de44:	db12      	blt.n	800de6c <__kernel_tanf+0x70>
 800de46:	2b00      	cmp	r3, #0
 800de48:	bfb8      	it	lt
 800de4a:	eef1 7a40 	vneglt.f32	s15, s0
 800de4e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800df78 <__kernel_tanf+0x17c>
 800de52:	ee70 7a67 	vsub.f32	s15, s0, s15
 800de56:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800df7c <__kernel_tanf+0x180>
 800de5a:	bfb8      	it	lt
 800de5c:	eef1 0a60 	vneglt.f32	s1, s1
 800de60:	ee70 0a60 	vsub.f32	s1, s0, s1
 800de64:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800de68:	eddf 0a45 	vldr	s1, [pc, #276]	; 800df80 <__kernel_tanf+0x184>
 800de6c:	eddf 5a45 	vldr	s11, [pc, #276]	; 800df84 <__kernel_tanf+0x188>
 800de70:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800df88 <__kernel_tanf+0x18c>
 800de74:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800df8c <__kernel_tanf+0x190>
 800de78:	493e      	ldr	r1, [pc, #248]	; (800df74 <__kernel_tanf+0x178>)
 800de7a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800de7e:	428a      	cmp	r2, r1
 800de80:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800de84:	eea7 6a25 	vfma.f32	s12, s14, s11
 800de88:	eddf 5a41 	vldr	s11, [pc, #260]	; 800df90 <__kernel_tanf+0x194>
 800de8c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800de90:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800df94 <__kernel_tanf+0x198>
 800de94:	eea5 6a87 	vfma.f32	s12, s11, s14
 800de98:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800df98 <__kernel_tanf+0x19c>
 800de9c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800dea0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800df9c <__kernel_tanf+0x1a0>
 800dea4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800dea8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800dfa0 <__kernel_tanf+0x1a4>
 800deac:	eee7 5a05 	vfma.f32	s11, s14, s10
 800deb0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800dfa4 <__kernel_tanf+0x1a8>
 800deb4:	eea5 5a87 	vfma.f32	s10, s11, s14
 800deb8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800dfa8 <__kernel_tanf+0x1ac>
 800debc:	eee5 5a07 	vfma.f32	s11, s10, s14
 800dec0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800dfac <__kernel_tanf+0x1b0>
 800dec4:	eea5 5a87 	vfma.f32	s10, s11, s14
 800dec8:	eddf 5a39 	vldr	s11, [pc, #228]	; 800dfb0 <__kernel_tanf+0x1b4>
 800decc:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ded0:	eeb0 7a46 	vmov.f32	s14, s12
 800ded4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ded8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800dedc:	eeb0 6a60 	vmov.f32	s12, s1
 800dee0:	eea7 6a05 	vfma.f32	s12, s14, s10
 800dee4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800dfb4 <__kernel_tanf+0x1b8>
 800dee8:	eee6 0a26 	vfma.f32	s1, s12, s13
 800deec:	eee5 0a07 	vfma.f32	s1, s10, s14
 800def0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800def4:	db1d      	blt.n	800df32 <__kernel_tanf+0x136>
 800def6:	ee06 0a90 	vmov	s13, r0
 800defa:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800defe:	ee27 6a07 	vmul.f32	s12, s14, s14
 800df02:	ee37 7a00 	vadd.f32	s14, s14, s0
 800df06:	179b      	asrs	r3, r3, #30
 800df08:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800df0c:	f003 0302 	and.w	r3, r3, #2
 800df10:	f1c3 0301 	rsb	r3, r3, #1
 800df14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800df18:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800df1c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800df20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800df24:	ee07 3a90 	vmov	s15, r3
 800df28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800df30:	e77c      	b.n	800de2c <__kernel_tanf+0x30>
 800df32:	2801      	cmp	r0, #1
 800df34:	d01b      	beq.n	800df6e <__kernel_tanf+0x172>
 800df36:	4b20      	ldr	r3, [pc, #128]	; (800dfb8 <__kernel_tanf+0x1bc>)
 800df38:	ee17 2a10 	vmov	r2, s14
 800df3c:	401a      	ands	r2, r3
 800df3e:	ee06 2a10 	vmov	s12, r2
 800df42:	ee76 7a67 	vsub.f32	s15, s12, s15
 800df46:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800df4a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800df4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800df52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df56:	ee16 2a90 	vmov	r2, s13
 800df5a:	4013      	ands	r3, r2
 800df5c:	ee07 3a90 	vmov	s15, r3
 800df60:	eea6 7a27 	vfma.f32	s14, s12, s15
 800df64:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800df68:	eee7 7a26 	vfma.f32	s15, s14, s13
 800df6c:	e75e      	b.n	800de2c <__kernel_tanf+0x30>
 800df6e:	eef0 7a47 	vmov.f32	s15, s14
 800df72:	e75b      	b.n	800de2c <__kernel_tanf+0x30>
 800df74:	3f2ca140 	.word	0x3f2ca140
 800df78:	3f490fda 	.word	0x3f490fda
 800df7c:	33222168 	.word	0x33222168
 800df80:	00000000 	.word	0x00000000
 800df84:	b79bae5f 	.word	0xb79bae5f
 800df88:	38a3f445 	.word	0x38a3f445
 800df8c:	37d95384 	.word	0x37d95384
 800df90:	3a1a26c8 	.word	0x3a1a26c8
 800df94:	3b6b6916 	.word	0x3b6b6916
 800df98:	3cb327a4 	.word	0x3cb327a4
 800df9c:	3e088889 	.word	0x3e088889
 800dfa0:	3895c07a 	.word	0x3895c07a
 800dfa4:	398137b9 	.word	0x398137b9
 800dfa8:	3abede48 	.word	0x3abede48
 800dfac:	3c11371f 	.word	0x3c11371f
 800dfb0:	3d5d0dd1 	.word	0x3d5d0dd1
 800dfb4:	3eaaaaab 	.word	0x3eaaaaab
 800dfb8:	fffff000 	.word	0xfffff000

0800dfbc <atanf>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	ee10 5a10 	vmov	r5, s0
 800dfc2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dfc6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800dfca:	eef0 7a40 	vmov.f32	s15, s0
 800dfce:	db10      	blt.n	800dff2 <atanf+0x36>
 800dfd0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800dfd4:	dd04      	ble.n	800dfe0 <atanf+0x24>
 800dfd6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800dfda:	eeb0 0a67 	vmov.f32	s0, s15
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800e118 <atanf+0x15c>
 800dfe4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800e11c <atanf+0x160>
 800dfe8:	2d00      	cmp	r5, #0
 800dfea:	bfd8      	it	le
 800dfec:	eef0 7a40 	vmovle.f32	s15, s0
 800dff0:	e7f3      	b.n	800dfda <atanf+0x1e>
 800dff2:	4b4b      	ldr	r3, [pc, #300]	; (800e120 <atanf+0x164>)
 800dff4:	429c      	cmp	r4, r3
 800dff6:	dc10      	bgt.n	800e01a <atanf+0x5e>
 800dff8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800dffc:	da0a      	bge.n	800e014 <atanf+0x58>
 800dffe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e124 <atanf+0x168>
 800e002:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e00a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e012:	dce2      	bgt.n	800dfda <atanf+0x1e>
 800e014:	f04f 33ff 	mov.w	r3, #4294967295
 800e018:	e013      	b.n	800e042 <atanf+0x86>
 800e01a:	f000 f8a3 	bl	800e164 <fabsf>
 800e01e:	4b42      	ldr	r3, [pc, #264]	; (800e128 <atanf+0x16c>)
 800e020:	429c      	cmp	r4, r3
 800e022:	dc4f      	bgt.n	800e0c4 <atanf+0x108>
 800e024:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e028:	429c      	cmp	r4, r3
 800e02a:	dc41      	bgt.n	800e0b0 <atanf+0xf4>
 800e02c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e030:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e034:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e038:	2300      	movs	r3, #0
 800e03a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e03e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e042:	1c5a      	adds	r2, r3, #1
 800e044:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e048:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e12c <atanf+0x170>
 800e04c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800e130 <atanf+0x174>
 800e050:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800e134 <atanf+0x178>
 800e054:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e058:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e05c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e138 <atanf+0x17c>
 800e060:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e064:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e13c <atanf+0x180>
 800e068:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e06c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e140 <atanf+0x184>
 800e070:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e074:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e144 <atanf+0x188>
 800e078:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e07c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e148 <atanf+0x18c>
 800e080:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e084:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e14c <atanf+0x190>
 800e088:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e08c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800e150 <atanf+0x194>
 800e090:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e094:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e154 <atanf+0x198>
 800e098:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e09c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e0a0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e0a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e0a8:	d121      	bne.n	800e0ee <atanf+0x132>
 800e0aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0ae:	e794      	b.n	800dfda <atanf+0x1e>
 800e0b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e0b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e0b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e0bc:	2301      	movs	r3, #1
 800e0be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e0c2:	e7be      	b.n	800e042 <atanf+0x86>
 800e0c4:	4b24      	ldr	r3, [pc, #144]	; (800e158 <atanf+0x19c>)
 800e0c6:	429c      	cmp	r4, r3
 800e0c8:	dc0b      	bgt.n	800e0e2 <atanf+0x126>
 800e0ca:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800e0ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0e0:	e7af      	b.n	800e042 <atanf+0x86>
 800e0e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e0e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e0ea:	2303      	movs	r3, #3
 800e0ec:	e7a9      	b.n	800e042 <atanf+0x86>
 800e0ee:	4a1b      	ldr	r2, [pc, #108]	; (800e15c <atanf+0x1a0>)
 800e0f0:	491b      	ldr	r1, [pc, #108]	; (800e160 <atanf+0x1a4>)
 800e0f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e0f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e0fa:	ed93 0a00 	vldr	s0, [r3]
 800e0fe:	ee37 7a40 	vsub.f32	s14, s14, s0
 800e102:	ed92 0a00 	vldr	s0, [r2]
 800e106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e10a:	2d00      	cmp	r5, #0
 800e10c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e110:	bfb8      	it	lt
 800e112:	eef1 7a67 	vneglt.f32	s15, s15
 800e116:	e760      	b.n	800dfda <atanf+0x1e>
 800e118:	3fc90fdb 	.word	0x3fc90fdb
 800e11c:	bfc90fdb 	.word	0xbfc90fdb
 800e120:	3edfffff 	.word	0x3edfffff
 800e124:	7149f2ca 	.word	0x7149f2ca
 800e128:	3f97ffff 	.word	0x3f97ffff
 800e12c:	3c8569d7 	.word	0x3c8569d7
 800e130:	3d4bda59 	.word	0x3d4bda59
 800e134:	bd6ef16b 	.word	0xbd6ef16b
 800e138:	3d886b35 	.word	0x3d886b35
 800e13c:	3dba2e6e 	.word	0x3dba2e6e
 800e140:	3e124925 	.word	0x3e124925
 800e144:	3eaaaaab 	.word	0x3eaaaaab
 800e148:	bd15a221 	.word	0xbd15a221
 800e14c:	bd9d8795 	.word	0xbd9d8795
 800e150:	bde38e38 	.word	0xbde38e38
 800e154:	be4ccccd 	.word	0xbe4ccccd
 800e158:	401bffff 	.word	0x401bffff
 800e15c:	0800ed44 	.word	0x0800ed44
 800e160:	0800ed54 	.word	0x0800ed54

0800e164 <fabsf>:
 800e164:	ee10 3a10 	vmov	r3, s0
 800e168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e16c:	ee00 3a10 	vmov	s0, r3
 800e170:	4770      	bx	lr
	...

0800e174 <floorf>:
 800e174:	ee10 3a10 	vmov	r3, s0
 800e178:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e17c:	3a7f      	subs	r2, #127	; 0x7f
 800e17e:	2a16      	cmp	r2, #22
 800e180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e184:	dc2a      	bgt.n	800e1dc <floorf+0x68>
 800e186:	2a00      	cmp	r2, #0
 800e188:	da11      	bge.n	800e1ae <floorf+0x3a>
 800e18a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e1ec <floorf+0x78>
 800e18e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e192:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e19a:	dd05      	ble.n	800e1a8 <floorf+0x34>
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	da23      	bge.n	800e1e8 <floorf+0x74>
 800e1a0:	4a13      	ldr	r2, [pc, #76]	; (800e1f0 <floorf+0x7c>)
 800e1a2:	2900      	cmp	r1, #0
 800e1a4:	bf18      	it	ne
 800e1a6:	4613      	movne	r3, r2
 800e1a8:	ee00 3a10 	vmov	s0, r3
 800e1ac:	4770      	bx	lr
 800e1ae:	4911      	ldr	r1, [pc, #68]	; (800e1f4 <floorf+0x80>)
 800e1b0:	4111      	asrs	r1, r2
 800e1b2:	420b      	tst	r3, r1
 800e1b4:	d0fa      	beq.n	800e1ac <floorf+0x38>
 800e1b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e1ec <floorf+0x78>
 800e1ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e1be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c6:	ddef      	ble.n	800e1a8 <floorf+0x34>
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	bfbe      	ittt	lt
 800e1cc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e1d0:	fa40 f202 	asrlt.w	r2, r0, r2
 800e1d4:	189b      	addlt	r3, r3, r2
 800e1d6:	ea23 0301 	bic.w	r3, r3, r1
 800e1da:	e7e5      	b.n	800e1a8 <floorf+0x34>
 800e1dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e1e0:	d3e4      	bcc.n	800e1ac <floorf+0x38>
 800e1e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e1e6:	4770      	bx	lr
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	e7dd      	b.n	800e1a8 <floorf+0x34>
 800e1ec:	7149f2ca 	.word	0x7149f2ca
 800e1f0:	bf800000 	.word	0xbf800000
 800e1f4:	007fffff 	.word	0x007fffff

0800e1f8 <nanf>:
 800e1f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e200 <nanf+0x8>
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	7fc00000 	.word	0x7fc00000

0800e204 <scalbnf>:
 800e204:	ee10 3a10 	vmov	r3, s0
 800e208:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e20c:	d025      	beq.n	800e25a <scalbnf+0x56>
 800e20e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e212:	d302      	bcc.n	800e21a <scalbnf+0x16>
 800e214:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e218:	4770      	bx	lr
 800e21a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e21e:	d122      	bne.n	800e266 <scalbnf+0x62>
 800e220:	4b2a      	ldr	r3, [pc, #168]	; (800e2cc <scalbnf+0xc8>)
 800e222:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e2d0 <scalbnf+0xcc>
 800e226:	4298      	cmp	r0, r3
 800e228:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e22c:	db16      	blt.n	800e25c <scalbnf+0x58>
 800e22e:	ee10 3a10 	vmov	r3, s0
 800e232:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e236:	3a19      	subs	r2, #25
 800e238:	4402      	add	r2, r0
 800e23a:	2afe      	cmp	r2, #254	; 0xfe
 800e23c:	dd15      	ble.n	800e26a <scalbnf+0x66>
 800e23e:	ee10 3a10 	vmov	r3, s0
 800e242:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e2d4 <scalbnf+0xd0>
 800e246:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e2d8 <scalbnf+0xd4>
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	eeb0 7a67 	vmov.f32	s14, s15
 800e250:	bfb8      	it	lt
 800e252:	eef0 7a66 	vmovlt.f32	s15, s13
 800e256:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e25a:	4770      	bx	lr
 800e25c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e2dc <scalbnf+0xd8>
 800e260:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e264:	4770      	bx	lr
 800e266:	0dd2      	lsrs	r2, r2, #23
 800e268:	e7e6      	b.n	800e238 <scalbnf+0x34>
 800e26a:	2a00      	cmp	r2, #0
 800e26c:	dd06      	ble.n	800e27c <scalbnf+0x78>
 800e26e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e272:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e276:	ee00 3a10 	vmov	s0, r3
 800e27a:	4770      	bx	lr
 800e27c:	f112 0f16 	cmn.w	r2, #22
 800e280:	da1a      	bge.n	800e2b8 <scalbnf+0xb4>
 800e282:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e286:	4298      	cmp	r0, r3
 800e288:	ee10 3a10 	vmov	r3, s0
 800e28c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e290:	dd0a      	ble.n	800e2a8 <scalbnf+0xa4>
 800e292:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e2d4 <scalbnf+0xd0>
 800e296:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e2d8 <scalbnf+0xd4>
 800e29a:	eef0 7a40 	vmov.f32	s15, s0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	bf18      	it	ne
 800e2a2:	eeb0 0a47 	vmovne.f32	s0, s14
 800e2a6:	e7db      	b.n	800e260 <scalbnf+0x5c>
 800e2a8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e2dc <scalbnf+0xd8>
 800e2ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e2e0 <scalbnf+0xdc>
 800e2b0:	eef0 7a40 	vmov.f32	s15, s0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	e7f3      	b.n	800e2a0 <scalbnf+0x9c>
 800e2b8:	3219      	adds	r2, #25
 800e2ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e2c2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e2e4 <scalbnf+0xe0>
 800e2c6:	ee07 3a10 	vmov	s14, r3
 800e2ca:	e7c4      	b.n	800e256 <scalbnf+0x52>
 800e2cc:	ffff3cb0 	.word	0xffff3cb0
 800e2d0:	4c000000 	.word	0x4c000000
 800e2d4:	7149f2ca 	.word	0x7149f2ca
 800e2d8:	f149f2ca 	.word	0xf149f2ca
 800e2dc:	0da24260 	.word	0x0da24260
 800e2e0:	8da24260 	.word	0x8da24260
 800e2e4:	33000000 	.word	0x33000000

0800e2e8 <_init>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	bf00      	nop
 800e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ee:	bc08      	pop	{r3}
 800e2f0:	469e      	mov	lr, r3
 800e2f2:	4770      	bx	lr

0800e2f4 <_fini>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr
