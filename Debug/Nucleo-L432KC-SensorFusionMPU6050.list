
Nucleo-L432KC-SensorFusionMPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  0800b0e8  0800b0e8  0001b0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba84  0800ba84  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba84  0800ba84  0001ba84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba8c  0800ba8c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba8c  0800ba8c  0001ba8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba90  0800ba90  0001ba90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ba94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001dc  0800bc70  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800bc70  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bb0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002852  00000000  00000000  00031dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00034610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222e6  00000000  00000000  000361f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126bc  00000000  00000000  000584de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49db  00000000  00000000  0006ab9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa4  00000000  00000000  0012f5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0cc 	.word	0x0800b0cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b0cc 	.word	0x0800b0cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <CompFilterRollPitch_Init>:
#include "CompFilterRollPitch.h"

void CompFilterRollPitch_Init(CompFilterRollPitch *filt, float comp_alpha, float sample_time_ms, float lpf_acc_alpha, float lpf_gyr_alpha)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6178      	str	r0, [r7, #20]
 8000eb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ebc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ec0:	edc7 1a01 	vstr	s3, [r7, #4]
	// Set struct parameters
	filt->comp_alpha = comp_alpha;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]
	filt->sample_time_ms = sample_time_ms;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	605a      	str	r2, [r3, #4]
	filt->roll_rad = 0.0f;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	filt->pitch_rad = 0.0f;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]

	// Initialize First Order IIR filters for XL and gyro
	FirstOrderIIR_Init(&filt->lpf_acc[0], lpf_acc_alpha);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f921 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_acc[1], lpf_acc_alpha);
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3318      	adds	r3, #24
 8000ef2:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f91a 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_acc[2], lpf_acc_alpha);
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3320      	adds	r3, #32
 8000f00:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f913 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_gyr[0], lpf_gyr_alpha);
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3328      	adds	r3, #40	; 0x28
 8000f0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f90c 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_gyr[1], lpf_gyr_alpha);
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3330      	adds	r3, #48	; 0x30
 8000f1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f905 	bl	8001130 <FirstOrderIIR_Init>
	FirstOrderIIR_Init(&filt->lpf_gyr[2], lpf_gyr_alpha);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3338      	adds	r3, #56	; 0x38
 8000f2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8fe 	bl	8001130 <FirstOrderIIR_Init>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <CompFilterRollPitch_Update>:

void CompFilterRollPitch_Update(CompFilterRollPitch *filt, float *acc_mps2, float *gyr_rps)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	ed2d 8b02 	vpush	{d8}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	// Filter XL and Gyro measurements
	for (uint8_t i = 0; i < 3; i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f52:	e028      	b.n	8000fa6 <CompFilterRollPitch_Update+0x6a>
	{
		FirstOrderIIR_Update(&filt->lpf_acc[i], acc_mps2[i]);
 8000f54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f58:	3302      	adds	r3, #2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	18d1      	adds	r1, r2, r3
 8000f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	4413      	add	r3, r2
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	4608      	mov	r0, r1
 8000f74:	f000 f908 	bl	8001188 <FirstOrderIIR_Update>
		FirstOrderIIR_Update(&filt->lpf_gyr[i], gyr_rps[i]);
 8000f78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f7c:	3305      	adds	r3, #5
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	18d1      	adds	r1, r2, r3
 8000f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	eeb0 0a67 	vmov.f32	s0, s15
 8000f96:	4608      	mov	r0, r1
 8000f98:	f000 f8f6 	bl	8001188 <FirstOrderIIR_Update>
	for (uint8_t i = 0; i < 3; i++)
 8000f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000fa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d9d2      	bls.n	8000f54 <CompFilterRollPitch_Update+0x18>
	}

	float ax_mps2 = filt->lpf_acc[0].out;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
	float ay_mps2 = filt->lpf_acc[1].out;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float az_mps2 = filt->lpf_acc[2].out;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
	float p_rps   = filt->lpf_gyr[0].out;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
	float q_rps   = filt->lpf_gyr[1].out;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
	float r_rps   = filt->lpf_gyr[2].out;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Estimate angles using filtered XL measurements (units cancel out)
	float roll_acc_rad  = atan2f(ay_mps2 , az_mps2);
 8000fd2:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8000fd6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8000fda:	f009 f81b 	bl	800a014 <atan2f>
 8000fde:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float pitch_acc_rad =  asinf(ax_mps2 / 1.0f);
 8000fe2:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8000fe6:	f008 ffe9 	bl	8009fbc <asinf>
 8000fea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
//	float pitch_acc_rad =  asinf(ax_mps2 / G_MPS2);

	// Transform body rates to Euler rates (gyro units need to be in radians per second)
	float roll_dot_rad  = p_rps + tanf(filt->pitch_rad) * (sinf(filt->roll_rad) * q_rps + cosf(filt->roll_rad) * r_rps);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	f008 ffb4 	bl	8009f64 <tanf>
 8000ffc:	eef0 8a40 	vmov.f32	s17, s0
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	edd3 7a02 	vldr	s15, [r3, #8]
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	f008 ff65 	bl	8009ed8 <sinf>
 800100e:	eeb0 7a40 	vmov.f32	s14, s0
 8001012:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001016:	ee27 8a27 	vmul.f32	s16, s14, s15
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	f008 ff14 	bl	8009e50 <cosf>
 8001028:	eeb0 7a40 	vmov.f32	s14, s0
 800102c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001038:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800103c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	edc7 7a08 	vstr	s15, [r7, #32]
	float pitch_dot_rad = 																 cosf(filt->roll_rad) * q_rps - sinf(filt->roll_rad) * r_rps;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	edd3 7a02 	vldr	s15, [r3, #8]
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	f008 fefd 	bl	8009e50 <cosf>
 8001056:	eeb0 7a40 	vmov.f32	s14, s0
 800105a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800105e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	edd3 7a02 	vldr	s15, [r3, #8]
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	f008 ff34 	bl	8009ed8 <sinf>
 8001070:	eeb0 7a40 	vmov.f32	s14, s0
 8001074:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001080:	edc7 7a07 	vstr	s15, [r7, #28]

	// Combine XL estimates with integral of gyro estimates to get roll and pitch estimates
	float roll_rad  = 				filt->comp_alpha  *  roll_acc_rad
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800108e:	ee27 7a27 	vmul.f32	s14, s14, s15
									+ (1.0f - filt->comp_alpha) * (filt->roll_rad  + (filt->sample_time_ms / 1000.0f) * roll_dot_rad);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800109c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	ed93 6a02 	vldr	s12, [r3, #8]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ac:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800112c <CompFilterRollPitch_Update+0x1f0>
 80010b0:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80010b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80010c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float roll_rad  = 				filt->comp_alpha  *  roll_acc_rad
 80010c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c8:	edc7 7a06 	vstr	s15, [r7, #24]

	float pitch_rad = 				filt->comp_alpha  *  pitch_acc_rad
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
									+ (1.0f - filt->comp_alpha) * (filt->pitch_rad + (filt->sample_time_ms / 1000.0f) * pitch_dot_rad);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	ed93 6a03 	vldr	s12, [r3, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f4:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 800112c <CompFilterRollPitch_Update+0x1f0>
 80010f8:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80010fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001100:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001104:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float pitch_rad = 				filt->comp_alpha  *  pitch_acc_rad
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	edc7 7a05 	vstr	s15, [r7, #20]

	filt->roll_rad  = roll_rad;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]
	filt->pitch_rad = pitch_rad;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	60da      	str	r2, [r3, #12]
}
 8001120:	bf00      	nop
 8001122:	3748      	adds	r7, #72	; 0x48
 8001124:	46bd      	mov	sp, r7
 8001126:	ecbd 8b02 	vpop	{d8}
 800112a:	bd80      	pop	{r7, pc}
 800112c:	447a0000 	.word	0x447a0000

08001130 <FirstOrderIIR_Init>:
#include "FirstOrderIIR.h"

void FirstOrderIIR_Init(FirstOrderIIR *filt, float alpha)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	ed87 0a00 	vstr	s0, [r7]
	// Check filter coefficient bounds and store
	filt->alpha = alpha;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	601a      	str	r2, [r3, #0]
	if (alpha < 0.0f)
 8001142:	edd7 7a00 	vldr	s15, [r7]
 8001146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d504      	bpl.n	800115a <FirstOrderIIR_Init+0x2a>
		filt->alpha = 0.0f;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e00c      	b.n	8001174 <FirstOrderIIR_Init+0x44>
	else if (alpha > 1.0f)
 800115a:	edd7 7a00 	vldr	s15, [r7]
 800115e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	dd03      	ble.n	8001174 <FirstOrderIIR_Init+0x44>
		filt->alpha = 1.0f;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001172:	601a      	str	r2, [r3, #0]

	// Clear output
	filt->out = 0.0f;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <FirstOrderIIR_Update>:

float FirstOrderIIR_Update(FirstOrderIIR *filt, float input)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	ed87 0a00 	vstr	s0, [r7]
	// Update filter output based on last output and new input
	// Vout[n] = (1 - alpha) * Vin[n] + alpha * Vout[n - 1]
	filt->out = (1.0f - filt->alpha) * input + filt->alpha * filt->out;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800119e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a2:	edd7 7a00 	vldr	s15, [r7]
 80011a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 6a00 	vldr	s13, [r3]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edc3 7a01 	vstr	s15, [r3, #4]

	// Return new filter output
	return filt->out;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	ee07 3a90 	vmov	s15, r3
}
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <MPU6050_Init>:
#define G_MPS2											9.80665f
#define DEFAULT_ACC_SCALE_LSB_G			16384.0f
#define DEFAULT_GYR_SCALE_LSB_DPS		131.0f

uint8_t MPU6050_Init(MPU6050 *imu, I2C_HandleTypeDef *i2c_handle, uint8_t AD0_Pin_Value)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4613      	mov	r3, r2
 80011e8:	71fb      	strb	r3, [r7, #7]
	/* Set Struct Parameters */

	// I2C
	imu->i2c_handle = i2c_handle;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	601a      	str	r2, [r3, #0]
	imu->device_addr = AD0_Pin_Value ? MPU6050_I2C_ADDR_AD0_1 : MPU6050_I2C_ADDR_AD0_0;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MPU6050_Init+0x1e>
 80011f6:	22d2      	movs	r2, #210	; 0xd2
 80011f8:	e000      	b.n	80011fc <MPU6050_Init+0x20>
 80011fa:	22d0      	movs	r2, #208	; 0xd0
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	711a      	strb	r2, [r3, #4]

	// DMA
	for (uint8_t i = 0; i < 14; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e007      	b.n	8001216 <MPU6050_Init+0x3a>
	{
		imu->rx_buf[i] = 0;
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	2200      	movs	r2, #0
 800120e:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < 14; i++)
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	3301      	adds	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b0d      	cmp	r3, #13
 800121a:	d9f4      	bls.n	8001206 <MPU6050_Init+0x2a>
	}
	imu->dma_rx_flag = 0;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	74da      	strb	r2, [r3, #19]
	imu->data_ready_flag = 0;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	751a      	strb	r2, [r3, #20]
	imu->i2c_complete = 0;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	755a      	strb	r2, [r3, #21]

	imu->success_flag = 1;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	759a      	strb	r2, [r3, #22]

	// XL data in m/s^2
	imu->acc_mps2[0] = 0.0f;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
	imu->acc_mps2[1] = 0.0f;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
	imu->acc_mps2[2] = 0.0f;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	621a      	str	r2, [r3, #32]

	// Temperature data
	imu->temp_C = 0.0f; 
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	649a      	str	r2, [r3, #72]	; 0x48
	
	// Gyro data in rps
	imu->gyr_rps[0] = 0.0f;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	64da      	str	r2, [r3, #76]	; 0x4c
	imu->gyr_rps[1] = 0.0f;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	651a      	str	r2, [r3, #80]	; 0x50
	imu->gyr_rps[2] = 0.0f;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	655a      	str	r2, [r3, #84]	; 0x54

	// XL sensitivity according to datasheet in +/-2g range is 16384 LSB/g
	imu->acc_scale[0] = 0.9948657f;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4a5d      	ldr	r2, [pc, #372]	; (80013e4 <MPU6050_Init+0x208>)
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
	imu->acc_scale[1] = 0.9986902f;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4a5c      	ldr	r2, [pc, #368]	; (80013e8 <MPU6050_Init+0x20c>)
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
	imu->acc_scale[2] = 0.9947902f;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4a5c      	ldr	r2, [pc, #368]	; (80013ec <MPU6050_Init+0x210>)
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
	imu->acc_bias[0]  = -10.8274112f;  // LSBs
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <MPU6050_Init+0x214>)
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
	imu->acc_bias[1]  = -66.3366318f;  // LSBs
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4a5b      	ldr	r2, [pc, #364]	; (80013f4 <MPU6050_Init+0x218>)
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
	imu->acc_bias[2]  = -549.9550669f; // LSBs
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4a5a      	ldr	r2, [pc, #360]	; (80013f8 <MPU6050_Init+0x21c>)
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
	imu->acc_yz_rot   = -0.0003177f;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a5a      	ldr	r2, [pc, #360]	; (80013fc <MPU6050_Init+0x220>)
 8001294:	63da      	str	r2, [r3, #60]	; 0x3c
	imu->acc_zy_rot   = -0.0027145f;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4a59      	ldr	r2, [pc, #356]	; (8001400 <MPU6050_Init+0x224>)
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
	imu->acc_zx_rot   = 0.0060455f;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a59      	ldr	r2, [pc, #356]	; (8001404 <MPU6050_Init+0x228>)
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44

	// Gyro sensitivity according to datasheet in +/-250dps range is 131 LSB/dps
	imu->gyr_scale[0] = 1.0f;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012a8:	659a      	str	r2, [r3, #88]	; 0x58
	imu->gyr_scale[1] = 1.0f;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012b0:	65da      	str	r2, [r3, #92]	; 0x5c
	imu->gyr_scale[2] = 1.0f;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012b8:	661a      	str	r2, [r3, #96]	; 0x60
	imu->gyr_bias[0]  = -289.752f;    // LSBs
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <MPU6050_Init+0x22c>)
 80012be:	665a      	str	r2, [r3, #100]	; 0x64
	imu->gyr_bias[1]  = 249.255f;     // LSBs
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4a52      	ldr	r2, [pc, #328]	; (800140c <MPU6050_Init+0x230>)
 80012c4:	669a      	str	r2, [r3, #104]	; 0x68
	imu->gyr_bias[2]  = 7.745f;       // LSBs
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4a51      	ldr	r2, [pc, #324]	; (8001410 <MPU6050_Init+0x234>)
 80012ca:	66da      	str	r2, [r3, #108]	; 0x6c
	/* Check WHO_AM_I ID */

	HAL_StatusTypeDef status;
	uint8_t write_data;

	status = MPU6050_Read_Register_Polling(imu, MPU6050_REG_WHO_AM_I, imu->rx_buf);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3305      	adds	r3, #5
 80012d0:	461a      	mov	r2, r3
 80012d2:	2175      	movs	r1, #117	; 0x75
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 fa13 	bl	8001700 <MPU6050_Read_Register_Polling>
 80012da:	4603      	mov	r3, r0
 80012dc:	75bb      	strb	r3, [r7, #22]
	HAL_Delay(10);
 80012de:	200a      	movs	r0, #10
 80012e0:	f001 f8c8 	bl	8002474 <HAL_Delay>

	if(status != HAL_OK)
 80012e4:	7dbb      	ldrb	r3, [r7, #22]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <MPU6050_Init+0x120>
	{
		UART_println(&uart, "WHO_AM_I Read Failed.");
 80012ea:	494a      	ldr	r1, [pc, #296]	; (8001414 <MPU6050_Init+0x238>)
 80012ec:	484a      	ldr	r0, [pc, #296]	; (8001418 <MPU6050_Init+0x23c>)
 80012ee:	f000 fa7d 	bl	80017ec <UART_println>
		imu->success_flag = 0;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	759a      	strb	r2, [r3, #22]
		return 255;
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	e06f      	b.n	80013dc <MPU6050_Init+0x200>
	}

	if (!(imu->rx_buf[0] == MPU6050_WHO_AM_I_ID || imu->rx_buf[0] == MPU6050_WHO_AM_I_ID_ALT))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	795b      	ldrb	r3, [r3, #5]
 8001300:	2b68      	cmp	r3, #104	; 0x68
 8001302:	d00c      	beq.n	800131e <MPU6050_Init+0x142>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	795b      	ldrb	r3, [r3, #5]
 8001308:	2b72      	cmp	r3, #114	; 0x72
 800130a:	d008      	beq.n	800131e <MPU6050_Init+0x142>
	{
		UART_println(&uart, "WHO_AM_I ID Check Failed.");
 800130c:	4943      	ldr	r1, [pc, #268]	; (800141c <MPU6050_Init+0x240>)
 800130e:	4842      	ldr	r0, [pc, #264]	; (8001418 <MPU6050_Init+0x23c>)
 8001310:	f000 fa6c 	bl	80017ec <UART_println>
		imu->success_flag = 0;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	759a      	strb	r2, [r3, #22]
		return 255;
 800131a:	23ff      	movs	r3, #255	; 0xff
 800131c:	e05e      	b.n	80013dc <MPU6050_Init+0x200>
	}

	/* Register Setup */

	// DLPF_CONFIG = 2: ODR = 1kHz, XL BW = 94Hz, Gyro BW = 98Hz
	write_data = 0x02;
 800131e:	2302      	movs	r3, #2
 8001320:	757b      	strb	r3, [r7, #21]
	status = MPU6050_Write_Register_Polling(imu, MPU6050_REG_CONFIG, &write_data);
 8001322:	f107 0315 	add.w	r3, r7, #21
 8001326:	461a      	mov	r2, r3
 8001328:	211a      	movs	r1, #26
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f000 fa15 	bl	800175a <MPU6050_Write_Register_Polling>
 8001330:	4603      	mov	r3, r0
 8001332:	75bb      	strb	r3, [r7, #22]
	if (status != HAL_OK)
 8001334:	7dbb      	ldrb	r3, [r7, #22]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <MPU6050_Init+0x164>
		imu->success_flag = 0;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	759a      	strb	r2, [r3, #22]
	HAL_Delay(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f001 f897 	bl	8002474 <HAL_Delay>

	// INT_RD_CLEAR = 1: interrupt status bits are cleared on any read operation
	write_data = 0x10;
 8001346:	2310      	movs	r3, #16
 8001348:	757b      	strb	r3, [r7, #21]
	status = MPU6050_Write_Register_Polling(imu, MPU6050_REG_INT_PIN_CFG, &write_data);
 800134a:	f107 0315 	add.w	r3, r7, #21
 800134e:	461a      	mov	r2, r3
 8001350:	2137      	movs	r1, #55	; 0x37
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 fa01 	bl	800175a <MPU6050_Write_Register_Polling>
 8001358:	4603      	mov	r3, r0
 800135a:	75bb      	strb	r3, [r7, #22]
	if (status != HAL_OK)
 800135c:	7dbb      	ldrb	r3, [r7, #22]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <MPU6050_Init+0x18c>
		imu->success_flag = 0;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	759a      	strb	r2, [r3, #22]
	HAL_Delay(5);
 8001368:	2005      	movs	r0, #5
 800136a:	f001 f883 	bl	8002474 <HAL_Delay>

	// DATA_RDY_EN = 1: enables the data ready interrupt
	write_data = 0x01;
 800136e:	2301      	movs	r3, #1
 8001370:	757b      	strb	r3, [r7, #21]
	status = MPU6050_Write_Register_Polling(imu, MPU6050_REG_INT_ENABLE, &write_data);
 8001372:	f107 0315 	add.w	r3, r7, #21
 8001376:	461a      	mov	r2, r3
 8001378:	2138      	movs	r1, #56	; 0x38
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f9ed 	bl	800175a <MPU6050_Write_Register_Polling>
 8001380:	4603      	mov	r3, r0
 8001382:	75bb      	strb	r3, [r7, #22]
	if (status != HAL_OK)
 8001384:	7dbb      	ldrb	r3, [r7, #22]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <MPU6050_Init+0x1b4>
		imu->success_flag = 0;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	759a      	strb	r2, [r3, #22]
	HAL_Delay(5);
 8001390:	2005      	movs	r0, #5
 8001392:	f001 f86f 	bl	8002474 <HAL_Delay>

	// SLEEP = 0: disable sleep mode
	write_data = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	757b      	strb	r3, [r7, #21]
	status = MPU6050_Write_Register_Polling(imu, MPU6050_REG_PWR_MGMT_1, &write_data);
 800139a:	f107 0315 	add.w	r3, r7, #21
 800139e:	461a      	mov	r2, r3
 80013a0:	216b      	movs	r1, #107	; 0x6b
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f9d9 	bl	800175a <MPU6050_Write_Register_Polling>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75bb      	strb	r3, [r7, #22]
	if (status != HAL_OK)
 80013ac:	7dbb      	ldrb	r3, [r7, #22]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <MPU6050_Init+0x1dc>
		imu->success_flag = 0;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	759a      	strb	r2, [r3, #22]
	HAL_Delay(5);
 80013b8:	2005      	movs	r0, #5
 80013ba:	f001 f85b 	bl	8002474 <HAL_Delay>

	if (imu->success_flag)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7d9b      	ldrb	r3, [r3, #22]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <MPU6050_Init+0x1f6>
	{
		UART_println(&uart, "Initialization Succeeded.");
 80013c8:	4915      	ldr	r1, [pc, #84]	; (8001420 <MPU6050_Init+0x244>)
 80013ca:	4813      	ldr	r0, [pc, #76]	; (8001418 <MPU6050_Init+0x23c>)
 80013cc:	f000 fa0e 	bl	80017ec <UART_println>
 80013d0:	e003      	b.n	80013da <MPU6050_Init+0x1fe>
	}
	else
	{
		UART_println(&uart, "Initialization Failed.");
 80013d2:	4914      	ldr	r1, [pc, #80]	; (8001424 <MPU6050_Init+0x248>)
 80013d4:	4810      	ldr	r0, [pc, #64]	; (8001418 <MPU6050_Init+0x23c>)
 80013d6:	f000 fa09 	bl	80017ec <UART_println>
	}

	return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	3f7eaf85 	.word	0x3f7eaf85
 80013e8:	3f7faa29 	.word	0x3f7faa29
 80013ec:	3f7eaa92 	.word	0x3f7eaa92
 80013f0:	c12d3d14 	.word	0xc12d3d14
 80013f4:	c284ac5b 	.word	0xc284ac5b
 80013f8:	c4097d20 	.word	0xc4097d20
 80013fc:	b9a690f9 	.word	0xb9a690f9
 8001400:	bb31e5c1 	.word	0xbb31e5c1
 8001404:	3bc61954 	.word	0x3bc61954
 8001408:	c390e042 	.word	0xc390e042
 800140c:	43794148 	.word	0x43794148
 8001410:	40f7d70a 	.word	0x40f7d70a
 8001414:	0800b0e8 	.word	0x0800b0e8
 8001418:	20000360 	.word	0x20000360
 800141c:	0800b100 	.word	0x0800b100
 8001420:	0800b11c 	.word	0x0800b11c
 8001424:	0800b138 	.word	0x0800b138

08001428 <MPU6050_Read_DMA>:

uint8_t MPU6050_Read_DMA(MPU6050 *imu)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read_DMA(imu->i2c_handle, imu->device_addr, MPU6050_REG_DATA_START, I2C_MEMADD_SIZE_8BIT, imu->rx_buf, 14);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	b299      	uxth	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3305      	adds	r3, #5
 800143e:	220e      	movs	r2, #14
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	223b      	movs	r2, #59	; 0x3b
 8001448:	f002 f802 	bl	8003450 <HAL_I2C_Mem_Read_DMA>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <MPU6050_Read_DMA+0x40>
	{
		imu->success_flag = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	759a      	strb	r2, [r3, #22]
		UART_log_error(&uart, status, "DMA Read Failed.");
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <MPU6050_Read_DMA+0x58>)
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <MPU6050_Read_DMA+0x5c>)
 8001464:	f000 fa0a 	bl	800187c <UART_log_error>
	}

	imu->dma_rx_flag = 1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	74da      	strb	r2, [r3, #19]
	imu->data_ready_flag = 0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	751a      	strb	r2, [r3, #20]

	return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800b150 	.word	0x0800b150
 8001484:	20000360 	.word	0x20000360

08001488 <MPU6050_Process_Data>:

void MPU6050_Process_Data(MPU6050 *imu)
{
 8001488:	b480      	push	{r7}
 800148a:	b08b      	sub	sp, #44	; 0x2c
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	/* Read Accelerometer */

	int16_t acc_raw_signed[3];
	acc_raw_signed[0] = (int16_t) ((imu->rx_buf[0] << 8) | imu->rx_buf[1]); // X-axis
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	795b      	ldrb	r3, [r3, #5]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	799b      	ldrb	r3, [r3, #6]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	843b      	strh	r3, [r7, #32]
	acc_raw_signed[1] = (int16_t) ((imu->rx_buf[2] << 8) | imu->rx_buf[3]); // Y-axis
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	79db      	ldrb	r3, [r3, #7]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7a1b      	ldrb	r3, [r3, #8]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	847b      	strh	r3, [r7, #34]	; 0x22
	acc_raw_signed[2] = (int16_t) ((imu->rx_buf[4] << 8) | imu->rx_buf[5]); // Z-axis
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7a5b      	ldrb	r3, [r3, #9]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7a9b      	ldrb	r3, [r3, #10]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	84bb      	strh	r3, [r7, #36]	; 0x24

	// Accelerometer model: a_cal = T * K * (a_raw + b)
	float K_a_b[3];
	K_a_b[0] = imu->acc_scale[0] * ((float) acc_raw_signed[0] + imu->acc_bias[0]);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80014e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	edc7 7a05 	vstr	s15, [r7, #20]
	K_a_b[1] = imu->acc_scale[1] * ((float) acc_raw_signed[1] + imu->acc_bias[1]);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80014f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800150c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001510:	edc7 7a06 	vstr	s15, [r7, #24]
	K_a_b[2] = imu->acc_scale[2] * ((float) acc_raw_signed[2] + imu->acc_bias[2]);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800151a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800152c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	edc7 7a07 	vstr	s15, [r7, #28]

	imu->acc_mps2[0] = K_a_b[0] - imu->acc_yz_rot * K_a_b[1] + imu->acc_zy_rot * K_a_b[2];
 8001538:	ed97 7a05 	vldr	s14, [r7, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001542:	edd7 7a06 	vldr	s15, [r7, #24]
 8001546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800154a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001554:	edd7 7a07 	vldr	s15, [r7, #28]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc_mps2[1] = K_a_b[1] - imu->acc_zx_rot * K_a_b[2];
 8001566:	ed97 7a06 	vldr	s14, [r7, #24]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001570:	edd7 7a07 	vldr	s15, [r7, #28]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->acc_mps2[2] = K_a_b[2];
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	621a      	str	r2, [r3, #32]

	imu->acc_mps2[0] *= 1.0f / DEFAULT_ACC_SCALE_LSB_G;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	edd3 7a06 	vldr	s15, [r3, #24]
 800158e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80016f0 <MPU6050_Process_Data+0x268>
 8001592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc_mps2[1] *= 1.0f / DEFAULT_ACC_SCALE_LSB_G;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 7a07 	vldr	s15, [r3, #28]
 80015a2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80016f0 <MPU6050_Process_Data+0x268>
 80015a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->acc_mps2[2] *= 1.0f / DEFAULT_ACC_SCALE_LSB_G;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80015b6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80016f0 <MPU6050_Process_Data+0x268>
 80015ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a08 	vstr	s15, [r3, #32]
//	imu->acc_mps2[1] *= G_MPS2 / DEFAULT_ACC_SCALE_LSB_G;
//	imu->acc_mps2[2] *= G_MPS2 / DEFAULT_ACC_SCALE_LSB_G;

	/* Read Temperature */

	int16_t temp_raw_signed = (int16_t) ((imu->rx_buf[6] << 8) | imu->rx_buf[7]);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7adb      	ldrb	r3, [r3, #11]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7b1b      	ldrb	r3, [r3, #12]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	84fb      	strh	r3, [r7, #38]	; 0x26
	imu->temp_C = (float) temp_raw_signed / 340.0f + 36.53f;
 80015d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80016f4 <MPU6050_Process_Data+0x26c>
 80015e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ea:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80016f8 <MPU6050_Process_Data+0x270>
 80015ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	/* Read Gyroscope */
	int16_t gyr_raw_signed[3];
	gyr_raw_signed[0] = (int16_t) ((imu->rx_buf[ 8] << 8) | imu->rx_buf[ 9]); // X-axis
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7b5b      	ldrb	r3, [r3, #13]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7b9b      	ldrb	r3, [r3, #14]
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21b      	sxth	r3, r3
 800160a:	81bb      	strh	r3, [r7, #12]
	gyr_raw_signed[1] = (int16_t) ((imu->rx_buf[10] << 8) | imu->rx_buf[11]); // Y-axis
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7bdb      	ldrb	r3, [r3, #15]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7c1b      	ldrb	r3, [r3, #16]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	81fb      	strh	r3, [r7, #14]
	gyr_raw_signed[2] = (int16_t) ((imu->rx_buf[12] << 8) | imu->rx_buf[13]); // Z-axis
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7c5b      	ldrb	r3, [r3, #17]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7c9b      	ldrb	r3, [r3, #18]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	823b      	strh	r3, [r7, #16]

	imu->gyr_rps[0] = imu->gyr_scale[0] * ((float) gyr_raw_signed[0] + imu->gyr_bias[0]);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800163a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800164c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	imu->gyr_rps[1] = imu->gyr_scale[1] * ((float) gyr_raw_signed[1] + imu->gyr_bias[1]);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	imu->gyr_rps[2] = imu->gyr_scale[2] * ((float) gyr_raw_signed[2] + imu->gyr_bias[2]);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001686:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800169c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	imu->gyr_rps[0] *= DEG_TO_RAD / DEFAULT_GYR_SCALE_LSB_DPS;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80016ac:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80016fc <MPU6050_Process_Data+0x274>
 80016b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	imu->gyr_rps[1] *= DEG_TO_RAD / DEFAULT_GYR_SCALE_LSB_DPS;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016c0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80016fc <MPU6050_Process_Data+0x274>
 80016c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	imu->gyr_rps[2] *= DEG_TO_RAD / DEFAULT_GYR_SCALE_LSB_DPS;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016d4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016fc <MPU6050_Process_Data+0x274>
 80016d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 80016e2:	bf00      	nop
 80016e4:	372c      	adds	r7, #44	; 0x2c
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	38800000 	.word	0x38800000
 80016f4:	43aa0000 	.word	0x43aa0000
 80016f8:	42121eb8 	.word	0x42121eb8
 80016fc:	390bb3fd 	.word	0x390bb3fd

08001700 <MPU6050_Read_Register_Polling>:



HAL_StatusTypeDef MPU6050_Read_Register_Polling(MPU6050 *imu, uint8_t reg, uint8_t *data)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af04      	add	r7, sp, #16
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	460b      	mov	r3, r1
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(imu->i2c_handle, imu->device_addr, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	b299      	uxth	r1, r3
 8001718:	7afb      	ldrb	r3, [r7, #11]
 800171a:	b29a      	uxth	r2, r3
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2301      	movs	r3, #1
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2301      	movs	r3, #1
 800172c:	f001 fd76 	bl	800321c <HAL_I2C_Mem_Read>
 8001730:	4603      	mov	r3, r0
 8001732:	75fb      	strb	r3, [r7, #23]
	while (HAL_I2C_IsDeviceReady(imu->i2c_handle, imu->device_addr, 1, HAL_MAX_DELAY) != HAL_OK);
 8001734:	bf00      	nop
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	791b      	ldrb	r3, [r3, #4]
 800173e:	b299      	uxth	r1, r3
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	2201      	movs	r2, #1
 8001746:	f001 ff69 	bl	800361c <HAL_I2C_IsDeviceReady>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f2      	bne.n	8001736 <MPU6050_Read_Register_Polling+0x36>
	return status;
 8001750:	7dfb      	ldrb	r3, [r7, #23]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <MPU6050_Write_Register_Polling>:
}



HAL_StatusTypeDef MPU6050_Write_Register_Polling(MPU6050 *imu, uint8_t reg, uint8_t *data)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b08a      	sub	sp, #40	; 0x28
 800175e:	af04      	add	r7, sp, #16
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	460b      	mov	r3, r1
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(imu->i2c_handle, imu->device_addr, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	b299      	uxth	r1, r3
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	b29a      	uxth	r2, r3
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	2301      	movs	r3, #1
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2301      	movs	r3, #1
 8001786:	f001 fc35 	bl	8002ff4 <HAL_I2C_Mem_Write>
 800178a:	4603      	mov	r3, r0
 800178c:	75fb      	strb	r3, [r7, #23]
	while (HAL_I2C_IsDeviceReady(imu->i2c_handle, imu->device_addr, 1, HAL_MAX_DELAY) != HAL_OK);
 800178e:	bf00      	nop
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	791b      	ldrb	r3, [r3, #4]
 8001798:	b299      	uxth	r1, r3
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	2201      	movs	r2, #1
 80017a0:	f001 ff3c 	bl	800361c <HAL_I2C_IsDeviceReady>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f2      	bne.n	8001790 <MPU6050_Write_Register_Polling+0x36>
	return status;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <UART_Init>:
#include "UART_API.h"

void UART_Init(UART_API *uart, UART_HandleTypeDef *huart, uint16_t max_len)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
	uart->huart = huart;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
	uart->log_buf[0] = '\0'; // null terminate
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	711a      	strb	r2, [r3, #4]
	uart->log_buf_len = 1;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	uart->max_len = max_len;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <UART_println>:
}



void UART_println(UART_API *uart, char *msg)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	if (strlen(msg) < uart->max_len)
 80017f6:	6838      	ldr	r0, [r7, #0]
 80017f8:	f7fe fcea 	bl	80001d0 <strlen>
 80017fc:	4602      	mov	r2, r0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001804:	429a      	cmp	r2, r3
 8001806:	d217      	bcs.n	8001838 <UART_println+0x4c>
	{
		uart->log_buf_len = sprintf(uart->log_buf, "%s\r\n", msg);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3304      	adds	r3, #4
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4919      	ldr	r1, [pc, #100]	; (8001874 <UART_println+0x88>)
 8001810:	4618      	mov	r0, r3
 8001812:	f006 f8a3 	bl	800795c <siprintf>
 8001816:	4603      	mov	r3, r0
 8001818:	b29a      	uxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	1d19      	adds	r1, r3, #4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	f004 ff87 	bl	8006744 <HAL_UART_Transmit>
	else
	{
		uart->log_buf_len = sprintf(uart->log_buf, "Message needs to be less than %d characters long.\r\n", uart->max_len);
		HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
	}
}
 8001836:	e018      	b.n	800186a <UART_println+0x7e>
		uart->log_buf_len = sprintf(uart->log_buf, "Message needs to be less than %d characters long.\r\n", uart->max_len);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	1d18      	adds	r0, r3, #4
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001842:	461a      	mov	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <UART_println+0x8c>)
 8001846:	f006 f889 	bl	800795c <siprintf>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1d19      	adds	r1, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	f004 ff6d 	bl	8006744 <HAL_UART_Transmit>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	0800b198 	.word	0x0800b198
 8001878:	0800b164 	.word	0x0800b164

0800187c <UART_log_error>:



void UART_log_error(UART_API *uart, HAL_StatusTypeDef status, char *error_msg)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	460b      	mov	r3, r1
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	72fb      	strb	r3, [r7, #11]
	switch(status)
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d83f      	bhi.n	8001910 <UART_log_error+0x94>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <UART_log_error+0x1c>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018c3 	.word	0x080018c3
 80018a0:	080018dd 	.word	0x080018dd
 80018a4:	080018f7 	.word	0x080018f7
	{
	case(HAL_OK):
		uart->log_buf_len = sprintf(uart->log_buf, "%s\r\n", error_msg);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3304      	adds	r3, #4
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4925      	ldr	r1, [pc, #148]	; (8001944 <UART_log_error+0xc8>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 f853 	bl	800795c <siprintf>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 80018c0:	e031      	b.n	8001926 <UART_log_error+0xaa>
	case(HAL_ERROR):
		uart->log_buf_len = sprintf(uart->log_buf, "%s Status: Error\r\n", error_msg);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3304      	adds	r3, #4
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	491f      	ldr	r1, [pc, #124]	; (8001948 <UART_log_error+0xcc>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f006 f846 	bl	800795c <siprintf>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 80018da:	e024      	b.n	8001926 <UART_log_error+0xaa>
	case(HAL_BUSY):
		uart->log_buf_len = sprintf(uart->log_buf, "%s Status: Busy\r\n", error_msg);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3304      	adds	r3, #4
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	491a      	ldr	r1, [pc, #104]	; (800194c <UART_log_error+0xd0>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f006 f839 	bl	800795c <siprintf>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 80018f4:	e017      	b.n	8001926 <UART_log_error+0xaa>
	case(HAL_TIMEOUT):
		uart->log_buf_len = sprintf(uart->log_buf, "%s Status: Timeout\r\n", error_msg);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3304      	adds	r3, #4
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4914      	ldr	r1, [pc, #80]	; (8001950 <UART_log_error+0xd4>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f006 f82c 	bl	800795c <siprintf>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		break;
 800190e:	e00a      	b.n	8001926 <UART_log_error+0xaa>
	default:
		uart->log_buf_len = sprintf(uart->log_buf, "Unknown Status Value\r\n");
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3304      	adds	r3, #4
 8001914:	490f      	ldr	r1, [pc, #60]	; (8001954 <UART_log_error+0xd8>)
 8001916:	4618      	mov	r0, r3
 8001918:	f006 f820 	bl	800795c <siprintf>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	}
	HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1d19      	adds	r1, r3, #4
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	f004 ff04 	bl	8006744 <HAL_UART_Transmit>
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800b198 	.word	0x0800b198
 8001948:	0800b1a0 	.word	0x0800b1a0
 800194c:	0800b1b4 	.word	0x0800b1b4
 8001950:	0800b1c8 	.word	0x0800b1c8
 8001954:	0800b1e0 	.word	0x0800b1e0

08001958 <UART_print_float>:
}



void UART_print_float(UART_API *uart, float value)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	ed87 0a00 	vstr	s0, [r7]
	uart->log_buf_len = sprintf(uart->log_buf, "%.3f\r\n", value);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	1d1c      	adds	r4, r3, #4
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f7fe fded 	bl	8000548 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	490c      	ldr	r1, [pc, #48]	; (80019a4 <UART_print_float+0x4c>)
 8001974:	4620      	mov	r0, r4
 8001976:	f005 fff1 	bl	800795c <siprintf>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	HAL_UART_Transmit(uart->huart, (uint8_t *)uart->log_buf, uart->log_buf_len, HAL_MAX_DELAY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1d19      	adds	r1, r3, #4
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	f004 fed5 	bl	8006744 <HAL_UART_Transmit>
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0800b204 	.word	0x0800b204

080019a8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == MPU6050_INT_Pin)
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	2b10      	cmp	r3, #16
 80019b6:	d102      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x16>
	{
		imu.data_ready_flag = 1;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_GPIO_EXTI_Callback+0x24>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	751a      	strb	r2, [r3, #20]
	}
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200003e8 	.word	0x200003e8

080019d0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d102      	bne.n	80019ea <HAL_I2C_MemRxCpltCallback+0x1a>
	{
		imu.i2c_complete = 1;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_I2C_MemRxCpltCallback+0x2c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	755a      	strb	r2, [r3, #21]
	}
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200001f8 	.word	0x200001f8
 80019fc:	200003e8 	.word	0x200003e8

08001a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a04:	f000 fcc1 	bl	800238a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a08:	f000 f890 	bl	8001b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0c:	f000 f986 	bl	8001d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a10:	f000 f95e 	bl	8001cd0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a14:	f000 f92c 	bl	8001c70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a18:	f000 f8ea 	bl	8001bf0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10);
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f000 fd29 	bl	8002474 <HAL_Delay>

	UART_Init(&uart, &huart2, 128);
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	4935      	ldr	r1, [pc, #212]	; (8001afc <main+0xfc>)
 8001a26:	4836      	ldr	r0, [pc, #216]	; (8001b00 <main+0x100>)
 8001a28:	f7ff fec4 	bl	80017b4 <UART_Init>
	HAL_Delay(10);
 8001a2c:	200a      	movs	r0, #10
 8001a2e:	f000 fd21 	bl	8002474 <HAL_Delay>

	MPU6050_Init(&imu, &hi2c1, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	4933      	ldr	r1, [pc, #204]	; (8001b04 <main+0x104>)
 8001a36:	4834      	ldr	r0, [pc, #208]	; (8001b08 <main+0x108>)
 8001a38:	f7ff fbd0 	bl	80011dc <MPU6050_Init>
	HAL_Delay(10);
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	f000 fd19 	bl	8002474 <HAL_Delay>

	CompFilterRollPitch_Init(&comp_filter, COMP_FILTER_ALPHA, SAMPLE_TIME_MS, LPF_ACC_ALPHA, LPF_GYR_ALPHA);
 8001a42:	eddf 1a32 	vldr	s3, [pc, #200]	; 8001b0c <main+0x10c>
 8001a46:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001a4a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a4e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001b0c <main+0x10c>
 8001a52:	482f      	ldr	r0, [pc, #188]	; (8001b10 <main+0x110>)
 8001a54:	f7ff fa2a 	bl	8000eac <CompFilterRollPitch_Init>
	HAL_Delay(10);
 8001a58:	200a      	movs	r0, #10
 8001a5a:	f000 fd0b 	bl	8002474 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if (imu.i2c_complete)
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <main+0x108>)
 8001a60:	7d5b      	ldrb	r3, [r3, #21]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <main+0x84>
  	{
  		MPU6050_Process_Data(&imu);
 8001a68:	4827      	ldr	r0, [pc, #156]	; (8001b08 <main+0x108>)
 8001a6a:	f7ff fd0d 	bl	8001488 <MPU6050_Process_Data>
			CompFilterRollPitch_Update(&comp_filter, imu.acc_mps2, imu.gyr_rps);
 8001a6e:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <main+0x114>)
 8001a70:	4929      	ldr	r1, [pc, #164]	; (8001b18 <main+0x118>)
 8001a72:	4827      	ldr	r0, [pc, #156]	; (8001b10 <main+0x110>)
 8001a74:	f7ff fa62 	bl	8000f3c <CompFilterRollPitch_Update>

			imu.dma_rx_flag = 0;
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <main+0x108>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	74da      	strb	r2, [r3, #19]
			imu.i2c_complete = 0;
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <main+0x108>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	755a      	strb	r2, [r3, #21]
  	}

  	if (imu.data_ready_flag && !imu.dma_rx_flag)
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <main+0x108>)
 8001a86:	7d1b      	ldrb	r3, [r3, #20]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <main+0x9e>
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <main+0x108>)
 8001a90:	7cdb      	ldrb	r3, [r3, #19]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <main+0x9e>
		{
			MPU6050_Read_DMA(&imu);
 8001a98:	481b      	ldr	r0, [pc, #108]	; (8001b08 <main+0x108>)
 8001a9a:	f7ff fcc5 	bl	8001428 <MPU6050_Read_DMA>
		}

  	if (HAL_GetTick() - timer_log >= LOG_TIME_MS)
 8001a9e:	f000 fcdd 	bl	800245c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <main+0x11c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b63      	cmp	r3, #99	; 0x63
 8001aac:	d912      	bls.n	8001ad4 <main+0xd4>
		{
			UART_print_float(&uart, -comp_filter.roll_rad * RAD_TO_DEG);
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <main+0x110>)
 8001ab0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ab4:	eef1 7a67 	vneg.f32	s15, s15
 8001ab8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001b20 <main+0x120>
 8001abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <main+0x100>)
 8001ac6:	f7ff ff47 	bl	8001958 <UART_print_float>
			timer_log = HAL_GetTick();
 8001aca:	f000 fcc7 	bl	800245c <HAL_GetTick>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <main+0x11c>)
 8001ad2:	6013      	str	r3, [r2, #0]
		}

  	if (HAL_GetTick() - timer_led >= LED_TIME_MS)
 8001ad4:	f000 fcc2 	bl	800245c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <main+0x124>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ae4:	d3bb      	bcc.n	8001a5e <main+0x5e>
		{
  		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	480f      	ldr	r0, [pc, #60]	; (8001b28 <main+0x128>)
 8001aea:	f001 f9c1 	bl	8002e70 <HAL_GPIO_TogglePin>
  		timer_led = HAL_GetTick();
 8001aee:	f000 fcb5 	bl	800245c <HAL_GetTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <main+0x124>)
 8001af6:	6013      	str	r3, [r2, #0]
  	if (imu.i2c_complete)
 8001af8:	e7b1      	b.n	8001a5e <main+0x5e>
 8001afa:	bf00      	nop
 8001afc:	200002dc 	.word	0x200002dc
 8001b00:	20000360 	.word	0x20000360
 8001b04:	200001f8 	.word	0x200001f8
 8001b08:	200003e8 	.word	0x200003e8
 8001b0c:	3dcccccd 	.word	0x3dcccccd
 8001b10:	20000458 	.word	0x20000458
 8001b14:	20000434 	.word	0x20000434
 8001b18:	20000400 	.word	0x20000400
 8001b1c:	20000498 	.word	0x20000498
 8001b20:	42652ee1 	.word	0x42652ee1
 8001b24:	2000049c 	.word	0x2000049c
 8001b28:	48000400 	.word	0x48000400

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b096      	sub	sp, #88	; 0x58
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	2244      	movs	r2, #68	; 0x44
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 fa9c 	bl	8007078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b52:	f003 fc23 	bl	800539c <HAL_PWREx_ControlVoltageScaling>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b5c:	f000 f954 	bl	8001e08 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b60:	f003 fbfe 	bl	8005360 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <SystemClock_Config+0xc0>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	4a20      	ldr	r2, [pc, #128]	; (8001bec <SystemClock_Config+0xc0>)
 8001b6c:	f023 0318 	bic.w	r3, r3, #24
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b74:	2314      	movs	r3, #20
 8001b76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001b94:	2328      	movs	r3, #40	; 0x28
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b98:	2307      	movs	r3, #7
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fc4d 	bl	8005448 <HAL_RCC_OscConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001bb4:	f000 f928 	bl	8001e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb8:	230f      	movs	r3, #15
 8001bba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2104      	movs	r1, #4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 f84d 	bl	8005c70 <HAL_RCC_ClockConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001bdc:	f000 f914 	bl	8001e08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001be0:	f004 fc60 	bl	80064a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001be4:	bf00      	nop
 8001be6:	3758      	adds	r7, #88	; 0x58
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <MX_I2C1_Init+0x78>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <MX_I2C1_Init+0x7c>)
 8001bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c2c:	f001 f952 	bl	8002ed4 <HAL_I2C_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c36:	f000 f8e7 	bl	8001e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c3e:	f003 faf7 	bl	8005230 <HAL_I2CEx_ConfigAnalogFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f000 f8de 	bl	8001e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c50:	f003 fb39 	bl	80052c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f000 f8d5 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200001f8 	.word	0x200001f8
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	00702991 	.word	0x00702991

08001c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c76:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <MX_USART2_UART_Init+0x5c>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART2_UART_Init+0x58>)
 8001cb4:	f004 fcf8 	bl	80066a8 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cbe:	f000 f8a3 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002dc 	.word	0x200002dc
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_DMA_Init+0x48>)
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cda:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <MX_DMA_Init+0x48>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6493      	str	r3, [r2, #72]	; 0x48
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <MX_DMA_Init+0x48>)
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2010      	movs	r0, #16
 8001cf4:	f000 fcbd 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001cf8:	2010      	movs	r0, #16
 8001cfa:	f000 fcd6 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2011      	movs	r0, #17
 8001d04:	f000 fcb5 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d08:	2011      	movs	r0, #17
 8001d0a:	f000 fcce 	bl	80026aa <HAL_NVIC_EnableIRQ>

}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	4a32      	ldr	r2, [pc, #200]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <MX_GPIO_Init+0xe4>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	4821      	ldr	r0, [pc, #132]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d80:	f001 f85e 	bl	8002e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001d84:	2302      	movs	r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9c:	f000 fee6 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001da0:	2308      	movs	r3, #8
 8001da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	4813      	ldr	r0, [pc, #76]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001db8:	f000 fed8 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU6050_INT_Pin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001dd2:	f000 fecb 	bl	8002b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2007      	movs	r0, #7
 8001ddc:	f000 fc49 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001de0:	2007      	movs	r0, #7
 8001de2:	f000 fc62 	bl	80026aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	200a      	movs	r0, #10
 8001dec:	f000 fc41 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001df0:	200a      	movs	r0, #10
 8001df2:	f000 fc5a 	bl	80026aa <HAL_NVIC_EnableIRQ>

}
 8001df6:	bf00      	nop
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	48000400 	.word	0x48000400

08001e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	UART_println(&uart, "Error_Handler()");
 8001e10:	4902      	ldr	r1, [pc, #8]	; (8001e1c <Error_Handler+0x14>)
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <Error_Handler+0x18>)
 8001e14:	f7ff fcea 	bl	80017ec <UART_println>
 8001e18:	e7fa      	b.n	8001e10 <Error_Handler+0x8>
 8001e1a:	bf00      	nop
 8001e1c:	0800b24c 	.word	0x0800b24c
 8001e20:	20000360 	.word	0x20000360

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_MspInit+0x44>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_MspInit+0x44>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6613      	str	r3, [r2, #96]	; 0x60
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x44>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_MspInit+0x44>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x44>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x44>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b09e      	sub	sp, #120	; 0x78
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	2254      	movs	r2, #84	; 0x54
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 f8f3 	bl	8007078 <memset>
  if(hi2c->Instance==I2C1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <HAL_I2C_MspInit+0x16c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	f040 8098 	bne.w	8001fce <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e9e:	2340      	movs	r3, #64	; 0x40
 8001ea0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 f904 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eb6:	f7ff ffa7 	bl	8001e08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_I2C_MspInit+0x170>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a47      	ldr	r2, [pc, #284]	; (8001fdc <HAL_I2C_MspInit+0x170>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b45      	ldr	r3, [pc, #276]	; (8001fdc <HAL_I2C_MspInit+0x170>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed2:	23c0      	movs	r3, #192	; 0xc0
 8001ed4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ed6:	2312      	movs	r3, #18
 8001ed8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eea:	4619      	mov	r1, r3
 8001eec:	483c      	ldr	r0, [pc, #240]	; (8001fe0 <HAL_I2C_MspInit+0x174>)
 8001eee:	f000 fe3d 	bl	8002b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_I2C_MspInit+0x170>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	4a39      	ldr	r2, [pc, #228]	; (8001fdc <HAL_I2C_MspInit+0x170>)
 8001ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efc:	6593      	str	r3, [r2, #88]	; 0x58
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_I2C_MspInit+0x170>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f0c:	4a36      	ldr	r2, [pc, #216]	; (8001fe8 <HAL_I2C_MspInit+0x17c>)
 8001f0e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001f10:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f12:	2203      	movs	r2, #3
 8001f14:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001f40:	4828      	ldr	r0, [pc, #160]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f42:	f000 fbcd 	bl	80026e0 <HAL_DMA_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8001f4c:	f7ff ff5c 	bl	8001e08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_I2C_MspInit+0x178>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f5e:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_I2C_MspInit+0x184>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f64:	2203      	movs	r2, #3
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001f92:	4816      	ldr	r0, [pc, #88]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001f94:	f000 fba4 	bl	80026e0 <HAL_DMA_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001f9e:	f7ff ff33 	bl	8001e08 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_I2C_MspInit+0x180>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	201f      	movs	r0, #31
 8001fb4:	f000 fb5d 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001fb8:	201f      	movs	r0, #31
 8001fba:	f000 fb76 	bl	80026aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2020      	movs	r0, #32
 8001fc4:	f000 fb55 	bl	8002672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001fc8:	2020      	movs	r0, #32
 8001fca:	f000 fb6e 	bl	80026aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3778      	adds	r7, #120	; 0x78
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40005400 	.word	0x40005400
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48000400 	.word	0x48000400
 8001fe4:	2000024c 	.word	0x2000024c
 8001fe8:	40020080 	.word	0x40020080
 8001fec:	20000294 	.word	0x20000294
 8001ff0:	4002006c 	.word	0x4002006c

08001ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b09e      	sub	sp, #120	; 0x78
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	2254      	movs	r2, #84	; 0x54
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f005 f82f 	bl	8007078 <memset>
  if(huart->Instance==USART2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_UART_MspInit+0xcc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d148      	bne.n	80020b6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002024:	2302      	movs	r3, #2
 8002026:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002028:	2300      	movs	r3, #0
 800202a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4618      	mov	r0, r3
 8002032:	f004 f841 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800203c:	f7ff fee4 	bl	8001e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_UART_MspInit+0xd0>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_UART_MspInit+0xd0>)
 8002046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_UART_MspInit+0xd0>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_UART_MspInit+0xd0>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_UART_MspInit+0xd0>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_UART_MspInit+0xd0>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002070:	2304      	movs	r3, #4
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002080:	2307      	movs	r3, #7
 8002082:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208e:	f000 fd6d 	bl	8002b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002096:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80020a4:	2303      	movs	r3, #3
 80020a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b2:	f000 fd5b 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3778      	adds	r7, #120	; 0x78
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40004400 	.word	0x40004400
 80020c4:	40021000 	.word	0x40021000

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <NMI_Handler+0x4>

080020ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <MemManage_Handler+0x4>

080020da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <BusFault_Handler+0x4>

080020e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <UsageFault_Handler+0x4>

080020e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002114:	f000 f98e 	bl	8002434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8002120:	2002      	movs	r0, #2
 8002122:	f000 febf 	bl	8002ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}

0800212a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 800212e:	2010      	movs	r0, #16
 8002130:	f000 feb8 	bl	8002ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <DMA1_Channel6_IRQHandler+0x10>)
 800213e:	f000 fc28 	bl	8002992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000294 	.word	0x20000294

0800214c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <DMA1_Channel7_IRQHandler+0x10>)
 8002152:	f000 fc1e 	bl	8002992 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000024c 	.word	0x2000024c

08002160 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <I2C1_EV_IRQHandler+0x10>)
 8002166:	f001 fb60 	bl	800382a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200001f8 	.word	0x200001f8

08002174 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <I2C1_ER_IRQHandler+0x10>)
 800217a:	f001 fb70 	bl	800385e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001f8 	.word	0x200001f8

08002188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_kill>:

int _kill(int pid, int sig)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021a2:	f004 ff3f 	bl	8007024 <__errno>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2216      	movs	r2, #22
 80021aa:	601a      	str	r2, [r3, #0]
  return -1;
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_exit>:

void _exit (int status)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ffe7 	bl	8002198 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021ca:	e7fe      	b.n	80021ca <_exit+0x12>

080021cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e00a      	b.n	80021f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021de:	f3af 8000 	nop.w
 80021e2:	4601      	mov	r1, r0
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	b2ca      	uxtb	r2, r1
 80021ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dbf0      	blt.n	80021de <_read+0x12>
  }

  return len;
 80021fc:	687b      	ldr	r3, [r7, #4]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e009      	b.n	800222c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	60ba      	str	r2, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	429a      	cmp	r2, r3
 8002232:	dbf1      	blt.n	8002218 <_write+0x12>
  }
  return len;
 8002234:	687b      	ldr	r3, [r7, #4]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_close>:

int _close(int file)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002266:	605a      	str	r2, [r3, #4]
  return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_isatty>:

int _isatty(int file)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <_sbrk+0x5c>)
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <_sbrk+0x60>)
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <_sbrk+0x64>)
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <_sbrk+0x68>)
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d207      	bcs.n	80022e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d8:	f004 fea4 	bl	8007024 <__errno>
 80022dc:	4603      	mov	r3, r0
 80022de:	220c      	movs	r2, #12
 80022e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	e009      	b.n	80022fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <_sbrk+0x64>)
 80022f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022fa:	68fb      	ldr	r3, [r7, #12]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20010000 	.word	0x20010000
 8002308:	00000400 	.word	0x00000400
 800230c:	200004a0 	.word	0x200004a0
 8002310:	200004b8 	.word	0x200004b8

08002314 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <SystemInit+0x20>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <SystemInit+0x20>)
 8002320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002370 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800233c:	f7ff ffea 	bl	8002314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <LoopForever+0x6>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <LoopForever+0xe>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	; (8002384 <LoopForever+0x16>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002366:	f004 fe63 	bl	8007030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800236a:	f7ff fb49 	bl	8001a00 <main>

0800236e <LoopForever>:

LoopForever:
    b LoopForever
 800236e:	e7fe      	b.n	800236e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002370:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800237c:	0800ba94 	.word	0x0800ba94
  ldr r2, =_sbss
 8002380:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002384:	200004b8 	.word	0x200004b8

08002388 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC1_IRQHandler>

0800238a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002394:	2003      	movs	r0, #3
 8002396:	f000 f961 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800239a:	2000      	movs	r0, #0
 800239c:	f000 f80e 	bl	80023bc <HAL_InitTick>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	e001      	b.n	80023b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023ac:	f7ff fd3a 	bl	8001e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_InitTick+0x6c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d023      	beq.n	8002418 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_InitTick+0x70>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_InitTick+0x6c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023de:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f96d 	bl	80026c6 <HAL_SYSTICK_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d809      	bhi.n	800240c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f000 f937 	bl	8002672 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_InitTick+0x74>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e007      	b.n	800241c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e004      	b.n	800241c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	e001      	b.n	800241c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000008 	.word	0x20000008
 800242c:	20000000 	.word	0x20000000
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x20>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x24>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4413      	add	r3, r2
 8002444:	4a04      	ldr	r2, [pc, #16]	; (8002458 <HAL_IncTick+0x24>)
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000008 	.word	0x20000008
 8002458:	200004a4 	.word	0x200004a4

0800245c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return uwTick;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_GetTick+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200004a4 	.word	0x200004a4

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff ffee 	bl	800245c <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d005      	beq.n	800249a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_Delay+0x44>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249a:	bf00      	nop
 800249c:	f7ff ffde 	bl	800245c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d8f7      	bhi.n	800249c <HAL_Delay+0x28>
  {
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000008 	.word	0x20000008

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4907      	ldr	r1, [pc, #28]	; (8002558 <__NVIC_EnableIRQ+0x38>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
         );
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7ff ff8e 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff29 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff3e 	bl	8002504 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff8e 	bl	80025b0 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff31 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e098      	b.n	8002824 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <HAL_DMA_Init+0x150>)
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d80f      	bhi.n	800271e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_DMA_Init+0x154>)
 8002706:	4413      	add	r3, r2
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_DMA_Init+0x158>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a48      	ldr	r2, [pc, #288]	; (800283c <HAL_DMA_Init+0x15c>)
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
 800271c:	e00e      	b.n	800273c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	4b46      	ldr	r3, [pc, #280]	; (8002840 <HAL_DMA_Init+0x160>)
 8002726:	4413      	add	r3, r2
 8002728:	4a43      	ldr	r2, [pc, #268]	; (8002838 <HAL_DMA_Init+0x158>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	009a      	lsls	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a42      	ldr	r2, [pc, #264]	; (8002844 <HAL_DMA_Init+0x164>)
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002796:	d039      	beq.n	800280c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	4a27      	ldr	r2, [pc, #156]	; (800283c <HAL_DMA_Init+0x15c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d11a      	bne.n	80027d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027a2:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_DMA_Init+0x168>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f003 031c 	and.w	r3, r3, #28
 80027ae:	210f      	movs	r1, #15
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4924      	ldr	r1, [pc, #144]	; (8002848 <HAL_DMA_Init+0x168>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_DMA_Init+0x168>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f003 031c 	and.w	r3, r3, #28
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	491d      	ldr	r1, [pc, #116]	; (8002848 <HAL_DMA_Init+0x168>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
 80027d6:	e019      	b.n	800280c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_DMA_Init+0x16c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f003 031c 	and.w	r3, r3, #28
 80027e4:	210f      	movs	r1, #15
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	4917      	ldr	r1, [pc, #92]	; (800284c <HAL_DMA_Init+0x16c>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_DMA_Init+0x16c>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f003 031c 	and.w	r3, r3, #28
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	4911      	ldr	r1, [pc, #68]	; (800284c <HAL_DMA_Init+0x16c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40020407 	.word	0x40020407
 8002834:	bffdfff8 	.word	0xbffdfff8
 8002838:	cccccccd 	.word	0xcccccccd
 800283c:	40020000 	.word	0x40020000
 8002840:	bffdfbf8 	.word	0xbffdfbf8
 8002844:	40020400 	.word	0x40020400
 8002848:	400200a8 	.word	0x400200a8
 800284c:	400204a8 	.word	0x400204a8

08002850 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Start_IT+0x20>
 800286c:	2302      	movs	r3, #2
 800286e:	e04b      	b.n	8002908 <HAL_DMA_Start_IT+0xb8>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d13a      	bne.n	80028fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f92f 	bl	8002b0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 020e 	orr.w	r2, r2, #14
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e00f      	b.n	80028e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 020a 	orr.w	r2, r2, #10
 80028e6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e005      	b.n	8002906 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d005      	beq.n	8002934 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e029      	b.n	8002988 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 020e 	bic.w	r2, r2, #14
 8002942:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	f003 021c 	and.w	r2, r3, #28
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
    }
  }
  return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f003 031c 	and.w	r3, r3, #28
 80029b2:	2204      	movs	r2, #4
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d026      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x7a>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d021      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0204 	bic.w	r2, r2, #4
 80029e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f003 021c 	and.w	r2, r3, #28
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2104      	movs	r1, #4
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d071      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	e06c      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f003 031c 	and.w	r3, r3, #28
 8002a14:	2202      	movs	r2, #2
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02e      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xec>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d029      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020a 	bic.w	r2, r2, #10
 8002a46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f003 021c 	and.w	r2, r3, #28
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d038      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a7c:	e033      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f003 031c 	and.w	r3, r3, #28
 8002a86:	2208      	movs	r2, #8
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d02a      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x156>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d025      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 020e 	bic.w	r2, r2, #14
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f003 021c 	and.w	r2, r3, #28
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f202 	lsl.w	r2, r1, r2
 8002abe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
}
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002afe:	b2db      	uxtb	r3, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f003 021c 	and.w	r2, r3, #28
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d108      	bne.n	8002b50 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b4e:	e007      	b.n	8002b60 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7a:	e148      	b.n	8002e0e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 813a 	beq.w	8002e08 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d005      	beq.n	8002bac <HAL_GPIO_Init+0x40>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d130      	bne.n	8002c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be2:	2201      	movs	r2, #1
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 0201 	and.w	r2, r3, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d017      	beq.n	8002c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d123      	bne.n	8002c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	6939      	ldr	r1, [r7, #16]
 8002c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8094 	beq.w	8002e08 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce0:	4b52      	ldr	r3, [pc, #328]	; (8002e2c <HAL_GPIO_Init+0x2c0>)
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	4a51      	ldr	r2, [pc, #324]	; (8002e2c <HAL_GPIO_Init+0x2c0>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6613      	str	r3, [r2, #96]	; 0x60
 8002cec:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <HAL_GPIO_Init+0x2c0>)
 8002cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf8:	4a4d      	ldr	r2, [pc, #308]	; (8002e30 <HAL_GPIO_Init+0x2c4>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d22:	d00d      	beq.n	8002d40 <HAL_GPIO_Init+0x1d4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a43      	ldr	r2, [pc, #268]	; (8002e34 <HAL_GPIO_Init+0x2c8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <HAL_GPIO_Init+0x1d0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_GPIO_Init+0x2cc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_GPIO_Init+0x1cc>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e004      	b.n	8002d42 <HAL_GPIO_Init+0x1d6>
 8002d38:	2307      	movs	r3, #7
 8002d3a:	e002      	b.n	8002d42 <HAL_GPIO_Init+0x1d6>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_GPIO_Init+0x1d6>
 8002d40:	2300      	movs	r3, #0
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	f002 0203 	and.w	r2, r2, #3
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	4093      	lsls	r3, r2
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d52:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_GPIO_Init+0x2c4>)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d60:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d84:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dae:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dde:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e02:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <HAL_GPIO_Init+0x2d0>)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f aeaf 	bne.w	8002b7c <HAL_GPIO_Init+0x10>
  }
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40010000 	.word	0x40010000
 8002e34:	48000400 	.word	0x48000400
 8002e38:	48000800 	.word	0x48000800
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e50:	787b      	ldrb	r3, [r7, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4013      	ands	r3, r2
 8002e88:	041a      	lsls	r2, r3, #16
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43d9      	mvns	r1, r3
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	400b      	ands	r3, r1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eba:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fd70 	bl	80019a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e081      	b.n	8002fea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe ffb6 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	; 0x24
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	e006      	b.n	8002f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d104      	bne.n	8002f6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69d9      	ldr	r1, [r3, #28]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	f040 80f9 	bne.w	800320e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_I2C_Mem_Write+0x34>
 8003022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0ed      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Mem_Write+0x4e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0e6      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800304a:	f7ff fa07 	bl	800245c <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2319      	movs	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f001 fe44 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0d1      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2221      	movs	r2, #33	; 0x21
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003094:	88f8      	ldrh	r0, [r7, #6]
 8003096:	893a      	ldrh	r2, [r7, #8]
 8003098:	8979      	ldrh	r1, [r7, #10]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	4603      	mov	r3, r0
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f001 f893 	bl	80041d0 <I2C_RequestMemoryWrite>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0a9      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2bff      	cmp	r3, #255	; 0xff
 80030c4:	d90e      	bls.n	80030e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	22ff      	movs	r2, #255	; 0xff
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	8979      	ldrh	r1, [r7, #10]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f001 ffad 	bl	800503c <I2C_TransferConfig>
 80030e2:	e00f      	b.n	8003104 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	2300      	movs	r3, #0
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f001 ff9c 	bl	800503c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f001 fe2e 	bl	8004d6a <I2C_WaitOnTXISFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e07b      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d034      	beq.n	80031bc <HAL_I2C_Mem_Write+0x1c8>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d130      	bne.n	80031bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	2200      	movs	r2, #0
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f001 fdc0 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04d      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d90e      	bls.n	800319c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	b2da      	uxtb	r2, r3
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	2300      	movs	r3, #0
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f001 ff51 	bl	800503c <I2C_TransferConfig>
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f001 ff40 	bl	800503c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d19e      	bne.n	8003104 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f001 fe0d 	bl	8004dea <I2C_WaitOnSTOPFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e01a      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2220      	movs	r2, #32
 80031e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_I2C_Mem_Write+0x224>)
 80031ee:	400b      	ands	r3, r1
 80031f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	817b      	strh	r3, [r7, #10]
 800322e:	460b      	mov	r3, r1
 8003230:	813b      	strh	r3, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	f040 80fd 	bne.w	800343e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_I2C_Mem_Read+0x34>
 800324a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0f1      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2C_Mem_Read+0x4e>
 8003266:	2302      	movs	r3, #2
 8003268:	e0ea      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003272:	f7ff f8f3 	bl	800245c <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2319      	movs	r3, #25
 800327e:	2201      	movs	r2, #1
 8003280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f001 fd30 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0d5      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2222      	movs	r2, #34	; 0x22
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2240      	movs	r2, #64	; 0x40
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032bc:	88f8      	ldrh	r0, [r7, #6]
 80032be:	893a      	ldrh	r2, [r7, #8]
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4603      	mov	r3, r0
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 ffd3 	bl	8004278 <I2C_RequestMemoryRead>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0ad      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2bff      	cmp	r3, #255	; 0xff
 80032ec:	d90e      	bls.n	800330c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	22ff      	movs	r2, #255	; 0xff
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	8979      	ldrh	r1, [r7, #10]
 80032fc:	4b52      	ldr	r3, [pc, #328]	; (8003448 <HAL_I2C_Mem_Read+0x22c>)
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f001 fe99 	bl	800503c <I2C_TransferConfig>
 800330a:	e00f      	b.n	800332c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	b2da      	uxtb	r2, r3
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_I2C_Mem_Read+0x22c>)
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f001 fe88 	bl	800503c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	2200      	movs	r2, #0
 8003334:	2104      	movs	r1, #4
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f001 fcd7 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07c      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d034      	beq.n	80033ec <HAL_I2C_Mem_Read+0x1d0>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	d130      	bne.n	80033ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	2200      	movs	r2, #0
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f001 fca8 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e04d      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d90e      	bls.n	80033cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f001 fe39 	bl	800503c <I2C_TransferConfig>
 80033ca:	e00f      	b.n	80033ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	8979      	ldrh	r1, [r7, #10]
 80033de:	2300      	movs	r3, #0
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f001 fe28 	bl	800503c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d19a      	bne.n	800332c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f001 fcf5 	bl	8004dea <I2C_WaitOnSTOPFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e01a      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2220      	movs	r2, #32
 8003410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_I2C_Mem_Read+0x230>)
 800341e:	400b      	ands	r3, r1
 8003420:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	80002400 	.word	0x80002400
 800344c:	fe00e800 	.word	0xfe00e800

08003450 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4603      	mov	r3, r0
 8003460:	817b      	strh	r3, [r7, #10]
 8003462:	460b      	mov	r3, r1
 8003464:	813b      	strh	r3, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b20      	cmp	r3, #32
 8003474:	f040 80c2 	bne.w	80035fc <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_I2C_Mem_Read_DMA+0x34>
 800347e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0b6      	b.n	80035fe <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349e:	d101      	bne.n	80034a4 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0ac      	b.n	80035fe <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2C_Mem_Read_DMA+0x62>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e0a5      	b.n	80035fe <HAL_I2C_Mem_Read_DMA+0x1ae>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2222      	movs	r2, #34	; 0x22
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2240      	movs	r2, #64	; 0x40
 80034c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a3a      	ldr	r2, [r7, #32]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a4a      	ldr	r2, [pc, #296]	; (8003608 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a49      	ldr	r2, [pc, #292]	; (800360c <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80034e8:	897a      	ldrh	r2, [r7, #10]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2bff      	cmp	r3, #255	; 0xff
 80034f6:	d903      	bls.n	8003500 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80034fe:	e004      	b.n	800350a <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d109      	bne.n	8003524 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003510:	893b      	ldrh	r3, [r7, #8]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	651a      	str	r2, [r3, #80]	; 0x50
 8003522:	e00b      	b.n	800353c <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003524:	893b      	ldrh	r3, [r7, #8]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	b29b      	uxth	r3, r3
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003532:	893b      	ldrh	r3, [r7, #8]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	4a30      	ldr	r2, [pc, #192]	; (8003614 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8003552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	2200      	movs	r2, #0
 8003562:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3324      	adds	r3, #36	; 0x24
 800356e:	4619      	mov	r1, r3
 8003570:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003576:	f7ff f96b 	bl	8002850 <HAL_DMA_Start_IT>
 800357a:	4603      	mov	r3, r0
 800357c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d127      	bne.n	80035d4 <HAL_I2C_Mem_Read_DMA+0x184>
 8003584:	e013      	b.n	80035ae <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e027      	b.n	80035fe <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	8979      	ldrh	r1, [r7, #10]
 80035b4:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f001 fd3e 	bl	800503c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035c8:	2101      	movs	r1, #1
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f001 fd68 	bl	80050a0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e014      	b.n	80035fe <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f043 0210 	orr.w	r2, r3, #16
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	ffff0000 	.word	0xffff0000
 800360c:	08003dc9 	.word	0x08003dc9
 8003610:	08004beb 	.word	0x08004beb
 8003614:	08004c81 	.word	0x08004c81
 8003618:	80002000 	.word	0x80002000

0800361c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	460b      	mov	r3, r1
 800362a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b20      	cmp	r3, #32
 800363a:	f040 80f1 	bne.w	8003820 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364c:	d101      	bne.n	8003652 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
 8003650:	e0e7      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_I2C_IsDeviceReady+0x44>
 800365c:	2302      	movs	r3, #2
 800365e:	e0e0      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_I2C_IsDeviceReady+0x72>
 800367e:	897b      	ldrh	r3, [r7, #10]
 8003680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800368c:	e004      	b.n	8003698 <HAL_I2C_IsDeviceReady+0x7c>
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003694:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800369e:	f7fe fedd 	bl	800245c <HAL_GetTick>
 80036a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80036d0:	e034      	b.n	800373c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d01a      	beq.n	8003710 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe febf 	bl	800245c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <HAL_I2C_IsDeviceReady+0xd4>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10f      	bne.n	8003710 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e088      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b20      	cmp	r3, #32
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <HAL_I2C_IsDeviceReady+0x12c>
 8003742:	7fbb      	ldrb	r3, [r7, #30]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0c4      	beq.n	80036d2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d01a      	beq.n	800378c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	2120      	movs	r1, #32
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f001 fac2 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e058      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2220      	movs	r2, #32
 8003776:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e04a      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	2120      	movs	r1, #32
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f001 faa7 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e03d      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2210      	movs	r2, #16
 80037ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2220      	movs	r2, #32
 80037b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d118      	bne.n	80037f0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2120      	movs	r1, #32
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f001 fa86 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e01c      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2220      	movs	r2, #32
 80037ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3301      	adds	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	f63f af3b 	bhi.w	8003676 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
  }
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	09db      	lsrs	r3, r3, #7
 8003886:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	09db      	lsrs	r3, r3, #7
 80038b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f043 0208 	orr.w	r2, r3, #8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	0a5b      	lsrs	r3, r3, #9
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	09db      	lsrs	r3, r3, #7
 80038e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f043 0202 	orr.w	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 030b 	and.w	r3, r3, #11
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f001 f84e 	bl	80049b4 <I2C_ITError>
  }
}
 8003918:	bf00      	nop
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
 800397c:	4613      	mov	r3, r2
 800397e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <I2C_Slave_ISR_IT+0x24>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0ec      	b.n	8003bda <I2C_Slave_ISR_IT+0x1fe>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fe66 	bl	80046f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d04d      	beq.n	8003ad0 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d047      	beq.n	8003ad0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d128      	bne.n	8003a9c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b28      	cmp	r3, #40	; 0x28
 8003a54:	d108      	bne.n	8003a68 <I2C_Slave_ISR_IT+0x8c>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a5c:	d104      	bne.n	8003a68 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a5e:	6939      	ldr	r1, [r7, #16]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 ff51 	bl	8004908 <I2C_ITListenCplt>
 8003a66:	e032      	b.n	8003ace <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b29      	cmp	r3, #41	; 0x29
 8003a72:	d10e      	bne.n	8003a92 <I2C_Slave_ISR_IT+0xb6>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a7a:	d00a      	beq.n	8003a92 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2210      	movs	r2, #16
 8003a82:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f001 f88c 	bl	8004ba2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fd09 	bl	80044a2 <I2C_ITSlaveSeqCplt>
 8003a90:	e01d      	b.n	8003ace <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2210      	movs	r2, #16
 8003a98:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003a9a:	e096      	b.n	8003bca <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	f043 0204 	orr.w	r2, r3, #4
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <I2C_Slave_ISR_IT+0xe4>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003abc:	f040 8085 	bne.w	8003bca <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 ff74 	bl	80049b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003acc:	e07d      	b.n	8003bca <I2C_Slave_ISR_IT+0x1ee>
 8003ace:	e07c      	b.n	8003bca <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d030      	beq.n	8003b3e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02a      	beq.n	8003b3e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d14f      	bne.n	8003bce <I2C_Slave_ISR_IT+0x1f2>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b34:	d04b      	beq.n	8003bce <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fcb3 	bl	80044a2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003b3c:	e047      	b.n	8003bce <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	08db      	lsrs	r3, r3, #3
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fbe1 	bl	8004320 <I2C_ITAddrCplt>
 8003b5e:	e037      	b.n	8003bd0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d031      	beq.n	8003bd0 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02b      	beq.n	8003bd0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d018      	beq.n	8003bb4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
 8003bb2:	e00d      	b.n	8003bd0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bba:	d002      	beq.n	8003bc2 <I2C_Slave_ISR_IT+0x1e6>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fc6d 	bl	80044a2 <I2C_ITSlaveSeqCplt>
 8003bc8:	e002      	b.n	8003bd0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003bce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b088      	sub	sp, #32
 8003be6:	af02      	add	r7, sp, #8
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <I2C_Master_ISR_DMA+0x1a>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e0e1      	b.n	8003dc0 <I2C_Master_ISR_DMA+0x1de>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d011      	beq.n	8003c40 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2210      	movs	r2, #16
 8003c22:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	f043 0204 	orr.w	r2, r3, #4
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003c30:	2120      	movs	r1, #32
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f001 fa34 	bl	80050a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 ffb2 	bl	8004ba2 <I2C_Flush_TXDR>
 8003c3e:	e0ba      	b.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	09db      	lsrs	r3, r3, #7
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d072      	beq.n	8003d32 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d06c      	beq.n	8003d32 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d04e      	beq.n	8003d10 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2bff      	cmp	r3, #255	; 0xff
 8003c88:	d906      	bls.n	8003c98 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	22ff      	movs	r2, #255	; 0xff
 8003c8e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e010      	b.n	8003cba <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003caa:	d003      	beq.n	8003cb4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e002      	b.n	8003cba <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cb8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	8a79      	ldrh	r1, [r7, #18]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f001 f9b7 	bl	800503c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b22      	cmp	r3, #34	; 0x22
 8003cea:	d108      	bne.n	8003cfe <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cfa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003cfc:	e05b      	b.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003d0e:	e052      	b.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d1e:	d003      	beq.n	8003d28 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fb81 	bl	8004428 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003d26:	e046      	b.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fe42 	bl	80049b4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003d30:	e041      	b.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d029      	beq.n	8003d92 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d023      	beq.n	8003d92 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d119      	bne.n	8003d88 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d62:	d027      	beq.n	8003db4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d6c:	d108      	bne.n	8003d80 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003d7e:	e019      	b.n	8003db4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fb51 	bl	8004428 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003d86:	e015      	b.n	8003db4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fe12 	bl	80049b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003d90:	e010      	b.n	8003db4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 fbd7 	bl	8004560 <I2C_ITMasterCplt>
 8003db2:	e000      	b.n	8003db6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003db4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003dd4:	4b8c      	ldr	r3, [pc, #560]	; (8004008 <I2C_Mem_ISR_DMA+0x240>)
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <I2C_Mem_ISR_DMA+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e10c      	b.n	8004000 <I2C_Mem_ISR_DMA+0x238>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d017      	beq.n	8003e2a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d011      	beq.n	8003e2a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f043 0204 	orr.w	r2, r3, #4
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f001 f93f 	bl	80050a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 febd 	bl	8004ba2 <I2C_Flush_TXDR>
 8003e28:	e0e5      	b.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00f      	beq.n	8003e56 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	651a      	str	r2, [r3, #80]	; 0x50
 8003e54:	e0cf      	b.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	09db      	lsrs	r3, r3, #7
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d05c      	beq.n	8003f1c <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d056      	beq.n	8003f1c <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003e6e:	2110      	movs	r1, #16
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f001 f915 	bl	80050a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d048      	beq.n	8003f12 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2bff      	cmp	r3, #255	; 0xff
 8003e88:	d910      	bls.n	8003eac <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	22ff      	movs	r2, #255	; 0xff
 8003e8e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	b299      	uxth	r1, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f001 f8c9 	bl	800503c <I2C_TransferConfig>
 8003eaa:	e011      	b.n	8003ed0 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	b299      	uxth	r1, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f001 f8b6 	bl	800503c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	d108      	bne.n	8003f00 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003efe:	e07a      	b.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f10:	e071      	b.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f12:	2140      	movs	r1, #64	; 0x40
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fd4d 	bl	80049b4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f1a:	e06c      	b.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	099b      	lsrs	r3, r3, #6
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d056      	beq.n	8003fd6 <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d050      	beq.n	8003fd6 <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b22      	cmp	r3, #34	; 0x22
 8003f3e:	d101      	bne.n	8003f44 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8003f40:	4b32      	ldr	r3, [pc, #200]	; (800400c <I2C_Mem_ISR_DMA+0x244>)
 8003f42:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2bff      	cmp	r3, #255	; 0xff
 8003f4c:	d910      	bls.n	8003f70 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f58:	b299      	uxth	r1, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f001 f867 	bl	800503c <I2C_TransferConfig>
 8003f6e:	e011      	b.n	8003f94 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7e:	b299      	uxth	r1, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f001 f854 	bl	800503c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b22      	cmp	r3, #34	; 0x22
 8003fb0:	d108      	bne.n	8003fc4 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fc2:	e018      	b.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fd4:	e00f      	b.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fab5 	bl	8004560 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	80002000 	.word	0x80002000
 800400c:	80002400 	.word	0x80002400

08004010 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <I2C_Slave_ISR_DMA+0x24>
 8004030:	2302      	movs	r3, #2
 8004032:	e0c9      	b.n	80041c8 <I2C_Slave_ISR_DMA+0x1b8>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fb4c 	bl	80046f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 809a 	beq.w	800419e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8093 	beq.w	800419e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0b9b      	lsrs	r3, r3, #14
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0bdb      	lsrs	r3, r3, #15
 8004088:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800408c:	2b00      	cmp	r3, #0
 800408e:	d07f      	beq.n	8004190 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0bdb      	lsrs	r3, r3, #15
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80040b0:	2301      	movs	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	0b9b      	lsrs	r3, r3, #14
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80040d4:	2301      	movs	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d128      	bne.n	8004130 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b28      	cmp	r3, #40	; 0x28
 80040e8:	d108      	bne.n	80040fc <I2C_Slave_ISR_DMA+0xec>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f0:	d104      	bne.n	80040fc <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fc07 	bl	8004908 <I2C_ITListenCplt>
 80040fa:	e048      	b.n	800418e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b29      	cmp	r3, #41	; 0x29
 8004106:	d10e      	bne.n	8004126 <I2C_Slave_ISR_DMA+0x116>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410e:	d00a      	beq.n	8004126 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2210      	movs	r2, #16
 8004116:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fd42 	bl	8004ba2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f9bf 	bl	80044a2 <I2C_ITSlaveSeqCplt>
 8004124:	e033      	b.n	800418e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2210      	movs	r2, #16
 800412c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800412e:	e034      	b.n	800419a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2210      	movs	r2, #16
 8004136:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	f043 0204 	orr.w	r2, r3, #4
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <I2C_Slave_ISR_DMA+0x14a>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004158:	d11f      	bne.n	800419a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b21      	cmp	r3, #33	; 0x21
 800415e:	d002      	beq.n	8004166 <I2C_Slave_ISR_DMA+0x156>
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	2b29      	cmp	r3, #41	; 0x29
 8004164:	d103      	bne.n	800416e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2221      	movs	r2, #33	; 0x21
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
 800416c:	e008      	b.n	8004180 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	2b22      	cmp	r3, #34	; 0x22
 8004172:	d002      	beq.n	800417a <I2C_Slave_ISR_DMA+0x16a>
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b2a      	cmp	r3, #42	; 0x2a
 8004178:	d102      	bne.n	8004180 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2222      	movs	r2, #34	; 0x22
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	4619      	mov	r1, r3
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fc14 	bl	80049b4 <I2C_ITError>
      if (treatdmanack == 1U)
 800418c:	e005      	b.n	800419a <I2C_Slave_ISR_DMA+0x18a>
 800418e:	e004      	b.n	800419a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2210      	movs	r2, #16
 8004196:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004198:	e011      	b.n	80041be <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800419a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800419c:	e00f      	b.n	80041be <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	08db      	lsrs	r3, r3, #3
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f8b1 	bl	8004320 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	4608      	mov	r0, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	461a      	mov	r2, r3
 80041de:	4603      	mov	r3, r0
 80041e0:	817b      	strh	r3, [r7, #10]
 80041e2:	460b      	mov	r3, r1
 80041e4:	813b      	strh	r3, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	8979      	ldrh	r1, [r7, #10]
 80041f0:	4b20      	ldr	r3, [pc, #128]	; (8004274 <I2C_RequestMemoryWrite+0xa4>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 ff1f 	bl	800503c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fdb1 	bl	8004d6a <I2C_WaitOnTXISFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e02c      	b.n	800426c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	629a      	str	r2, [r3, #40]	; 0x28
 8004222:	e015      	b.n	8004250 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004224:	893b      	ldrh	r3, [r7, #8]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	b29b      	uxth	r3, r3
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fd97 	bl	8004d6a <I2C_WaitOnTXISFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e012      	b.n	800426c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004246:	893b      	ldrh	r3, [r7, #8]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2200      	movs	r2, #0
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fd45 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	80002000 	.word	0x80002000

08004278 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4603      	mov	r3, r0
 8004288:	817b      	strh	r3, [r7, #10]
 800428a:	460b      	mov	r3, r1
 800428c:	813b      	strh	r3, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	8979      	ldrh	r1, [r7, #10]
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <I2C_RequestMemoryRead+0xa4>)
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2300      	movs	r3, #0
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fecc 	bl	800503c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	69b9      	ldr	r1, [r7, #24]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fd5e 	bl	8004d6a <I2C_WaitOnTXISFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e02c      	b.n	8004312 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d105      	bne.n	80042ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042be:	893b      	ldrh	r3, [r7, #8]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
 80042c8:	e015      	b.n	80042f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fd44 	bl	8004d6a <I2C_WaitOnTXISFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e012      	b.n	8004312 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ec:	893b      	ldrh	r3, [r7, #8]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fcf2 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	80002000 	.word	0x80002000

08004320 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004336:	2b28      	cmp	r3, #40	; 0x28
 8004338:	d16a      	bne.n	8004410 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	b29b      	uxth	r3, r3
 8004354:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004358:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004366:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004374:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d138      	bne.n	80043f0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800437e:	897b      	ldrh	r3, [r7, #10]
 8004380:	09db      	lsrs	r3, r3, #7
 8004382:	b29a      	uxth	r2, r3
 8004384:	89bb      	ldrh	r3, [r7, #12]
 8004386:	4053      	eors	r3, r2
 8004388:	b29b      	uxth	r3, r3
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	2b00      	cmp	r3, #0
 8004390:	d11c      	bne.n	80043cc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d13b      	bne.n	8004420 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2208      	movs	r2, #8
 80043b4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043be:	89ba      	ldrh	r2, [r7, #12]
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fad3 	bl	8003970 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043ca:	e029      	b.n	8004420 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80043cc:	893b      	ldrh	r3, [r7, #8]
 80043ce:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fecd 	bl	8005174 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043e2:	89ba      	ldrh	r2, [r7, #12]
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fac1 	bl	8003970 <HAL_I2C_AddrCallback>
}
 80043ee:	e017      	b.n	8004420 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 febd 	bl	8005174 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004402:	89ba      	ldrh	r2, [r7, #12]
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fab1 	bl	8003970 <HAL_I2C_AddrCallback>
}
 800440e:	e007      	b.n	8004420 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2208      	movs	r2, #8
 8004416:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b21      	cmp	r3, #33	; 0x21
 8004442:	d115      	bne.n	8004470 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2211      	movs	r2, #17
 8004450:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004458:	2101      	movs	r1, #1
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fe8a 	bl	8005174 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff fa59 	bl	8003920 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800446e:	e014      	b.n	800449a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2212      	movs	r2, #18
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004484:	2102      	movs	r1, #2
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fe74 	bl	8005174 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fa4d 	bl	8003934 <HAL_I2C_MasterRxCpltCallback>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0b9b      	lsrs	r3, r3, #14
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e00d      	b.n	80044f4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	0bdb      	lsrs	r3, r3, #15
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044f2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b29      	cmp	r3, #41	; 0x29
 80044fe:	d112      	bne.n	8004526 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2228      	movs	r2, #40	; 0x28
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2221      	movs	r2, #33	; 0x21
 800450c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800450e:	2101      	movs	r1, #1
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fe2f 	bl	8005174 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fa12 	bl	8003948 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004524:	e017      	b.n	8004556 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b2a      	cmp	r3, #42	; 0x2a
 8004530:	d111      	bne.n	8004556 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2228      	movs	r2, #40	; 0x28
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2222      	movs	r2, #34	; 0x22
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004540:	2102      	movs	r1, #2
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fe16 	bl	8005174 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff fa03 	bl	800395c <HAL_I2C_SlaveRxCpltCallback>
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2220      	movs	r2, #32
 8004574:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b21      	cmp	r3, #33	; 0x21
 8004580:	d107      	bne.n	8004592 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004582:	2101      	movs	r1, #1
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fdf5 	bl	8005174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2211      	movs	r2, #17
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
 8004590:	e00c      	b.n	80045ac <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b22      	cmp	r3, #34	; 0x22
 800459c:	d106      	bne.n	80045ac <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800459e:	2102      	movs	r1, #2
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fde7 	bl	8005174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2212      	movs	r2, #18
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b4d      	ldr	r3, [pc, #308]	; (80046ec <I2C_ITMasterCplt+0x18c>)
 80045b8:	400b      	ands	r3, r1
 80045ba:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a4a      	ldr	r2, [pc, #296]	; (80046f0 <I2C_ITMasterCplt+0x190>)
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2210      	movs	r2, #16
 80045da:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f043 0204 	orr.w	r2, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d10b      	bne.n	800460c <I2C_ITMasterCplt+0xac>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2db      	uxtb	r3, r3
 8004608:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800460a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fac8 	bl	8004ba2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b60      	cmp	r3, #96	; 0x60
 8004622:	d002      	beq.n	800462a <I2C_ITMasterCplt+0xca>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9bf 	bl	80049b4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004636:	e054      	b.n	80046e2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b21      	cmp	r3, #33	; 0x21
 8004642:	d124      	bne.n	800468e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d10b      	bne.n	8004676 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff f996 	bl	80039a0 <HAL_I2C_MemTxCpltCallback>
}
 8004674:	e035      	b.n	80046e2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff f94a 	bl	8003920 <HAL_I2C_MasterTxCpltCallback>
}
 800468c:	e029      	b.n	80046e2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b22      	cmp	r3, #34	; 0x22
 8004698:	d123      	bne.n	80046e2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d10b      	bne.n	80046cc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fd f983 	bl	80019d0 <HAL_I2C_MemRxCpltCallback>
}
 80046ca:	e00a      	b.n	80046e2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff f929 	bl	8003934 <HAL_I2C_MasterRxCpltCallback>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	fe00e800 	.word	0xfe00e800
 80046f0:	ffff0000 	.word	0xffff0000

080046f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004710:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2220      	movs	r2, #32
 8004718:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b21      	cmp	r3, #33	; 0x21
 800471e:	d002      	beq.n	8004726 <I2C_ITSlaveCplt+0x32>
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b29      	cmp	r3, #41	; 0x29
 8004724:	d108      	bne.n	8004738 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004726:	f248 0101 	movw	r1, #32769	; 0x8001
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fd22 	bl	8005174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2221      	movs	r2, #33	; 0x21
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
 8004736:	e00d      	b.n	8004754 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b22      	cmp	r3, #34	; 0x22
 800473c:	d002      	beq.n	8004744 <I2C_ITSlaveCplt+0x50>
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	2b2a      	cmp	r3, #42	; 0x2a
 8004742:	d107      	bne.n	8004754 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004744:	f248 0102 	movw	r1, #32770	; 0x8002
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fd13 	bl	8005174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2222      	movs	r2, #34	; 0x22
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004762:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b64      	ldr	r3, [pc, #400]	; (8004900 <I2C_ITSlaveCplt+0x20c>)
 8004770:	400b      	ands	r3, r1
 8004772:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fa14 	bl	8004ba2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	0b9b      	lsrs	r3, r3, #14
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004794:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	2b00      	cmp	r3, #0
 800479c:	d020      	beq.n	80047e0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ac:	e018      	b.n	80047e0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	0bdb      	lsrs	r3, r3, #15
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d012      	beq.n	80047e0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0304 	bic.w	r3, r3, #4
 80047f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00c      	beq.n	800482e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	2b00      	cmp	r3, #0
 8004858:	d010      	beq.n	800487c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f8a7 	bl	80049b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b28      	cmp	r3, #40	; 0x28
 8004870:	d141      	bne.n	80048f6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004872:	6979      	ldr	r1, [r7, #20]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f847 	bl	8004908 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800487a:	e03c      	b.n	80048f6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004884:	d014      	beq.n	80048b0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fe0b 	bl	80044a2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <I2C_ITSlaveCplt+0x210>)
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff f86f 	bl	800398c <HAL_I2C_ListenCpltCallback>
}
 80048ae:	e022      	b.n	80048f6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b22      	cmp	r3, #34	; 0x22
 80048ba:	d10e      	bne.n	80048da <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff f842 	bl	800395c <HAL_I2C_SlaveRxCpltCallback>
}
 80048d8:	e00d      	b.n	80048f6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff f829 	bl	8003948 <HAL_I2C_SlaveTxCpltCallback>
}
 80048f6:	bf00      	nop
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	fe00e800 	.word	0xfe00e800
 8004904:	ffff0000 	.word	0xffff0000

08004908 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <I2C_ITListenCplt+0xa8>)
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d022      	beq.n	8004986 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d012      	beq.n	8004986 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f043 0204 	orr.w	r2, r3, #4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004986:	f248 0103 	movw	r1, #32771	; 0x8003
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fbf2 	bl	8005174 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2210      	movs	r2, #16
 8004996:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7fe fff3 	bl	800398c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a5d      	ldr	r2, [pc, #372]	; (8004b48 <I2C_ITError+0x194>)
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b28      	cmp	r3, #40	; 0x28
 80049ea:	d005      	beq.n	80049f8 <I2C_ITError+0x44>
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b29      	cmp	r3, #41	; 0x29
 80049f0:	d002      	beq.n	80049f8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b2a      	cmp	r3, #42	; 0x2a
 80049f6:	d10b      	bne.n	8004a10 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049f8:	2103      	movs	r1, #3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fbba 	bl	8005174 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2228      	movs	r2, #40	; 0x28
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a50      	ldr	r2, [pc, #320]	; (8004b4c <I2C_ITError+0x198>)
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a0e:	e011      	b.n	8004a34 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a10:	f248 0103 	movw	r1, #32771	; 0x8003
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fbad 	bl	8005174 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b60      	cmp	r3, #96	; 0x60
 8004a24:	d003      	beq.n	8004a2e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d039      	beq.n	8004ab6 <I2C_ITError+0x102>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b11      	cmp	r3, #17
 8004a46:	d002      	beq.n	8004a4e <I2C_ITError+0x9a>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b21      	cmp	r3, #33	; 0x21
 8004a4c:	d133      	bne.n	8004ab6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5c:	d107      	bne.n	8004a6e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a6c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe f83c 	bl	8002af0 <HAL_DMA_GetState>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d017      	beq.n	8004aae <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	4a33      	ldr	r2, [pc, #204]	; (8004b50 <I2C_ITError+0x19c>)
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd ff3c 	bl	8002910 <HAL_DMA_Abort_IT>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04d      	beq.n	8004b3a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aac:	e045      	b.n	8004b3a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f850 	bl	8004b54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ab4:	e041      	b.n	8004b3a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d039      	beq.n	8004b32 <I2C_ITError+0x17e>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b12      	cmp	r3, #18
 8004ac2:	d002      	beq.n	8004aca <I2C_ITError+0x116>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b22      	cmp	r3, #34	; 0x22
 8004ac8:	d133      	bne.n	8004b32 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad8:	d107      	bne.n	8004aea <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fd fffe 	bl	8002af0 <HAL_DMA_GetState>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d017      	beq.n	8004b2a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <I2C_ITError+0x19c>)
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd fefe 	bl	8002910 <HAL_DMA_Abort_IT>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b24:	4610      	mov	r0, r2
 8004b26:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b28:	e009      	b.n	8004b3e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f812 	bl	8004b54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b30:	e005      	b.n	8004b3e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f80e 	bl	8004b54 <I2C_TreatErrorCallback>
  }
}
 8004b38:	e002      	b.n	8004b40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b3e:	bf00      	nop
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	ffff0000 	.word	0xffff0000
 8004b4c:	080039dd 	.word	0x080039dd
 8004b50:	08004caf 	.word	0x08004caf

08004b54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b60      	cmp	r3, #96	; 0x60
 8004b66:	d10e      	bne.n	8004b86 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fe ff22 	bl	80039c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b84:	e009      	b.n	8004b9a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fe ff0d 	bl	80039b4 <HAL_I2C_ErrorCallback>
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d103      	bne.n	8004bc0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d007      	beq.n	8004bde <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	619a      	str	r2, [r3, #24]
  }
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c06:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c12:	2120      	movs	r1, #32
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fa43 	bl	80050a0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004c1a:	e02d      	b.n	8004c78 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004c24:	441a      	add	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2bff      	cmp	r3, #255	; 0xff
 8004c32:	d903      	bls.n	8004c3c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	22ff      	movs	r2, #255	; 0xff
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c3a:	e004      	b.n	8004c46 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3324      	adds	r3, #36	; 0x24
 8004c50:	4619      	mov	r1, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004c5c:	f7fd fdf8 	bl	8002850 <HAL_DMA_Start_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c66:	2110      	movs	r1, #16
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7ff fea3 	bl	80049b4 <I2C_ITError>
}
 8004c6e:	e003      	b.n	8004c78 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa14 	bl	80050a0 <I2C_Enable_IRQ>
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c9c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fe87 	bl	80049b4 <I2C_ITError>
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	2200      	movs	r2, #0
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	2200      	movs	r2, #0
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7ff ff39 	bl	8004b54 <I2C_TreatErrorCallback>
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfa:	e022      	b.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d01e      	beq.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d04:	f7fd fbaa 	bl	800245c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d113      	bne.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e00f      	b.n	8004d62 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d0cd      	beq.n	8004cfc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d76:	e02c      	b.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f871 	bl	8004e64 <I2C_IsErrorOccurred>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e02a      	b.n	8004de2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d01e      	beq.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d94:	f7fd fb62 	bl	800245c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d113      	bne.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e007      	b.n	8004de2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d1cb      	bne.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df6:	e028      	b.n	8004e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f831 	bl	8004e64 <I2C_IsErrorOccurred>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e026      	b.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fd fb26 	bl	800245c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d113      	bne.n	8004e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e007      	b.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d1cf      	bne.n	8004df8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d075      	beq.n	8004f7c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2210      	movs	r2, #16
 8004e96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e98:	e056      	b.n	8004f48 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d052      	beq.n	8004f48 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fd fadb 	bl	800245c <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <I2C_IsErrorOccurred+0x54>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d147      	bne.n	8004f48 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eda:	d12e      	bne.n	8004f3a <I2C_IsErrorOccurred+0xd6>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ee2:	d02a      	beq.n	8004f3a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d027      	beq.n	8004f3a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004efa:	f7fd faaf 	bl	800245c <HAL_GetTick>
 8004efe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f00:	e01b      	b.n	8004f3a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f02:	f7fd faab 	bl	800245c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b19      	cmp	r3, #25
 8004f0e:	d914      	bls.n	8004f3a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d1dc      	bne.n	8004f02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d003      	beq.n	8004f5e <I2C_IsErrorOccurred+0xfa>
 8004f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d09d      	beq.n	8004e9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	f043 0308 	orr.w	r3, r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f043 0302 	orr.w	r3, r3, #2
 8004fd8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01c      	beq.n	800502c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff fdd5 	bl	8004ba2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <I2C_IsErrorOccurred+0x1d4>)
 8005004:	400b      	ands	r3, r1
 8005006:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800502c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005030:	4618      	mov	r0, r3
 8005032:	3728      	adds	r7, #40	; 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	fe00e800 	.word	0xfe00e800

0800503c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	817b      	strh	r3, [r7, #10]
 800504a:	4613      	mov	r3, r2
 800504c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005054:	7a7b      	ldrb	r3, [r7, #9]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800505c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	4313      	orrs	r3, r2
 8005066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800506a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	0d5b      	lsrs	r3, r3, #21
 8005076:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <I2C_TransferConfig+0x60>)
 800507c:	430b      	orrs	r3, r1
 800507e:	43db      	mvns	r3, r3
 8005080:	ea02 0103 	and.w	r1, r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	03ff63ff 	.word	0x03ff63ff

080050a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	4a2d      	ldr	r2, [pc, #180]	; (800516c <I2C_Enable_IRQ+0xcc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d004      	beq.n	80050c4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80050be:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <I2C_Enable_IRQ+0xd0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d11d      	bne.n	8005100 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	da03      	bge.n	80050d4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80050d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80050d4:	887b      	ldrh	r3, [r7, #2]
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d103      	bne.n	80050e2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80050e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d103      	bne.n	80050f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	d12c      	bne.n	8005150 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050fc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80050fe:	e027      	b.n	8005150 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005100:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005104:	2b00      	cmp	r3, #0
 8005106:	da03      	bge.n	8005110 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800510e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005120:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005122:	887b      	ldrh	r3, [r7, #2]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005132:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	2b10      	cmp	r3, #16
 8005138:	d103      	bne.n	8005142 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005140:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	2b20      	cmp	r3, #32
 8005146:	d103      	bne.n	8005150 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f043 0320 	orr.w	r3, r3, #32
 800514e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	430a      	orrs	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	08003be3 	.word	0x08003be3
 8005170:	08004011 	.word	0x08004011

08005174 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005184:	887b      	ldrh	r3, [r7, #2]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00f      	beq.n	80051ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005194:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051a2:	2b28      	cmp	r3, #40	; 0x28
 80051a4:	d003      	beq.n	80051ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80051ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051ae:	887b      	ldrh	r3, [r7, #2]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00f      	beq.n	80051d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80051be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051cc:	2b28      	cmp	r3, #40	; 0x28
 80051ce:	d003      	beq.n	80051d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80051d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80051d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da03      	bge.n	80051e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d103      	bne.n	80051f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051f6:	887b      	ldrh	r3, [r7, #2]
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d103      	bne.n	8005204 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f043 0320 	orr.w	r3, r3, #32
 8005202:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005204:	887b      	ldrh	r3, [r7, #2]
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d103      	bne.n	8005212 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005210:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6819      	ldr	r1, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	43da      	mvns	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	400a      	ands	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b20      	cmp	r3, #32
 8005244:	d138      	bne.n	80052b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005250:	2302      	movs	r3, #2
 8005252:	e032      	b.n	80052ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2224      	movs	r2, #36	; 0x24
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6819      	ldr	r1, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e000      	b.n	80052ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d139      	bne.n	8005350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e033      	b.n	8005352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2224      	movs	r2, #36	; 0x24
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005350:	2302      	movs	r3, #2
  }
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a04      	ldr	r2, [pc, #16]	; (800537c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800536a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536e:	6013      	str	r3, [r2, #0]
}
 8005370:	bf00      	nop
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40007000 	.word	0x40007000

08005380 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <HAL_PWREx_GetVoltageRange+0x18>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40007000 	.word	0x40007000

0800539c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053aa:	d130      	bne.n	800540e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053ac:	4b23      	ldr	r3, [pc, #140]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b8:	d038      	beq.n	800542c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ba:	4b20      	ldr	r3, [pc, #128]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2232      	movs	r2, #50	; 0x32
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	4a1b      	ldr	r2, [pc, #108]	; (8005444 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	0c9b      	lsrs	r3, r3, #18
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e0:	e002      	b.n	80053e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f4:	d102      	bne.n	80053fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f2      	bne.n	80053e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005408:	d110      	bne.n	800542c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e00f      	b.n	800542e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541a:	d007      	beq.n	800542c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005424:	4a05      	ldr	r2, [pc, #20]	; (800543c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800542a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40007000 	.word	0x40007000
 8005440:	20000000 	.word	0x20000000
 8005444:	431bde83 	.word	0x431bde83

08005448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f000 bc02 	b.w	8005c60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545c:	4b96      	ldr	r3, [pc, #600]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005466:	4b94      	ldr	r3, [pc, #592]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80e4 	beq.w	8005646 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <HAL_RCC_OscConfig+0x4c>
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b0c      	cmp	r3, #12
 8005488:	f040 808b 	bne.w	80055a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b01      	cmp	r3, #1
 8005490:	f040 8087 	bne.w	80055a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005494:	4b88      	ldr	r3, [pc, #544]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_OscConfig+0x64>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e3d9      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	4b81      	ldr	r3, [pc, #516]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <HAL_RCC_OscConfig+0x7e>
 80054bc:	4b7e      	ldr	r3, [pc, #504]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c4:	e005      	b.n	80054d2 <HAL_RCC_OscConfig+0x8a>
 80054c6:	4b7c      	ldr	r3, [pc, #496]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80054c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d223      	bcs.n	800551e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd8c 	bl	8005ff8 <RCC_SetFlashLatencyFromMSIRange>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e3ba      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ea:	4b73      	ldr	r3, [pc, #460]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a72      	ldr	r2, [pc, #456]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80054f0:	f043 0308 	orr.w	r3, r3, #8
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b70      	ldr	r3, [pc, #448]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	496d      	ldr	r1, [pc, #436]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005508:	4b6b      	ldr	r3, [pc, #428]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	4968      	ldr	r1, [pc, #416]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
 800551c:	e025      	b.n	800556a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800551e:	4b66      	ldr	r3, [pc, #408]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a65      	ldr	r2, [pc, #404]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005524:	f043 0308 	orr.w	r3, r3, #8
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4b63      	ldr	r3, [pc, #396]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	4960      	ldr	r1, [pc, #384]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800553c:	4b5e      	ldr	r3, [pc, #376]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	495b      	ldr	r1, [pc, #364]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fd4c 	bl	8005ff8 <RCC_SetFlashLatencyFromMSIRange>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e37a      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800556a:	f000 fc81 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 800556e:	4602      	mov	r2, r0
 8005570:	4b51      	ldr	r3, [pc, #324]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	4950      	ldr	r1, [pc, #320]	; (80056bc <HAL_RCC_OscConfig+0x274>)
 800557c:	5ccb      	ldrb	r3, [r1, r3]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	4a4e      	ldr	r2, [pc, #312]	; (80056c0 <HAL_RCC_OscConfig+0x278>)
 8005588:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800558a:	4b4e      	ldr	r3, [pc, #312]	; (80056c4 <HAL_RCC_OscConfig+0x27c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fc ff14 	bl	80023bc <HAL_InitTick>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d052      	beq.n	8005644 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	e35e      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d032      	beq.n	8005610 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055aa:	4b43      	ldr	r3, [pc, #268]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a42      	ldr	r2, [pc, #264]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055b6:	f7fc ff51 	bl	800245c <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055be:	f7fc ff4d 	bl	800245c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e347      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d0:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055dc:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a35      	ldr	r2, [pc, #212]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055e2:	f043 0308 	orr.w	r3, r3, #8
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4b33      	ldr	r3, [pc, #204]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	4930      	ldr	r1, [pc, #192]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fa:	4b2f      	ldr	r3, [pc, #188]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	492b      	ldr	r1, [pc, #172]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
 800560e:	e01a      	b.n	8005646 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005610:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800561c:	f7fc ff1e 	bl	800245c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005624:	f7fc ff1a 	bl	800245c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e314      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005636:	4b20      	ldr	r3, [pc, #128]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x1dc>
 8005642:	e000      	b.n	8005646 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d073      	beq.n	800573a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d005      	beq.n	8005664 <HAL_RCC_OscConfig+0x21c>
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d10e      	bne.n	800567c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d10b      	bne.n	800567c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d063      	beq.n	8005738 <HAL_RCC_OscConfig+0x2f0>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d15f      	bne.n	8005738 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e2f1      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d106      	bne.n	8005694 <HAL_RCC_OscConfig+0x24c>
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a0b      	ldr	r2, [pc, #44]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e025      	b.n	80056e0 <HAL_RCC_OscConfig+0x298>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800569c:	d114      	bne.n	80056c8 <HAL_RCC_OscConfig+0x280>
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a05      	ldr	r2, [pc, #20]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a02      	ldr	r2, [pc, #8]	; (80056b8 <HAL_RCC_OscConfig+0x270>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e013      	b.n	80056e0 <HAL_RCC_OscConfig+0x298>
 80056b8:	40021000 	.word	0x40021000
 80056bc:	0800b25c 	.word	0x0800b25c
 80056c0:	20000000 	.word	0x20000000
 80056c4:	20000004 	.word	0x20000004
 80056c8:	4ba0      	ldr	r3, [pc, #640]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a9f      	ldr	r2, [pc, #636]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80056ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	4b9d      	ldr	r3, [pc, #628]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a9c      	ldr	r2, [pc, #624]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80056da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fc feb8 	bl	800245c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fc feb4 	bl	800245c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	; 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e2ae      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005702:	4b92      	ldr	r3, [pc, #584]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0x2a8>
 800570e:	e014      	b.n	800573a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fc fea4 	bl	800245c <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005718:	f7fc fea0 	bl	800245c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e29a      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800572a:	4b88      	ldr	r3, [pc, #544]	; (800594c <HAL_RCC_OscConfig+0x504>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0x2d0>
 8005736:	e000      	b.n	800573a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d060      	beq.n	8005808 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d005      	beq.n	8005758 <HAL_RCC_OscConfig+0x310>
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d119      	bne.n	8005786 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d116      	bne.n	8005786 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005758:	4b7c      	ldr	r3, [pc, #496]	; (800594c <HAL_RCC_OscConfig+0x504>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_RCC_OscConfig+0x328>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e277      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005770:	4b76      	ldr	r3, [pc, #472]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	061b      	lsls	r3, r3, #24
 800577e:	4973      	ldr	r1, [pc, #460]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005784:	e040      	b.n	8005808 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d023      	beq.n	80057d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800578e:	4b6f      	ldr	r3, [pc, #444]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a6e      	ldr	r2, [pc, #440]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fc fe5f 	bl	800245c <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a2:	f7fc fe5b 	bl	800245c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e255      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b4:	4b65      	ldr	r3, [pc, #404]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c0:	4b62      	ldr	r3, [pc, #392]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	495f      	ldr	r1, [pc, #380]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
 80057d4:	e018      	b.n	8005808 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d6:	4b5d      	ldr	r3, [pc, #372]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a5c      	ldr	r2, [pc, #368]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80057dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e2:	f7fc fe3b 	bl	800245c <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ea:	f7fc fe37 	bl	800245c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e231      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057fc:	4b53      	ldr	r3, [pc, #332]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f0      	bne.n	80057ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d03c      	beq.n	800588e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01c      	beq.n	8005856 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581c:	4b4b      	ldr	r3, [pc, #300]	; (800594c <HAL_RCC_OscConfig+0x504>)
 800581e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005822:	4a4a      	ldr	r2, [pc, #296]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582c:	f7fc fe16 	bl	800245c <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005834:	f7fc fe12 	bl	800245c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e20c      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005846:	4b41      	ldr	r3, [pc, #260]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ef      	beq.n	8005834 <HAL_RCC_OscConfig+0x3ec>
 8005854:	e01b      	b.n	800588e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005856:	4b3d      	ldr	r3, [pc, #244]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800585c:	4a3b      	ldr	r2, [pc, #236]	; (800594c <HAL_RCC_OscConfig+0x504>)
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005866:	f7fc fdf9 	bl	800245c <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800586e:	f7fc fdf5 	bl	800245c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e1ef      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005880:	4b32      	ldr	r3, [pc, #200]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1ef      	bne.n	800586e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80a6 	beq.w	80059e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589c:	2300      	movs	r3, #0
 800589e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058a0:	4b2a      	ldr	r3, [pc, #168]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10d      	bne.n	80058c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ac:	4b27      	ldr	r3, [pc, #156]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b0:	4a26      	ldr	r2, [pc, #152]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80058b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b6:	6593      	str	r3, [r2, #88]	; 0x58
 80058b8:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_RCC_OscConfig+0x504>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c4:	2301      	movs	r3, #1
 80058c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <HAL_RCC_OscConfig+0x508>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d118      	bne.n	8005906 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d4:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <HAL_RCC_OscConfig+0x508>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1d      	ldr	r2, [pc, #116]	; (8005950 <HAL_RCC_OscConfig+0x508>)
 80058da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e0:	f7fc fdbc 	bl	800245c <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e8:	f7fc fdb8 	bl	800245c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1b2      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058fa:	4b15      	ldr	r3, [pc, #84]	; (8005950 <HAL_RCC_OscConfig+0x508>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d108      	bne.n	8005920 <HAL_RCC_OscConfig+0x4d8>
 800590e:	4b0f      	ldr	r3, [pc, #60]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	4a0d      	ldr	r2, [pc, #52]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800591e:	e029      	b.n	8005974 <HAL_RCC_OscConfig+0x52c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d115      	bne.n	8005954 <HAL_RCC_OscConfig+0x50c>
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <HAL_RCC_OscConfig+0x504>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	4a07      	ldr	r2, [pc, #28]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005930:	f043 0304 	orr.w	r3, r3, #4
 8005934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <HAL_RCC_OscConfig+0x504>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	4a03      	ldr	r2, [pc, #12]	; (800594c <HAL_RCC_OscConfig+0x504>)
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005948:	e014      	b.n	8005974 <HAL_RCC_OscConfig+0x52c>
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000
 8005950:	40007000 	.word	0x40007000
 8005954:	4b9a      	ldr	r3, [pc, #616]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595a:	4a99      	ldr	r2, [pc, #612]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005964:	4b96      	ldr	r3, [pc, #600]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	4a95      	ldr	r2, [pc, #596]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 800596c:	f023 0304 	bic.w	r3, r3, #4
 8005970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d016      	beq.n	80059aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fc fd6e 	bl	800245c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fc fd6a 	bl	800245c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e162      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599a:	4b89      	ldr	r3, [pc, #548]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ed      	beq.n	8005984 <HAL_RCC_OscConfig+0x53c>
 80059a8:	e015      	b.n	80059d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059aa:	f7fc fd57 	bl	800245c <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fc fd53 	bl	800245c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e14b      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059c8:	4b7d      	ldr	r3, [pc, #500]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1ed      	bne.n	80059b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d6:	7ffb      	ldrb	r3, [r7, #31]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d105      	bne.n	80059e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059dc:	4b78      	ldr	r3, [pc, #480]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e0:	4a77      	ldr	r2, [pc, #476]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 80059e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d03c      	beq.n	8005a6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01c      	beq.n	8005a36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059fc:	4b70      	ldr	r3, [pc, #448]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 80059fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a02:	4a6f      	ldr	r2, [pc, #444]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0c:	f7fc fd26 	bl	800245c <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a14:	f7fc fd22 	bl	800245c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e11c      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a26:	4b66      	ldr	r3, [pc, #408]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0ef      	beq.n	8005a14 <HAL_RCC_OscConfig+0x5cc>
 8005a34:	e01b      	b.n	8005a6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a36:	4b62      	ldr	r3, [pc, #392]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a3c:	4a60      	ldr	r2, [pc, #384]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005a3e:	f023 0301 	bic.w	r3, r3, #1
 8005a42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a46:	f7fc fd09 	bl	800245c <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a4e:	f7fc fd05 	bl	800245c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0ff      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a60:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1ef      	bne.n	8005a4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80f3 	beq.w	8005c5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f040 80c9 	bne.w	8005c14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a82:	4b4f      	ldr	r3, [pc, #316]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0203 	and.w	r2, r3, #3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d12c      	bne.n	8005af0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d123      	bne.n	8005af0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d11b      	bne.n	8005af0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d113      	bne.n	8005af0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d109      	bne.n	8005af0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d06b      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d062      	beq.n	8005bbc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005af6:	4b32      	ldr	r3, [pc, #200]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0ac      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2d      	ldr	r2, [pc, #180]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b12:	f7fc fca3 	bl	800245c <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1a:	f7fc fc9f 	bl	800245c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e099      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f0      	bne.n	8005b1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b38:	4b21      	ldr	r3, [pc, #132]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <HAL_RCC_OscConfig+0x77c>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	0112      	lsls	r2, r2, #4
 8005b4c:	4311      	orrs	r1, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b52:	0212      	lsls	r2, r2, #8
 8005b54:	4311      	orrs	r1, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b5a:	0852      	lsrs	r2, r2, #1
 8005b5c:	3a01      	subs	r2, #1
 8005b5e:	0552      	lsls	r2, r2, #21
 8005b60:	4311      	orrs	r1, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b66:	0852      	lsrs	r2, r2, #1
 8005b68:	3a01      	subs	r2, #1
 8005b6a:	0652      	lsls	r2, r2, #25
 8005b6c:	4311      	orrs	r1, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b72:	06d2      	lsls	r2, r2, #27
 8005b74:	430a      	orrs	r2, r1
 8005b76:	4912      	ldr	r1, [pc, #72]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0f      	ldr	r2, [pc, #60]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b88:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b94:	f7fc fc62 	bl	800245c <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fc fc5e 	bl	800245c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e058      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <HAL_RCC_OscConfig+0x778>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bba:	e050      	b.n	8005c5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e04f      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc8:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d144      	bne.n	8005c5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005be0:	4b21      	ldr	r3, [pc, #132]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bec:	f7fc fc36 	bl	800245c <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fc fc32 	bl	800245c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e02c      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c06:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x7ac>
 8005c12:	e024      	b.n	8005c5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	2b0c      	cmp	r3, #12
 8005c18:	d01f      	beq.n	8005c5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1a:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a12      	ldr	r2, [pc, #72]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c26:	f7fc fc19 	bl	800245c <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2e:	f7fc fc15 	bl	800245c <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e00f      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1f0      	bne.n	8005c2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	4905      	ldr	r1, [pc, #20]	; (8005c68 <HAL_RCC_OscConfig+0x820>)
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <HAL_RCC_OscConfig+0x824>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	60cb      	str	r3, [r1, #12]
 8005c58:	e001      	b.n	8005c5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	feeefffc 	.word	0xfeeefffc

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0e7      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b75      	ldr	r3, [pc, #468]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d910      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b72      	ldr	r3, [pc, #456]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 0207 	bic.w	r2, r3, #7
 8005c9a:	4970      	ldr	r1, [pc, #448]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	4b6e      	ldr	r3, [pc, #440]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0cf      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d010      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	4b66      	ldr	r3, [pc, #408]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d908      	bls.n	8005ce2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd0:	4b63      	ldr	r3, [pc, #396]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4960      	ldr	r1, [pc, #384]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d04c      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d107      	bne.n	8005d06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf6:	4b5a      	ldr	r3, [pc, #360]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d121      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e0a6      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d0e:	4b54      	ldr	r3, [pc, #336]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d115      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e09a      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d26:	4b4e      	ldr	r3, [pc, #312]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e08e      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d36:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e086      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4943      	ldr	r1, [pc, #268]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d58:	f7fc fb80 	bl	800245c <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fc fb7c 	bl	800245c <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e06e      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b3a      	ldr	r3, [pc, #232]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	4b31      	ldr	r3, [pc, #196]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d208      	bcs.n	8005db6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	492b      	ldr	r1, [pc, #172]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db6:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d210      	bcs.n	8005de6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc4:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f023 0207 	bic.w	r2, r3, #7
 8005dcc:	4923      	ldr	r1, [pc, #140]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e036      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4918      	ldr	r1, [pc, #96]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e10:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4910      	ldr	r1, [pc, #64]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e24:	f000 f824 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	490b      	ldr	r1, [pc, #44]	; (8005e64 <HAL_RCC_ClockConfig+0x1f4>)
 8005e36:	5ccb      	ldrb	r3, [r1, r3]
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <HAL_RCC_ClockConfig+0x1f8>)
 8005e42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_RCC_ClockConfig+0x1fc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fc fab7 	bl	80023bc <HAL_InitTick>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e52:	7afb      	ldrb	r3, [r7, #11]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40022000 	.word	0x40022000
 8005e60:	40021000 	.word	0x40021000
 8005e64:	0800b25c 	.word	0x0800b25c
 8005e68:	20000000 	.word	0x20000000
 8005e6c:	20000004 	.word	0x20000004

08005e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	; 0x24
 8005e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e88:	4b3b      	ldr	r3, [pc, #236]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d121      	bne.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d11e      	bne.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ea4:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005eb0:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e005      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ecc:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10d      	bne.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d102      	bne.n	8005eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	e004      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ef4:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d134      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d003      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0xac>
 8005f14:	e005      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f16:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f18:	617b      	str	r3, [r7, #20]
      break;
 8005f1a:	e005      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f1e:	617b      	str	r3, [r7, #20]
      break;
 8005f20:	e002      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	617b      	str	r3, [r7, #20]
      break;
 8005f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f28:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	3301      	adds	r3, #1
 8005f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f36:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	fb03 f202 	mul.w	r2, r3, r2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	0e5b      	lsrs	r3, r3, #25
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	3301      	adds	r3, #1
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f68:	69bb      	ldr	r3, [r7, #24]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3724      	adds	r7, #36	; 0x24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	0800b274 	.word	0x0800b274
 8005f80:	00f42400 	.word	0x00f42400
 8005f84:	007a1200 	.word	0x007a1200

08005f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000000 	.word	0x20000000

08005fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fa4:	f7ff fff0 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	0a1b      	lsrs	r3, r3, #8
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	0800b26c 	.word	0x0800b26c

08005fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fd0:	f7ff ffda 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	0adb      	lsrs	r3, r3, #11
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	0800b26c 	.word	0x0800b26c

08005ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006000:	2300      	movs	r3, #0
 8006002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006004:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006010:	f7ff f9b6 	bl	8005380 <HAL_PWREx_GetVoltageRange>
 8006014:	6178      	str	r0, [r7, #20]
 8006016:	e014      	b.n	8006042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006018:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	4a24      	ldr	r2, [pc, #144]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800601e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006022:	6593      	str	r3, [r2, #88]	; 0x58
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006030:	f7ff f9a6 	bl	8005380 <HAL_PWREx_GetVoltageRange>
 8006034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006036:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	4a1d      	ldr	r2, [pc, #116]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800603c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006048:	d10b      	bne.n	8006062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d919      	bls.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2ba0      	cmp	r3, #160	; 0xa0
 8006054:	d902      	bls.n	800605c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006056:	2302      	movs	r3, #2
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	e013      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800605c:	2301      	movs	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	e010      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b80      	cmp	r3, #128	; 0x80
 8006066:	d902      	bls.n	800606e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006068:	2303      	movs	r3, #3
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	e00a      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b80      	cmp	r3, #128	; 0x80
 8006072:	d102      	bne.n	800607a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006074:	2302      	movs	r3, #2
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	e004      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b70      	cmp	r3, #112	; 0x70
 800607e:	d101      	bne.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006080:	2301      	movs	r3, #1
 8006082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f023 0207 	bic.w	r2, r3, #7
 800608c:	4909      	ldr	r1, [pc, #36]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006094:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d001      	beq.n	80060a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40022000 	.word	0x40022000

080060b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060c0:	2300      	movs	r3, #0
 80060c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c4:	2300      	movs	r3, #0
 80060c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d031      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060dc:	d01a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80060de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060e2:	d814      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d009      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ec:	d10f      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80060ee:	4b5d      	ldr	r3, [pc, #372]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4a5c      	ldr	r2, [pc, #368]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060fa:	e00c      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f000 f9de 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	74fb      	strb	r3, [r7, #19]
      break;
 8006112:	e000      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006116:	7cfb      	ldrb	r3, [r7, #19]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800611c:	4b51      	ldr	r3, [pc, #324]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006122:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	494e      	ldr	r1, [pc, #312]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006132:	e001      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	7cfb      	ldrb	r3, [r7, #19]
 8006136:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 809e 	beq.w	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006146:	2300      	movs	r3, #0
 8006148:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800614a:	4b46      	ldr	r3, [pc, #280]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800614c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00d      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006160:	4b40      	ldr	r3, [pc, #256]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006164:	4a3f      	ldr	r2, [pc, #252]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616a:	6593      	str	r3, [r2, #88]	; 0x58
 800616c:	4b3d      	ldr	r3, [pc, #244]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006178:	2301      	movs	r3, #1
 800617a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800617c:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006186:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006188:	f7fc f968 	bl	800245c <HAL_GetTick>
 800618c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800618e:	e009      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006190:	f7fc f964 	bl	800245c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d902      	bls.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	74fb      	strb	r3, [r7, #19]
        break;
 80061a2:	e005      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061a4:	4b30      	ldr	r3, [pc, #192]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0ef      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80061b0:	7cfb      	ldrb	r3, [r7, #19]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d15a      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061b6:	4b2b      	ldr	r3, [pc, #172]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01e      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d019      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061d2:	4b24      	ldr	r3, [pc, #144]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061de:	4b21      	ldr	r3, [pc, #132]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061ee:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f4:	4a1b      	ldr	r2, [pc, #108]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061fe:	4a19      	ldr	r2, [pc, #100]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d016      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006210:	f7fc f924 	bl	800245c <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006216:	e00b      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006218:	f7fc f920 	bl	800245c <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d902      	bls.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	74fb      	strb	r3, [r7, #19]
            break;
 800622e:	e006      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0ec      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800623e:	7cfb      	ldrb	r3, [r7, #19]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006244:	4b07      	ldr	r3, [pc, #28]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006252:	4904      	ldr	r1, [pc, #16]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800625a:	e009      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800625c:	7cfb      	ldrb	r3, [r7, #19]
 800625e:	74bb      	strb	r3, [r7, #18]
 8006260:	e006      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006262:	bf00      	nop
 8006264:	40021000 	.word	0x40021000
 8006268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	7cfb      	ldrb	r3, [r7, #19]
 800626e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006270:	7c7b      	ldrb	r3, [r7, #17]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d105      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006276:	4b8a      	ldr	r3, [pc, #552]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	4a89      	ldr	r2, [pc, #548]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800627c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006280:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800628e:	4b84      	ldr	r3, [pc, #528]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	f023 0203 	bic.w	r2, r3, #3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	4980      	ldr	r1, [pc, #512]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062b0:	4b7b      	ldr	r3, [pc, #492]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f023 020c 	bic.w	r2, r3, #12
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	4978      	ldr	r1, [pc, #480]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062d2:	4b73      	ldr	r3, [pc, #460]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	496f      	ldr	r1, [pc, #444]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062f4:	4b6a      	ldr	r3, [pc, #424]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	4967      	ldr	r1, [pc, #412]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006304:	4313      	orrs	r3, r2
 8006306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006316:	4b62      	ldr	r3, [pc, #392]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	495e      	ldr	r1, [pc, #376]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006338:	4b59      	ldr	r3, [pc, #356]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	4956      	ldr	r1, [pc, #344]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800635a:	4b51      	ldr	r3, [pc, #324]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	494d      	ldr	r1, [pc, #308]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d028      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800637c:	4b48      	ldr	r3, [pc, #288]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4945      	ldr	r1, [pc, #276]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800639a:	d106      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800639c:	4b40      	ldr	r3, [pc, #256]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	4a3f      	ldr	r2, [pc, #252]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063a6:	60d3      	str	r3, [r2, #12]
 80063a8:	e011      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063b2:	d10c      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3304      	adds	r3, #4
 80063b8:	2101      	movs	r1, #1
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f882 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063c4:	7cfb      	ldrb	r3, [r7, #19]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
 80063cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d028      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063da:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	492d      	ldr	r1, [pc, #180]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f8:	d106      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063fa:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006404:	60d3      	str	r3, [r2, #12]
 8006406:	e011      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006410:	d10c      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3304      	adds	r3, #4
 8006416:	2101      	movs	r1, #1
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f853 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006422:	7cfb      	ldrb	r3, [r7, #19]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01c      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006438:	4b19      	ldr	r3, [pc, #100]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006446:	4916      	ldr	r1, [pc, #88]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006456:	d10c      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	2102      	movs	r1, #2
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f830 	bl	80064c4 <RCCEx_PLLSAI1_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006468:	7cfb      	ldrb	r3, [r7, #19]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800646e:	7cfb      	ldrb	r3, [r7, #19]
 8006470:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648c:	4904      	ldr	r1, [pc, #16]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006494:	7cbb      	ldrb	r3, [r7, #18]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000

080064a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80064ae:	f043 0304 	orr.w	r3, r3, #4
 80064b2:	6013      	str	r3, [r2, #0]
}
 80064b4:	bf00      	nop
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40021000 	.word	0x40021000

080064c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064d2:	4b74      	ldr	r3, [pc, #464]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d018      	beq.n	8006510 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064de:	4b71      	ldr	r3, [pc, #452]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0203 	and.w	r2, r3, #3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d10d      	bne.n	800650a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
       ||
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064f6:	4b6b      	ldr	r3, [pc, #428]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	091b      	lsrs	r3, r3, #4
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
       ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d047      	beq.n	800659a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	e044      	b.n	800659a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d018      	beq.n	800654a <RCCEx_PLLSAI1_Config+0x86>
 8006518:	2b03      	cmp	r3, #3
 800651a:	d825      	bhi.n	8006568 <RCCEx_PLLSAI1_Config+0xa4>
 800651c:	2b01      	cmp	r3, #1
 800651e:	d002      	beq.n	8006526 <RCCEx_PLLSAI1_Config+0x62>
 8006520:	2b02      	cmp	r3, #2
 8006522:	d009      	beq.n	8006538 <RCCEx_PLLSAI1_Config+0x74>
 8006524:	e020      	b.n	8006568 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006526:	4b5f      	ldr	r3, [pc, #380]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11d      	bne.n	800656e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006536:	e01a      	b.n	800656e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006538:	4b5a      	ldr	r3, [pc, #360]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006540:	2b00      	cmp	r3, #0
 8006542:	d116      	bne.n	8006572 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006548:	e013      	b.n	8006572 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800654a:	4b56      	ldr	r3, [pc, #344]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10f      	bne.n	8006576 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006556:	4b53      	ldr	r3, [pc, #332]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006566:	e006      	b.n	8006576 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	e004      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006576:	bf00      	nop
    }

    if(status == HAL_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10d      	bne.n	800659a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800657e:	4b49      	ldr	r3, [pc, #292]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	3b01      	subs	r3, #1
 8006590:	011b      	lsls	r3, r3, #4
 8006592:	430b      	orrs	r3, r1
 8006594:	4943      	ldr	r1, [pc, #268]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006596:	4313      	orrs	r3, r2
 8006598:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d17c      	bne.n	800669a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065a0:	4b40      	ldr	r3, [pc, #256]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a3f      	ldr	r2, [pc, #252]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ac:	f7fb ff56 	bl	800245c <HAL_GetTick>
 80065b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065b2:	e009      	b.n	80065c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065b4:	f7fb ff52 	bl	800245c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d902      	bls.n	80065c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	73fb      	strb	r3, [r7, #15]
        break;
 80065c6:	e005      	b.n	80065d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065c8:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1ef      	bne.n	80065b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d15f      	bne.n	800669a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d110      	bne.n	8006602 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065e0:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6892      	ldr	r2, [r2, #8]
 80065f0:	0211      	lsls	r1, r2, #8
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	68d2      	ldr	r2, [r2, #12]
 80065f6:	06d2      	lsls	r2, r2, #27
 80065f8:	430a      	orrs	r2, r1
 80065fa:	492a      	ldr	r1, [pc, #168]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	610b      	str	r3, [r1, #16]
 8006600:	e027      	b.n	8006652 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d112      	bne.n	800662e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006608:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006610:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6892      	ldr	r2, [r2, #8]
 8006618:	0211      	lsls	r1, r2, #8
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6912      	ldr	r2, [r2, #16]
 800661e:	0852      	lsrs	r2, r2, #1
 8006620:	3a01      	subs	r2, #1
 8006622:	0552      	lsls	r2, r2, #21
 8006624:	430a      	orrs	r2, r1
 8006626:	491f      	ldr	r1, [pc, #124]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006628:	4313      	orrs	r3, r2
 800662a:	610b      	str	r3, [r1, #16]
 800662c:	e011      	b.n	8006652 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800662e:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006636:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6892      	ldr	r2, [r2, #8]
 800663e:	0211      	lsls	r1, r2, #8
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6952      	ldr	r2, [r2, #20]
 8006644:	0852      	lsrs	r2, r2, #1
 8006646:	3a01      	subs	r2, #1
 8006648:	0652      	lsls	r2, r2, #25
 800664a:	430a      	orrs	r2, r1
 800664c:	4915      	ldr	r1, [pc, #84]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800664e:	4313      	orrs	r3, r2
 8006650:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006652:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a13      	ldr	r2, [pc, #76]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800665c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665e:	f7fb fefd 	bl	800245c <HAL_GetTick>
 8006662:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006664:	e009      	b.n	800667a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006666:	f7fb fef9 	bl	800245c <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d902      	bls.n	800667a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	73fb      	strb	r3, [r7, #15]
          break;
 8006678:	e005      	b.n	8006686 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0ef      	beq.n	8006666 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800668c:	4b05      	ldr	r3, [pc, #20]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	4903      	ldr	r1, [pc, #12]	; (80066a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006696:	4313      	orrs	r3, r2
 8006698:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40021000 	.word	0x40021000

080066a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e040      	b.n	800673c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fb fc92 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	; 0x24
 80066d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0201 	bic.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8c0 	bl	800686c <UART_SetConfig>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e022      	b.n	800673c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fae0 	bl	8006cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fb67 	bl	8006e08 <UART_CheckIdleState>
 800673a:	4603      	mov	r3, r0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006758:	2b20      	cmp	r3, #32
 800675a:	f040 8082 	bne.w	8006862 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_UART_Transmit+0x26>
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e07a      	b.n	8006864 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_UART_Transmit+0x38>
 8006778:	2302      	movs	r3, #2
 800677a:	e073      	b.n	8006864 <HAL_UART_Transmit+0x120>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2221      	movs	r2, #33	; 0x21
 8006790:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006792:	f7fb fe63 	bl	800245c <HAL_GetTick>
 8006796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	88fa      	ldrh	r2, [r7, #6]
 800679c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	88fa      	ldrh	r2, [r7, #6]
 80067a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b0:	d108      	bne.n	80067c4 <HAL_UART_Transmit+0x80>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e003      	b.n	80067cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80067d4:	e02d      	b.n	8006832 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2200      	movs	r2, #0
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fb5a 	bl	8006e9a <UART_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e039      	b.n	8006864 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	881a      	ldrh	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006802:	b292      	uxth	r2, r2
 8006804:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	3302      	adds	r3, #2
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	e008      	b.n	8006820 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	781a      	ldrb	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	b292      	uxth	r2, r2
 8006818:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1cb      	bne.n	80067d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2200      	movs	r2, #0
 8006846:	2140      	movs	r1, #64	; 0x40
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fb26 	bl	8006e9a <UART_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e005      	b.n	8006864 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	e000      	b.n	8006864 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006862:	2302      	movs	r3, #2
  }
}
 8006864:	4618      	mov	r0, r3
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800686c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006870:	b08a      	sub	sp, #40	; 0x28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	431a      	orrs	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	431a      	orrs	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4313      	orrs	r3, r2
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4bb4      	ldr	r3, [pc, #720]	; (8006b6c <UART_SetConfig+0x300>)
 800689c:	4013      	ands	r3, r2
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068a4:	430b      	orrs	r3, r1
 80068a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4aa9      	ldr	r2, [pc, #676]	; (8006b70 <UART_SetConfig+0x304>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d004      	beq.n	80068d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	4313      	orrs	r3, r2
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e8:	430a      	orrs	r2, r1
 80068ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4aa0      	ldr	r2, [pc, #640]	; (8006b74 <UART_SetConfig+0x308>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d126      	bne.n	8006944 <UART_SetConfig+0xd8>
 80068f6:	4ba0      	ldr	r3, [pc, #640]	; (8006b78 <UART_SetConfig+0x30c>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	2b03      	cmp	r3, #3
 8006902:	d81b      	bhi.n	800693c <UART_SetConfig+0xd0>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <UART_SetConfig+0xa0>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	0800691d 	.word	0x0800691d
 8006910:	0800692d 	.word	0x0800692d
 8006914:	08006925 	.word	0x08006925
 8006918:	08006935 	.word	0x08006935
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006922:	e080      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006924:	2302      	movs	r3, #2
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e07c      	b.n	8006a26 <UART_SetConfig+0x1ba>
 800692c:	2304      	movs	r3, #4
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006932:	e078      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006934:	2308      	movs	r3, #8
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693a:	e074      	b.n	8006a26 <UART_SetConfig+0x1ba>
 800693c:	2310      	movs	r3, #16
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006942:	e070      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a8c      	ldr	r2, [pc, #560]	; (8006b7c <UART_SetConfig+0x310>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d138      	bne.n	80069c0 <UART_SetConfig+0x154>
 800694e:	4b8a      	ldr	r3, [pc, #552]	; (8006b78 <UART_SetConfig+0x30c>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006954:	f003 030c 	and.w	r3, r3, #12
 8006958:	2b0c      	cmp	r3, #12
 800695a:	d82d      	bhi.n	80069b8 <UART_SetConfig+0x14c>
 800695c:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <UART_SetConfig+0xf8>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006999 	.word	0x08006999
 8006968:	080069b9 	.word	0x080069b9
 800696c:	080069b9 	.word	0x080069b9
 8006970:	080069b9 	.word	0x080069b9
 8006974:	080069a9 	.word	0x080069a9
 8006978:	080069b9 	.word	0x080069b9
 800697c:	080069b9 	.word	0x080069b9
 8006980:	080069b9 	.word	0x080069b9
 8006984:	080069a1 	.word	0x080069a1
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069b9 	.word	0x080069b9
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069b1 	.word	0x080069b1
 8006998:	2300      	movs	r3, #0
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699e:	e042      	b.n	8006a26 <UART_SetConfig+0x1ba>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a6:	e03e      	b.n	8006a26 <UART_SetConfig+0x1ba>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ae:	e03a      	b.n	8006a26 <UART_SetConfig+0x1ba>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b6:	e036      	b.n	8006a26 <UART_SetConfig+0x1ba>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069be:	e032      	b.n	8006a26 <UART_SetConfig+0x1ba>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a6a      	ldr	r2, [pc, #424]	; (8006b70 <UART_SetConfig+0x304>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d12a      	bne.n	8006a20 <UART_SetConfig+0x1b4>
 80069ca:	4b6b      	ldr	r3, [pc, #428]	; (8006b78 <UART_SetConfig+0x30c>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d8:	d01a      	beq.n	8006a10 <UART_SetConfig+0x1a4>
 80069da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069de:	d81b      	bhi.n	8006a18 <UART_SetConfig+0x1ac>
 80069e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e4:	d00c      	beq.n	8006a00 <UART_SetConfig+0x194>
 80069e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ea:	d815      	bhi.n	8006a18 <UART_SetConfig+0x1ac>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <UART_SetConfig+0x18c>
 80069f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f4:	d008      	beq.n	8006a08 <UART_SetConfig+0x19c>
 80069f6:	e00f      	b.n	8006a18 <UART_SetConfig+0x1ac>
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fe:	e012      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006a00:	2302      	movs	r3, #2
 8006a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a06:	e00e      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0e:	e00a      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006a10:	2308      	movs	r3, #8
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a16:	e006      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1e:	e002      	b.n	8006a26 <UART_SetConfig+0x1ba>
 8006a20:	2310      	movs	r3, #16
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a51      	ldr	r2, [pc, #324]	; (8006b70 <UART_SetConfig+0x304>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d17a      	bne.n	8006b26 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d824      	bhi.n	8006a82 <UART_SetConfig+0x216>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0x1d4>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a83 	.word	0x08006a83
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a83 	.word	0x08006a83
 8006a50:	08006a73 	.word	0x08006a73
 8006a54:	08006a83 	.word	0x08006a83
 8006a58:	08006a83 	.word	0x08006a83
 8006a5c:	08006a83 	.word	0x08006a83
 8006a60:	08006a7b 	.word	0x08006a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a64:	f7ff fa9c 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8006a68:	61f8      	str	r0, [r7, #28]
        break;
 8006a6a:	e010      	b.n	8006a8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a6c:	4b44      	ldr	r3, [pc, #272]	; (8006b80 <UART_SetConfig+0x314>)
 8006a6e:	61fb      	str	r3, [r7, #28]
        break;
 8006a70:	e00d      	b.n	8006a8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a72:	f7ff f9fd 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8006a76:	61f8      	str	r0, [r7, #28]
        break;
 8006a78:	e009      	b.n	8006a8e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7e:	61fb      	str	r3, [r7, #28]
        break;
 8006a80:	e005      	b.n	8006a8e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8107 	beq.w	8006ca4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4413      	add	r3, r2
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d305      	bcc.n	8006ab2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d903      	bls.n	8006aba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ab8:	e0f4      	b.n	8006ca4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	2200      	movs	r2, #0
 8006abe:	461c      	mov	r4, r3
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	022b      	lsls	r3, r5, #8
 8006acc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ad0:	0222      	lsls	r2, r4, #8
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	6849      	ldr	r1, [r1, #4]
 8006ad6:	0849      	lsrs	r1, r1, #1
 8006ad8:	2000      	movs	r0, #0
 8006ada:	4688      	mov	r8, r1
 8006adc:	4681      	mov	r9, r0
 8006ade:	eb12 0a08 	adds.w	sl, r2, r8
 8006ae2:	eb43 0b09 	adc.w	fp, r3, r9
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af4:	4650      	mov	r0, sl
 8006af6:	4659      	mov	r1, fp
 8006af8:	f7fa f856 	bl	8000ba8 <__aeabi_uldivmod>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4613      	mov	r3, r2
 8006b02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0a:	d308      	bcc.n	8006b1e <UART_SetConfig+0x2b2>
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b12:	d204      	bcs.n	8006b1e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	60da      	str	r2, [r3, #12]
 8006b1c:	e0c2      	b.n	8006ca4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b24:	e0be      	b.n	8006ca4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b2e:	d16a      	bne.n	8006c06 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d834      	bhi.n	8006ba2 <UART_SetConfig+0x336>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x2d4>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b85 	.word	0x08006b85
 8006b48:	08006b8d 	.word	0x08006b8d
 8006b4c:	08006ba3 	.word	0x08006ba3
 8006b50:	08006b93 	.word	0x08006b93
 8006b54:	08006ba3 	.word	0x08006ba3
 8006b58:	08006ba3 	.word	0x08006ba3
 8006b5c:	08006ba3 	.word	0x08006ba3
 8006b60:	08006b9b 	.word	0x08006b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7ff fa1c 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8006b68:	61f8      	str	r0, [r7, #28]
        break;
 8006b6a:	e020      	b.n	8006bae <UART_SetConfig+0x342>
 8006b6c:	efff69f3 	.word	0xefff69f3
 8006b70:	40008000 	.word	0x40008000
 8006b74:	40013800 	.word	0x40013800
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40004400 	.word	0x40004400
 8006b80:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b84:	f7ff fa22 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 8006b88:	61f8      	str	r0, [r7, #28]
        break;
 8006b8a:	e010      	b.n	8006bae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b8c:	4b4c      	ldr	r3, [pc, #304]	; (8006cc0 <UART_SetConfig+0x454>)
 8006b8e:	61fb      	str	r3, [r7, #28]
        break;
 8006b90:	e00d      	b.n	8006bae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b92:	f7ff f96d 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8006b96:	61f8      	str	r0, [r7, #28]
        break;
 8006b98:	e009      	b.n	8006bae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9e:	61fb      	str	r3, [r7, #28]
        break;
 8006ba0:	e005      	b.n	8006bae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d077      	beq.n	8006ca4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	005a      	lsls	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	441a      	add	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d916      	bls.n	8006bfe <UART_SetConfig+0x392>
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd6:	d212      	bcs.n	8006bfe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f023 030f 	bic.w	r3, r3, #15
 8006be0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	8afb      	ldrh	r3, [r7, #22]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	8afa      	ldrh	r2, [r7, #22]
 8006bfa:	60da      	str	r2, [r3, #12]
 8006bfc:	e052      	b.n	8006ca4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c04:	e04e      	b.n	8006ca4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c0a:	2b08      	cmp	r3, #8
 8006c0c:	d827      	bhi.n	8006c5e <UART_SetConfig+0x3f2>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0x3a8>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c41 	.word	0x08006c41
 8006c1c:	08006c49 	.word	0x08006c49
 8006c20:	08006c5f 	.word	0x08006c5f
 8006c24:	08006c4f 	.word	0x08006c4f
 8006c28:	08006c5f 	.word	0x08006c5f
 8006c2c:	08006c5f 	.word	0x08006c5f
 8006c30:	08006c5f 	.word	0x08006c5f
 8006c34:	08006c57 	.word	0x08006c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c38:	f7ff f9b2 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8006c3c:	61f8      	str	r0, [r7, #28]
        break;
 8006c3e:	e014      	b.n	8006c6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c40:	f7ff f9c4 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 8006c44:	61f8      	str	r0, [r7, #28]
        break;
 8006c46:	e010      	b.n	8006c6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <UART_SetConfig+0x454>)
 8006c4a:	61fb      	str	r3, [r7, #28]
        break;
 8006c4c:	e00d      	b.n	8006c6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c4e:	f7ff f90f 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8006c52:	61f8      	str	r0, [r7, #28]
        break;
 8006c54:	e009      	b.n	8006c6a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c5a:	61fb      	str	r3, [r7, #28]
        break;
 8006c5c:	e005      	b.n	8006c6a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c68:	bf00      	nop
    }

    if (pclk != 0U)
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d019      	beq.n	8006ca4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	085a      	lsrs	r2, r3, #1
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d909      	bls.n	8006c9e <UART_SetConfig+0x432>
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d205      	bcs.n	8006c9e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60da      	str	r2, [r3, #12]
 8006c9c:	e002      	b.n	8006ca4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3728      	adds	r7, #40	; 0x28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cbe:	bf00      	nop
 8006cc0:	00f42400 	.word	0x00f42400

08006cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01a      	beq.n	8006dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc2:	d10a      	bne.n	8006dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e18:	f7fb fb20 	bl	800245c <HAL_GetTick>
 8006e1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d10e      	bne.n	8006e4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f82d 	bl	8006e9a <UART_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e023      	b.n	8006e92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d10e      	bne.n	8006e76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f817 	bl	8006e9a <UART_WaitOnFlagUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e00d      	b.n	8006e92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b09c      	sub	sp, #112	; 0x70
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eaa:	e0a5      	b.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb2:	f000 80a1 	beq.w	8006ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb6:	f7fb fad1 	bl	800245c <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d302      	bcc.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x32>
 8006ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d13e      	bne.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006edc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e6      	bne.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	f023 0301 	bic.w	r3, r3, #1
 8006f14:	663b      	str	r3, [r7, #96]	; 0x60
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e5      	bne.n	8006efe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2220      	movs	r2, #32
 8006f36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e067      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d04f      	beq.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f66:	d147      	bne.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	e853 3f00 	ldrex	r3, [r3]
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
 8006f92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e6      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f023 0301 	bic.w	r3, r3, #1
 8006fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fc4:	623a      	str	r2, [r7, #32]
 8006fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	69f9      	ldr	r1, [r7, #28]
 8006fca:	6a3a      	ldr	r2, [r7, #32]
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e5      	bne.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e010      	b.n	800701a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69da      	ldr	r2, [r3, #28]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4013      	ands	r3, r2
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	429a      	cmp	r2, r3
 8007006:	bf0c      	ite	eq
 8007008:	2301      	moveq	r3, #1
 800700a:	2300      	movne	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	429a      	cmp	r2, r3
 8007014:	f43f af4a 	beq.w	8006eac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3770      	adds	r7, #112	; 0x70
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <__errno>:
 8007024:	4b01      	ldr	r3, [pc, #4]	; (800702c <__errno+0x8>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	2000000c 	.word	0x2000000c

08007030 <__libc_init_array>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4d0d      	ldr	r5, [pc, #52]	; (8007068 <__libc_init_array+0x38>)
 8007034:	4c0d      	ldr	r4, [pc, #52]	; (800706c <__libc_init_array+0x3c>)
 8007036:	1b64      	subs	r4, r4, r5
 8007038:	10a4      	asrs	r4, r4, #2
 800703a:	2600      	movs	r6, #0
 800703c:	42a6      	cmp	r6, r4
 800703e:	d109      	bne.n	8007054 <__libc_init_array+0x24>
 8007040:	4d0b      	ldr	r5, [pc, #44]	; (8007070 <__libc_init_array+0x40>)
 8007042:	4c0c      	ldr	r4, [pc, #48]	; (8007074 <__libc_init_array+0x44>)
 8007044:	f004 f842 	bl	800b0cc <_init>
 8007048:	1b64      	subs	r4, r4, r5
 800704a:	10a4      	asrs	r4, r4, #2
 800704c:	2600      	movs	r6, #0
 800704e:	42a6      	cmp	r6, r4
 8007050:	d105      	bne.n	800705e <__libc_init_array+0x2e>
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	f855 3b04 	ldr.w	r3, [r5], #4
 8007058:	4798      	blx	r3
 800705a:	3601      	adds	r6, #1
 800705c:	e7ee      	b.n	800703c <__libc_init_array+0xc>
 800705e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007062:	4798      	blx	r3
 8007064:	3601      	adds	r6, #1
 8007066:	e7f2      	b.n	800704e <__libc_init_array+0x1e>
 8007068:	0800ba8c 	.word	0x0800ba8c
 800706c:	0800ba8c 	.word	0x0800ba8c
 8007070:	0800ba8c 	.word	0x0800ba8c
 8007074:	0800ba90 	.word	0x0800ba90

08007078 <memset>:
 8007078:	4402      	add	r2, r0
 800707a:	4603      	mov	r3, r0
 800707c:	4293      	cmp	r3, r2
 800707e:	d100      	bne.n	8007082 <memset+0xa>
 8007080:	4770      	bx	lr
 8007082:	f803 1b01 	strb.w	r1, [r3], #1
 8007086:	e7f9      	b.n	800707c <memset+0x4>

08007088 <__cvt>:
 8007088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	ec55 4b10 	vmov	r4, r5, d0
 8007090:	2d00      	cmp	r5, #0
 8007092:	460e      	mov	r6, r1
 8007094:	4619      	mov	r1, r3
 8007096:	462b      	mov	r3, r5
 8007098:	bfbb      	ittet	lt
 800709a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800709e:	461d      	movlt	r5, r3
 80070a0:	2300      	movge	r3, #0
 80070a2:	232d      	movlt	r3, #45	; 0x2d
 80070a4:	700b      	strb	r3, [r1, #0]
 80070a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070ac:	4691      	mov	r9, r2
 80070ae:	f023 0820 	bic.w	r8, r3, #32
 80070b2:	bfbc      	itt	lt
 80070b4:	4622      	movlt	r2, r4
 80070b6:	4614      	movlt	r4, r2
 80070b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070bc:	d005      	beq.n	80070ca <__cvt+0x42>
 80070be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070c2:	d100      	bne.n	80070c6 <__cvt+0x3e>
 80070c4:	3601      	adds	r6, #1
 80070c6:	2102      	movs	r1, #2
 80070c8:	e000      	b.n	80070cc <__cvt+0x44>
 80070ca:	2103      	movs	r1, #3
 80070cc:	ab03      	add	r3, sp, #12
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	ab02      	add	r3, sp, #8
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	ec45 4b10 	vmov	d0, r4, r5
 80070d8:	4653      	mov	r3, sl
 80070da:	4632      	mov	r2, r6
 80070dc:	f000 fcec 	bl	8007ab8 <_dtoa_r>
 80070e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070e4:	4607      	mov	r7, r0
 80070e6:	d102      	bne.n	80070ee <__cvt+0x66>
 80070e8:	f019 0f01 	tst.w	r9, #1
 80070ec:	d022      	beq.n	8007134 <__cvt+0xac>
 80070ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070f2:	eb07 0906 	add.w	r9, r7, r6
 80070f6:	d110      	bne.n	800711a <__cvt+0x92>
 80070f8:	783b      	ldrb	r3, [r7, #0]
 80070fa:	2b30      	cmp	r3, #48	; 0x30
 80070fc:	d10a      	bne.n	8007114 <__cvt+0x8c>
 80070fe:	2200      	movs	r2, #0
 8007100:	2300      	movs	r3, #0
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800710a:	b918      	cbnz	r0, 8007114 <__cvt+0x8c>
 800710c:	f1c6 0601 	rsb	r6, r6, #1
 8007110:	f8ca 6000 	str.w	r6, [sl]
 8007114:	f8da 3000 	ldr.w	r3, [sl]
 8007118:	4499      	add	r9, r3
 800711a:	2200      	movs	r2, #0
 800711c:	2300      	movs	r3, #0
 800711e:	4620      	mov	r0, r4
 8007120:	4629      	mov	r1, r5
 8007122:	f7f9 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007126:	b108      	cbz	r0, 800712c <__cvt+0xa4>
 8007128:	f8cd 900c 	str.w	r9, [sp, #12]
 800712c:	2230      	movs	r2, #48	; 0x30
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	454b      	cmp	r3, r9
 8007132:	d307      	bcc.n	8007144 <__cvt+0xbc>
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007138:	1bdb      	subs	r3, r3, r7
 800713a:	4638      	mov	r0, r7
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	b004      	add	sp, #16
 8007140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007144:	1c59      	adds	r1, r3, #1
 8007146:	9103      	str	r1, [sp, #12]
 8007148:	701a      	strb	r2, [r3, #0]
 800714a:	e7f0      	b.n	800712e <__cvt+0xa6>

0800714c <__exponent>:
 800714c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800714e:	4603      	mov	r3, r0
 8007150:	2900      	cmp	r1, #0
 8007152:	bfb8      	it	lt
 8007154:	4249      	neglt	r1, r1
 8007156:	f803 2b02 	strb.w	r2, [r3], #2
 800715a:	bfb4      	ite	lt
 800715c:	222d      	movlt	r2, #45	; 0x2d
 800715e:	222b      	movge	r2, #43	; 0x2b
 8007160:	2909      	cmp	r1, #9
 8007162:	7042      	strb	r2, [r0, #1]
 8007164:	dd2a      	ble.n	80071bc <__exponent+0x70>
 8007166:	f10d 0407 	add.w	r4, sp, #7
 800716a:	46a4      	mov	ip, r4
 800716c:	270a      	movs	r7, #10
 800716e:	46a6      	mov	lr, r4
 8007170:	460a      	mov	r2, r1
 8007172:	fb91 f6f7 	sdiv	r6, r1, r7
 8007176:	fb07 1516 	mls	r5, r7, r6, r1
 800717a:	3530      	adds	r5, #48	; 0x30
 800717c:	2a63      	cmp	r2, #99	; 0x63
 800717e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007182:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007186:	4631      	mov	r1, r6
 8007188:	dcf1      	bgt.n	800716e <__exponent+0x22>
 800718a:	3130      	adds	r1, #48	; 0x30
 800718c:	f1ae 0502 	sub.w	r5, lr, #2
 8007190:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007194:	1c44      	adds	r4, r0, #1
 8007196:	4629      	mov	r1, r5
 8007198:	4561      	cmp	r1, ip
 800719a:	d30a      	bcc.n	80071b2 <__exponent+0x66>
 800719c:	f10d 0209 	add.w	r2, sp, #9
 80071a0:	eba2 020e 	sub.w	r2, r2, lr
 80071a4:	4565      	cmp	r5, ip
 80071a6:	bf88      	it	hi
 80071a8:	2200      	movhi	r2, #0
 80071aa:	4413      	add	r3, r2
 80071ac:	1a18      	subs	r0, r3, r0
 80071ae:	b003      	add	sp, #12
 80071b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071ba:	e7ed      	b.n	8007198 <__exponent+0x4c>
 80071bc:	2330      	movs	r3, #48	; 0x30
 80071be:	3130      	adds	r1, #48	; 0x30
 80071c0:	7083      	strb	r3, [r0, #2]
 80071c2:	70c1      	strb	r1, [r0, #3]
 80071c4:	1d03      	adds	r3, r0, #4
 80071c6:	e7f1      	b.n	80071ac <__exponent+0x60>

080071c8 <_printf_float>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	ed2d 8b02 	vpush	{d8}
 80071d0:	b08d      	sub	sp, #52	; 0x34
 80071d2:	460c      	mov	r4, r1
 80071d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071d8:	4616      	mov	r6, r2
 80071da:	461f      	mov	r7, r3
 80071dc:	4605      	mov	r5, r0
 80071de:	f001 fa59 	bl	8008694 <_localeconv_r>
 80071e2:	f8d0 a000 	ldr.w	sl, [r0]
 80071e6:	4650      	mov	r0, sl
 80071e8:	f7f8 fff2 	bl	80001d0 <strlen>
 80071ec:	2300      	movs	r3, #0
 80071ee:	930a      	str	r3, [sp, #40]	; 0x28
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	9305      	str	r3, [sp, #20]
 80071f4:	f8d8 3000 	ldr.w	r3, [r8]
 80071f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071fc:	3307      	adds	r3, #7
 80071fe:	f023 0307 	bic.w	r3, r3, #7
 8007202:	f103 0208 	add.w	r2, r3, #8
 8007206:	f8c8 2000 	str.w	r2, [r8]
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007212:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007216:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800721a:	9307      	str	r3, [sp, #28]
 800721c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007220:	ee08 0a10 	vmov	s16, r0
 8007224:	4b9f      	ldr	r3, [pc, #636]	; (80074a4 <_printf_float+0x2dc>)
 8007226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800722a:	f04f 32ff 	mov.w	r2, #4294967295
 800722e:	f7f9 fc7d 	bl	8000b2c <__aeabi_dcmpun>
 8007232:	bb88      	cbnz	r0, 8007298 <_printf_float+0xd0>
 8007234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007238:	4b9a      	ldr	r3, [pc, #616]	; (80074a4 <_printf_float+0x2dc>)
 800723a:	f04f 32ff 	mov.w	r2, #4294967295
 800723e:	f7f9 fc57 	bl	8000af0 <__aeabi_dcmple>
 8007242:	bb48      	cbnz	r0, 8007298 <_printf_float+0xd0>
 8007244:	2200      	movs	r2, #0
 8007246:	2300      	movs	r3, #0
 8007248:	4640      	mov	r0, r8
 800724a:	4649      	mov	r1, r9
 800724c:	f7f9 fc46 	bl	8000adc <__aeabi_dcmplt>
 8007250:	b110      	cbz	r0, 8007258 <_printf_float+0x90>
 8007252:	232d      	movs	r3, #45	; 0x2d
 8007254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007258:	4b93      	ldr	r3, [pc, #588]	; (80074a8 <_printf_float+0x2e0>)
 800725a:	4894      	ldr	r0, [pc, #592]	; (80074ac <_printf_float+0x2e4>)
 800725c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007260:	bf94      	ite	ls
 8007262:	4698      	movls	r8, r3
 8007264:	4680      	movhi	r8, r0
 8007266:	2303      	movs	r3, #3
 8007268:	6123      	str	r3, [r4, #16]
 800726a:	9b05      	ldr	r3, [sp, #20]
 800726c:	f023 0204 	bic.w	r2, r3, #4
 8007270:	6022      	str	r2, [r4, #0]
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	9700      	str	r7, [sp, #0]
 8007278:	4633      	mov	r3, r6
 800727a:	aa0b      	add	r2, sp, #44	; 0x2c
 800727c:	4621      	mov	r1, r4
 800727e:	4628      	mov	r0, r5
 8007280:	f000 f9d8 	bl	8007634 <_printf_common>
 8007284:	3001      	adds	r0, #1
 8007286:	f040 8090 	bne.w	80073aa <_printf_float+0x1e2>
 800728a:	f04f 30ff 	mov.w	r0, #4294967295
 800728e:	b00d      	add	sp, #52	; 0x34
 8007290:	ecbd 8b02 	vpop	{d8}
 8007294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	4640      	mov	r0, r8
 800729e:	4649      	mov	r1, r9
 80072a0:	f7f9 fc44 	bl	8000b2c <__aeabi_dcmpun>
 80072a4:	b140      	cbz	r0, 80072b8 <_printf_float+0xf0>
 80072a6:	464b      	mov	r3, r9
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bfbc      	itt	lt
 80072ac:	232d      	movlt	r3, #45	; 0x2d
 80072ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072b2:	487f      	ldr	r0, [pc, #508]	; (80074b0 <_printf_float+0x2e8>)
 80072b4:	4b7f      	ldr	r3, [pc, #508]	; (80074b4 <_printf_float+0x2ec>)
 80072b6:	e7d1      	b.n	800725c <_printf_float+0x94>
 80072b8:	6863      	ldr	r3, [r4, #4]
 80072ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072be:	9206      	str	r2, [sp, #24]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	d13f      	bne.n	8007344 <_printf_float+0x17c>
 80072c4:	2306      	movs	r3, #6
 80072c6:	6063      	str	r3, [r4, #4]
 80072c8:	9b05      	ldr	r3, [sp, #20]
 80072ca:	6861      	ldr	r1, [r4, #4]
 80072cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072d0:	2300      	movs	r3, #0
 80072d2:	9303      	str	r3, [sp, #12]
 80072d4:	ab0a      	add	r3, sp, #40	; 0x28
 80072d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072da:	ab09      	add	r3, sp, #36	; 0x24
 80072dc:	ec49 8b10 	vmov	d0, r8, r9
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072e8:	4628      	mov	r0, r5
 80072ea:	f7ff fecd 	bl	8007088 <__cvt>
 80072ee:	9b06      	ldr	r3, [sp, #24]
 80072f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072f2:	2b47      	cmp	r3, #71	; 0x47
 80072f4:	4680      	mov	r8, r0
 80072f6:	d108      	bne.n	800730a <_printf_float+0x142>
 80072f8:	1cc8      	adds	r0, r1, #3
 80072fa:	db02      	blt.n	8007302 <_printf_float+0x13a>
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	4299      	cmp	r1, r3
 8007300:	dd41      	ble.n	8007386 <_printf_float+0x1be>
 8007302:	f1ab 0b02 	sub.w	fp, fp, #2
 8007306:	fa5f fb8b 	uxtb.w	fp, fp
 800730a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800730e:	d820      	bhi.n	8007352 <_printf_float+0x18a>
 8007310:	3901      	subs	r1, #1
 8007312:	465a      	mov	r2, fp
 8007314:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007318:	9109      	str	r1, [sp, #36]	; 0x24
 800731a:	f7ff ff17 	bl	800714c <__exponent>
 800731e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007320:	1813      	adds	r3, r2, r0
 8007322:	2a01      	cmp	r2, #1
 8007324:	4681      	mov	r9, r0
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	dc02      	bgt.n	8007330 <_printf_float+0x168>
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	07d2      	lsls	r2, r2, #31
 800732e:	d501      	bpl.n	8007334 <_printf_float+0x16c>
 8007330:	3301      	adds	r3, #1
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007338:	2b00      	cmp	r3, #0
 800733a:	d09c      	beq.n	8007276 <_printf_float+0xae>
 800733c:	232d      	movs	r3, #45	; 0x2d
 800733e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007342:	e798      	b.n	8007276 <_printf_float+0xae>
 8007344:	9a06      	ldr	r2, [sp, #24]
 8007346:	2a47      	cmp	r2, #71	; 0x47
 8007348:	d1be      	bne.n	80072c8 <_printf_float+0x100>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1bc      	bne.n	80072c8 <_printf_float+0x100>
 800734e:	2301      	movs	r3, #1
 8007350:	e7b9      	b.n	80072c6 <_printf_float+0xfe>
 8007352:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007356:	d118      	bne.n	800738a <_printf_float+0x1c2>
 8007358:	2900      	cmp	r1, #0
 800735a:	6863      	ldr	r3, [r4, #4]
 800735c:	dd0b      	ble.n	8007376 <_printf_float+0x1ae>
 800735e:	6121      	str	r1, [r4, #16]
 8007360:	b913      	cbnz	r3, 8007368 <_printf_float+0x1a0>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	07d0      	lsls	r0, r2, #31
 8007366:	d502      	bpl.n	800736e <_printf_float+0x1a6>
 8007368:	3301      	adds	r3, #1
 800736a:	440b      	add	r3, r1
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007370:	f04f 0900 	mov.w	r9, #0
 8007374:	e7de      	b.n	8007334 <_printf_float+0x16c>
 8007376:	b913      	cbnz	r3, 800737e <_printf_float+0x1b6>
 8007378:	6822      	ldr	r2, [r4, #0]
 800737a:	07d2      	lsls	r2, r2, #31
 800737c:	d501      	bpl.n	8007382 <_printf_float+0x1ba>
 800737e:	3302      	adds	r3, #2
 8007380:	e7f4      	b.n	800736c <_printf_float+0x1a4>
 8007382:	2301      	movs	r3, #1
 8007384:	e7f2      	b.n	800736c <_printf_float+0x1a4>
 8007386:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800738a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738c:	4299      	cmp	r1, r3
 800738e:	db05      	blt.n	800739c <_printf_float+0x1d4>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	6121      	str	r1, [r4, #16]
 8007394:	07d8      	lsls	r0, r3, #31
 8007396:	d5ea      	bpl.n	800736e <_printf_float+0x1a6>
 8007398:	1c4b      	adds	r3, r1, #1
 800739a:	e7e7      	b.n	800736c <_printf_float+0x1a4>
 800739c:	2900      	cmp	r1, #0
 800739e:	bfd4      	ite	le
 80073a0:	f1c1 0202 	rsble	r2, r1, #2
 80073a4:	2201      	movgt	r2, #1
 80073a6:	4413      	add	r3, r2
 80073a8:	e7e0      	b.n	800736c <_printf_float+0x1a4>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	055a      	lsls	r2, r3, #21
 80073ae:	d407      	bmi.n	80073c0 <_printf_float+0x1f8>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	4642      	mov	r2, r8
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	d12c      	bne.n	8007418 <_printf_float+0x250>
 80073be:	e764      	b.n	800728a <_printf_float+0xc2>
 80073c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073c4:	f240 80e0 	bls.w	8007588 <_printf_float+0x3c0>
 80073c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	f7f9 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d034      	beq.n	8007442 <_printf_float+0x27a>
 80073d8:	4a37      	ldr	r2, [pc, #220]	; (80074b8 <_printf_float+0x2f0>)
 80073da:	2301      	movs	r3, #1
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f af51 	beq.w	800728a <_printf_float+0xc2>
 80073e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ec:	429a      	cmp	r2, r3
 80073ee:	db02      	blt.n	80073f6 <_printf_float+0x22e>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07d8      	lsls	r0, r3, #31
 80073f4:	d510      	bpl.n	8007418 <_printf_float+0x250>
 80073f6:	ee18 3a10 	vmov	r3, s16
 80073fa:	4652      	mov	r2, sl
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af41 	beq.w	800728a <_printf_float+0xc2>
 8007408:	f04f 0800 	mov.w	r8, #0
 800740c:	f104 091a 	add.w	r9, r4, #26
 8007410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007412:	3b01      	subs	r3, #1
 8007414:	4543      	cmp	r3, r8
 8007416:	dc09      	bgt.n	800742c <_printf_float+0x264>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	079b      	lsls	r3, r3, #30
 800741c:	f100 8105 	bmi.w	800762a <_printf_float+0x462>
 8007420:	68e0      	ldr	r0, [r4, #12]
 8007422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007424:	4298      	cmp	r0, r3
 8007426:	bfb8      	it	lt
 8007428:	4618      	movlt	r0, r3
 800742a:	e730      	b.n	800728e <_printf_float+0xc6>
 800742c:	2301      	movs	r3, #1
 800742e:	464a      	mov	r2, r9
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	f43f af27 	beq.w	800728a <_printf_float+0xc2>
 800743c:	f108 0801 	add.w	r8, r8, #1
 8007440:	e7e6      	b.n	8007410 <_printf_float+0x248>
 8007442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007444:	2b00      	cmp	r3, #0
 8007446:	dc39      	bgt.n	80074bc <_printf_float+0x2f4>
 8007448:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <_printf_float+0x2f0>)
 800744a:	2301      	movs	r3, #1
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f af19 	beq.w	800728a <_printf_float+0xc2>
 8007458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800745c:	4313      	orrs	r3, r2
 800745e:	d102      	bne.n	8007466 <_printf_float+0x29e>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d5d8      	bpl.n	8007418 <_printf_float+0x250>
 8007466:	ee18 3a10 	vmov	r3, s16
 800746a:	4652      	mov	r2, sl
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f af09 	beq.w	800728a <_printf_float+0xc2>
 8007478:	f04f 0900 	mov.w	r9, #0
 800747c:	f104 0a1a 	add.w	sl, r4, #26
 8007480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007482:	425b      	negs	r3, r3
 8007484:	454b      	cmp	r3, r9
 8007486:	dc01      	bgt.n	800748c <_printf_float+0x2c4>
 8007488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748a:	e792      	b.n	80073b2 <_printf_float+0x1ea>
 800748c:	2301      	movs	r3, #1
 800748e:	4652      	mov	r2, sl
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f aef7 	beq.w	800728a <_printf_float+0xc2>
 800749c:	f109 0901 	add.w	r9, r9, #1
 80074a0:	e7ee      	b.n	8007480 <_printf_float+0x2b8>
 80074a2:	bf00      	nop
 80074a4:	7fefffff 	.word	0x7fefffff
 80074a8:	0800b2a8 	.word	0x0800b2a8
 80074ac:	0800b2ac 	.word	0x0800b2ac
 80074b0:	0800b2b4 	.word	0x0800b2b4
 80074b4:	0800b2b0 	.word	0x0800b2b0
 80074b8:	0800b2b8 	.word	0x0800b2b8
 80074bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074c0:	429a      	cmp	r2, r3
 80074c2:	bfa8      	it	ge
 80074c4:	461a      	movge	r2, r3
 80074c6:	2a00      	cmp	r2, #0
 80074c8:	4691      	mov	r9, r2
 80074ca:	dc37      	bgt.n	800753c <_printf_float+0x374>
 80074cc:	f04f 0b00 	mov.w	fp, #0
 80074d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074d4:	f104 021a 	add.w	r2, r4, #26
 80074d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074da:	9305      	str	r3, [sp, #20]
 80074dc:	eba3 0309 	sub.w	r3, r3, r9
 80074e0:	455b      	cmp	r3, fp
 80074e2:	dc33      	bgt.n	800754c <_printf_float+0x384>
 80074e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e8:	429a      	cmp	r2, r3
 80074ea:	db3b      	blt.n	8007564 <_printf_float+0x39c>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	07da      	lsls	r2, r3, #31
 80074f0:	d438      	bmi.n	8007564 <_printf_float+0x39c>
 80074f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f4:	9a05      	ldr	r2, [sp, #20]
 80074f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074f8:	1a9a      	subs	r2, r3, r2
 80074fa:	eba3 0901 	sub.w	r9, r3, r1
 80074fe:	4591      	cmp	r9, r2
 8007500:	bfa8      	it	ge
 8007502:	4691      	movge	r9, r2
 8007504:	f1b9 0f00 	cmp.w	r9, #0
 8007508:	dc35      	bgt.n	8007576 <_printf_float+0x3ae>
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007512:	f104 0a1a 	add.w	sl, r4, #26
 8007516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	eba3 0309 	sub.w	r3, r3, r9
 8007520:	4543      	cmp	r3, r8
 8007522:	f77f af79 	ble.w	8007418 <_printf_float+0x250>
 8007526:	2301      	movs	r3, #1
 8007528:	4652      	mov	r2, sl
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	f43f aeaa 	beq.w	800728a <_printf_float+0xc2>
 8007536:	f108 0801 	add.w	r8, r8, #1
 800753a:	e7ec      	b.n	8007516 <_printf_float+0x34e>
 800753c:	4613      	mov	r3, r2
 800753e:	4631      	mov	r1, r6
 8007540:	4642      	mov	r2, r8
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	d1c0      	bne.n	80074cc <_printf_float+0x304>
 800754a:	e69e      	b.n	800728a <_printf_float+0xc2>
 800754c:	2301      	movs	r3, #1
 800754e:	4631      	mov	r1, r6
 8007550:	4628      	mov	r0, r5
 8007552:	9205      	str	r2, [sp, #20]
 8007554:	47b8      	blx	r7
 8007556:	3001      	adds	r0, #1
 8007558:	f43f ae97 	beq.w	800728a <_printf_float+0xc2>
 800755c:	9a05      	ldr	r2, [sp, #20]
 800755e:	f10b 0b01 	add.w	fp, fp, #1
 8007562:	e7b9      	b.n	80074d8 <_printf_float+0x310>
 8007564:	ee18 3a10 	vmov	r3, s16
 8007568:	4652      	mov	r2, sl
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	d1be      	bne.n	80074f2 <_printf_float+0x32a>
 8007574:	e689      	b.n	800728a <_printf_float+0xc2>
 8007576:	9a05      	ldr	r2, [sp, #20]
 8007578:	464b      	mov	r3, r9
 800757a:	4442      	add	r2, r8
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	d1c1      	bne.n	800750a <_printf_float+0x342>
 8007586:	e680      	b.n	800728a <_printf_float+0xc2>
 8007588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800758a:	2a01      	cmp	r2, #1
 800758c:	dc01      	bgt.n	8007592 <_printf_float+0x3ca>
 800758e:	07db      	lsls	r3, r3, #31
 8007590:	d538      	bpl.n	8007604 <_printf_float+0x43c>
 8007592:	2301      	movs	r3, #1
 8007594:	4642      	mov	r2, r8
 8007596:	4631      	mov	r1, r6
 8007598:	4628      	mov	r0, r5
 800759a:	47b8      	blx	r7
 800759c:	3001      	adds	r0, #1
 800759e:	f43f ae74 	beq.w	800728a <_printf_float+0xc2>
 80075a2:	ee18 3a10 	vmov	r3, s16
 80075a6:	4652      	mov	r2, sl
 80075a8:	4631      	mov	r1, r6
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	f43f ae6b 	beq.w	800728a <_printf_float+0xc2>
 80075b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075b8:	2200      	movs	r2, #0
 80075ba:	2300      	movs	r3, #0
 80075bc:	f7f9 fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c0:	b9d8      	cbnz	r0, 80075fa <_printf_float+0x432>
 80075c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c4:	f108 0201 	add.w	r2, r8, #1
 80075c8:	3b01      	subs	r3, #1
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	d10e      	bne.n	80075f2 <_printf_float+0x42a>
 80075d4:	e659      	b.n	800728a <_printf_float+0xc2>
 80075d6:	2301      	movs	r3, #1
 80075d8:	4652      	mov	r2, sl
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	f43f ae52 	beq.w	800728a <_printf_float+0xc2>
 80075e6:	f108 0801 	add.w	r8, r8, #1
 80075ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ec:	3b01      	subs	r3, #1
 80075ee:	4543      	cmp	r3, r8
 80075f0:	dcf1      	bgt.n	80075d6 <_printf_float+0x40e>
 80075f2:	464b      	mov	r3, r9
 80075f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075f8:	e6dc      	b.n	80073b4 <_printf_float+0x1ec>
 80075fa:	f04f 0800 	mov.w	r8, #0
 80075fe:	f104 0a1a 	add.w	sl, r4, #26
 8007602:	e7f2      	b.n	80075ea <_printf_float+0x422>
 8007604:	2301      	movs	r3, #1
 8007606:	4642      	mov	r2, r8
 8007608:	e7df      	b.n	80075ca <_printf_float+0x402>
 800760a:	2301      	movs	r3, #1
 800760c:	464a      	mov	r2, r9
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	f43f ae38 	beq.w	800728a <_printf_float+0xc2>
 800761a:	f108 0801 	add.w	r8, r8, #1
 800761e:	68e3      	ldr	r3, [r4, #12]
 8007620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007622:	1a5b      	subs	r3, r3, r1
 8007624:	4543      	cmp	r3, r8
 8007626:	dcf0      	bgt.n	800760a <_printf_float+0x442>
 8007628:	e6fa      	b.n	8007420 <_printf_float+0x258>
 800762a:	f04f 0800 	mov.w	r8, #0
 800762e:	f104 0919 	add.w	r9, r4, #25
 8007632:	e7f4      	b.n	800761e <_printf_float+0x456>

08007634 <_printf_common>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	4616      	mov	r6, r2
 800763a:	4699      	mov	r9, r3
 800763c:	688a      	ldr	r2, [r1, #8]
 800763e:	690b      	ldr	r3, [r1, #16]
 8007640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007644:	4293      	cmp	r3, r2
 8007646:	bfb8      	it	lt
 8007648:	4613      	movlt	r3, r2
 800764a:	6033      	str	r3, [r6, #0]
 800764c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007650:	4607      	mov	r7, r0
 8007652:	460c      	mov	r4, r1
 8007654:	b10a      	cbz	r2, 800765a <_printf_common+0x26>
 8007656:	3301      	adds	r3, #1
 8007658:	6033      	str	r3, [r6, #0]
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	0699      	lsls	r1, r3, #26
 800765e:	bf42      	ittt	mi
 8007660:	6833      	ldrmi	r3, [r6, #0]
 8007662:	3302      	addmi	r3, #2
 8007664:	6033      	strmi	r3, [r6, #0]
 8007666:	6825      	ldr	r5, [r4, #0]
 8007668:	f015 0506 	ands.w	r5, r5, #6
 800766c:	d106      	bne.n	800767c <_printf_common+0x48>
 800766e:	f104 0a19 	add.w	sl, r4, #25
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	6832      	ldr	r2, [r6, #0]
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	42ab      	cmp	r3, r5
 800767a:	dc26      	bgt.n	80076ca <_printf_common+0x96>
 800767c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007680:	1e13      	subs	r3, r2, #0
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	bf18      	it	ne
 8007686:	2301      	movne	r3, #1
 8007688:	0692      	lsls	r2, r2, #26
 800768a:	d42b      	bmi.n	80076e4 <_printf_common+0xb0>
 800768c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007690:	4649      	mov	r1, r9
 8007692:	4638      	mov	r0, r7
 8007694:	47c0      	blx	r8
 8007696:	3001      	adds	r0, #1
 8007698:	d01e      	beq.n	80076d8 <_printf_common+0xa4>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	68e5      	ldr	r5, [r4, #12]
 800769e:	6832      	ldr	r2, [r6, #0]
 80076a0:	f003 0306 	and.w	r3, r3, #6
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	bf08      	it	eq
 80076a8:	1aad      	subeq	r5, r5, r2
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	6922      	ldr	r2, [r4, #16]
 80076ae:	bf0c      	ite	eq
 80076b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b4:	2500      	movne	r5, #0
 80076b6:	4293      	cmp	r3, r2
 80076b8:	bfc4      	itt	gt
 80076ba:	1a9b      	subgt	r3, r3, r2
 80076bc:	18ed      	addgt	r5, r5, r3
 80076be:	2600      	movs	r6, #0
 80076c0:	341a      	adds	r4, #26
 80076c2:	42b5      	cmp	r5, r6
 80076c4:	d11a      	bne.n	80076fc <_printf_common+0xc8>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e008      	b.n	80076dc <_printf_common+0xa8>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4652      	mov	r2, sl
 80076ce:	4649      	mov	r1, r9
 80076d0:	4638      	mov	r0, r7
 80076d2:	47c0      	blx	r8
 80076d4:	3001      	adds	r0, #1
 80076d6:	d103      	bne.n	80076e0 <_printf_common+0xac>
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e0:	3501      	adds	r5, #1
 80076e2:	e7c6      	b.n	8007672 <_printf_common+0x3e>
 80076e4:	18e1      	adds	r1, r4, r3
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	2030      	movs	r0, #48	; 0x30
 80076ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ee:	4422      	add	r2, r4
 80076f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076f8:	3302      	adds	r3, #2
 80076fa:	e7c7      	b.n	800768c <_printf_common+0x58>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4622      	mov	r2, r4
 8007700:	4649      	mov	r1, r9
 8007702:	4638      	mov	r0, r7
 8007704:	47c0      	blx	r8
 8007706:	3001      	adds	r0, #1
 8007708:	d0e6      	beq.n	80076d8 <_printf_common+0xa4>
 800770a:	3601      	adds	r6, #1
 800770c:	e7d9      	b.n	80076c2 <_printf_common+0x8e>
	...

08007710 <_printf_i>:
 8007710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	7e0f      	ldrb	r7, [r1, #24]
 8007716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007718:	2f78      	cmp	r7, #120	; 0x78
 800771a:	4691      	mov	r9, r2
 800771c:	4680      	mov	r8, r0
 800771e:	460c      	mov	r4, r1
 8007720:	469a      	mov	sl, r3
 8007722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007726:	d807      	bhi.n	8007738 <_printf_i+0x28>
 8007728:	2f62      	cmp	r7, #98	; 0x62
 800772a:	d80a      	bhi.n	8007742 <_printf_i+0x32>
 800772c:	2f00      	cmp	r7, #0
 800772e:	f000 80d8 	beq.w	80078e2 <_printf_i+0x1d2>
 8007732:	2f58      	cmp	r7, #88	; 0x58
 8007734:	f000 80a3 	beq.w	800787e <_printf_i+0x16e>
 8007738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800773c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007740:	e03a      	b.n	80077b8 <_printf_i+0xa8>
 8007742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007746:	2b15      	cmp	r3, #21
 8007748:	d8f6      	bhi.n	8007738 <_printf_i+0x28>
 800774a:	a101      	add	r1, pc, #4	; (adr r1, 8007750 <_printf_i+0x40>)
 800774c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007750:	080077a9 	.word	0x080077a9
 8007754:	080077bd 	.word	0x080077bd
 8007758:	08007739 	.word	0x08007739
 800775c:	08007739 	.word	0x08007739
 8007760:	08007739 	.word	0x08007739
 8007764:	08007739 	.word	0x08007739
 8007768:	080077bd 	.word	0x080077bd
 800776c:	08007739 	.word	0x08007739
 8007770:	08007739 	.word	0x08007739
 8007774:	08007739 	.word	0x08007739
 8007778:	08007739 	.word	0x08007739
 800777c:	080078c9 	.word	0x080078c9
 8007780:	080077ed 	.word	0x080077ed
 8007784:	080078ab 	.word	0x080078ab
 8007788:	08007739 	.word	0x08007739
 800778c:	08007739 	.word	0x08007739
 8007790:	080078eb 	.word	0x080078eb
 8007794:	08007739 	.word	0x08007739
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007739 	.word	0x08007739
 80077a0:	08007739 	.word	0x08007739
 80077a4:	080078b3 	.word	0x080078b3
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	1d1a      	adds	r2, r3, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	602a      	str	r2, [r5, #0]
 80077b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0a3      	b.n	8007904 <_printf_i+0x1f4>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	6829      	ldr	r1, [r5, #0]
 80077c0:	0606      	lsls	r6, r0, #24
 80077c2:	f101 0304 	add.w	r3, r1, #4
 80077c6:	d50a      	bpl.n	80077de <_printf_i+0xce>
 80077c8:	680e      	ldr	r6, [r1, #0]
 80077ca:	602b      	str	r3, [r5, #0]
 80077cc:	2e00      	cmp	r6, #0
 80077ce:	da03      	bge.n	80077d8 <_printf_i+0xc8>
 80077d0:	232d      	movs	r3, #45	; 0x2d
 80077d2:	4276      	negs	r6, r6
 80077d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d8:	485e      	ldr	r0, [pc, #376]	; (8007954 <_printf_i+0x244>)
 80077da:	230a      	movs	r3, #10
 80077dc:	e019      	b.n	8007812 <_printf_i+0x102>
 80077de:	680e      	ldr	r6, [r1, #0]
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077e6:	bf18      	it	ne
 80077e8:	b236      	sxthne	r6, r6
 80077ea:	e7ef      	b.n	80077cc <_printf_i+0xbc>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	1d19      	adds	r1, r3, #4
 80077f2:	6029      	str	r1, [r5, #0]
 80077f4:	0601      	lsls	r1, r0, #24
 80077f6:	d501      	bpl.n	80077fc <_printf_i+0xec>
 80077f8:	681e      	ldr	r6, [r3, #0]
 80077fa:	e002      	b.n	8007802 <_printf_i+0xf2>
 80077fc:	0646      	lsls	r6, r0, #25
 80077fe:	d5fb      	bpl.n	80077f8 <_printf_i+0xe8>
 8007800:	881e      	ldrh	r6, [r3, #0]
 8007802:	4854      	ldr	r0, [pc, #336]	; (8007954 <_printf_i+0x244>)
 8007804:	2f6f      	cmp	r7, #111	; 0x6f
 8007806:	bf0c      	ite	eq
 8007808:	2308      	moveq	r3, #8
 800780a:	230a      	movne	r3, #10
 800780c:	2100      	movs	r1, #0
 800780e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007812:	6865      	ldr	r5, [r4, #4]
 8007814:	60a5      	str	r5, [r4, #8]
 8007816:	2d00      	cmp	r5, #0
 8007818:	bfa2      	ittt	ge
 800781a:	6821      	ldrge	r1, [r4, #0]
 800781c:	f021 0104 	bicge.w	r1, r1, #4
 8007820:	6021      	strge	r1, [r4, #0]
 8007822:	b90e      	cbnz	r6, 8007828 <_printf_i+0x118>
 8007824:	2d00      	cmp	r5, #0
 8007826:	d04d      	beq.n	80078c4 <_printf_i+0x1b4>
 8007828:	4615      	mov	r5, r2
 800782a:	fbb6 f1f3 	udiv	r1, r6, r3
 800782e:	fb03 6711 	mls	r7, r3, r1, r6
 8007832:	5dc7      	ldrb	r7, [r0, r7]
 8007834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007838:	4637      	mov	r7, r6
 800783a:	42bb      	cmp	r3, r7
 800783c:	460e      	mov	r6, r1
 800783e:	d9f4      	bls.n	800782a <_printf_i+0x11a>
 8007840:	2b08      	cmp	r3, #8
 8007842:	d10b      	bne.n	800785c <_printf_i+0x14c>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	07de      	lsls	r6, r3, #31
 8007848:	d508      	bpl.n	800785c <_printf_i+0x14c>
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	6861      	ldr	r1, [r4, #4]
 800784e:	4299      	cmp	r1, r3
 8007850:	bfde      	ittt	le
 8007852:	2330      	movle	r3, #48	; 0x30
 8007854:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007858:	f105 35ff 	addle.w	r5, r5, #4294967295
 800785c:	1b52      	subs	r2, r2, r5
 800785e:	6122      	str	r2, [r4, #16]
 8007860:	f8cd a000 	str.w	sl, [sp]
 8007864:	464b      	mov	r3, r9
 8007866:	aa03      	add	r2, sp, #12
 8007868:	4621      	mov	r1, r4
 800786a:	4640      	mov	r0, r8
 800786c:	f7ff fee2 	bl	8007634 <_printf_common>
 8007870:	3001      	adds	r0, #1
 8007872:	d14c      	bne.n	800790e <_printf_i+0x1fe>
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	b004      	add	sp, #16
 800787a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787e:	4835      	ldr	r0, [pc, #212]	; (8007954 <_printf_i+0x244>)
 8007880:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007884:	6829      	ldr	r1, [r5, #0]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	f851 6b04 	ldr.w	r6, [r1], #4
 800788c:	6029      	str	r1, [r5, #0]
 800788e:	061d      	lsls	r5, r3, #24
 8007890:	d514      	bpl.n	80078bc <_printf_i+0x1ac>
 8007892:	07df      	lsls	r7, r3, #31
 8007894:	bf44      	itt	mi
 8007896:	f043 0320 	orrmi.w	r3, r3, #32
 800789a:	6023      	strmi	r3, [r4, #0]
 800789c:	b91e      	cbnz	r6, 80078a6 <_printf_i+0x196>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	f023 0320 	bic.w	r3, r3, #32
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	2310      	movs	r3, #16
 80078a8:	e7b0      	b.n	800780c <_printf_i+0xfc>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	f043 0320 	orr.w	r3, r3, #32
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	2378      	movs	r3, #120	; 0x78
 80078b4:	4828      	ldr	r0, [pc, #160]	; (8007958 <_printf_i+0x248>)
 80078b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078ba:	e7e3      	b.n	8007884 <_printf_i+0x174>
 80078bc:	0659      	lsls	r1, r3, #25
 80078be:	bf48      	it	mi
 80078c0:	b2b6      	uxthmi	r6, r6
 80078c2:	e7e6      	b.n	8007892 <_printf_i+0x182>
 80078c4:	4615      	mov	r5, r2
 80078c6:	e7bb      	b.n	8007840 <_printf_i+0x130>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	6826      	ldr	r6, [r4, #0]
 80078cc:	6961      	ldr	r1, [r4, #20]
 80078ce:	1d18      	adds	r0, r3, #4
 80078d0:	6028      	str	r0, [r5, #0]
 80078d2:	0635      	lsls	r5, r6, #24
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	d501      	bpl.n	80078dc <_printf_i+0x1cc>
 80078d8:	6019      	str	r1, [r3, #0]
 80078da:	e002      	b.n	80078e2 <_printf_i+0x1d2>
 80078dc:	0670      	lsls	r0, r6, #25
 80078de:	d5fb      	bpl.n	80078d8 <_printf_i+0x1c8>
 80078e0:	8019      	strh	r1, [r3, #0]
 80078e2:	2300      	movs	r3, #0
 80078e4:	6123      	str	r3, [r4, #16]
 80078e6:	4615      	mov	r5, r2
 80078e8:	e7ba      	b.n	8007860 <_printf_i+0x150>
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	1d1a      	adds	r2, r3, #4
 80078ee:	602a      	str	r2, [r5, #0]
 80078f0:	681d      	ldr	r5, [r3, #0]
 80078f2:	6862      	ldr	r2, [r4, #4]
 80078f4:	2100      	movs	r1, #0
 80078f6:	4628      	mov	r0, r5
 80078f8:	f7f8 fc72 	bl	80001e0 <memchr>
 80078fc:	b108      	cbz	r0, 8007902 <_printf_i+0x1f2>
 80078fe:	1b40      	subs	r0, r0, r5
 8007900:	6060      	str	r0, [r4, #4]
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	6123      	str	r3, [r4, #16]
 8007906:	2300      	movs	r3, #0
 8007908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790c:	e7a8      	b.n	8007860 <_printf_i+0x150>
 800790e:	6923      	ldr	r3, [r4, #16]
 8007910:	462a      	mov	r2, r5
 8007912:	4649      	mov	r1, r9
 8007914:	4640      	mov	r0, r8
 8007916:	47d0      	blx	sl
 8007918:	3001      	adds	r0, #1
 800791a:	d0ab      	beq.n	8007874 <_printf_i+0x164>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	079b      	lsls	r3, r3, #30
 8007920:	d413      	bmi.n	800794a <_printf_i+0x23a>
 8007922:	68e0      	ldr	r0, [r4, #12]
 8007924:	9b03      	ldr	r3, [sp, #12]
 8007926:	4298      	cmp	r0, r3
 8007928:	bfb8      	it	lt
 800792a:	4618      	movlt	r0, r3
 800792c:	e7a4      	b.n	8007878 <_printf_i+0x168>
 800792e:	2301      	movs	r3, #1
 8007930:	4632      	mov	r2, r6
 8007932:	4649      	mov	r1, r9
 8007934:	4640      	mov	r0, r8
 8007936:	47d0      	blx	sl
 8007938:	3001      	adds	r0, #1
 800793a:	d09b      	beq.n	8007874 <_printf_i+0x164>
 800793c:	3501      	adds	r5, #1
 800793e:	68e3      	ldr	r3, [r4, #12]
 8007940:	9903      	ldr	r1, [sp, #12]
 8007942:	1a5b      	subs	r3, r3, r1
 8007944:	42ab      	cmp	r3, r5
 8007946:	dcf2      	bgt.n	800792e <_printf_i+0x21e>
 8007948:	e7eb      	b.n	8007922 <_printf_i+0x212>
 800794a:	2500      	movs	r5, #0
 800794c:	f104 0619 	add.w	r6, r4, #25
 8007950:	e7f5      	b.n	800793e <_printf_i+0x22e>
 8007952:	bf00      	nop
 8007954:	0800b2ba 	.word	0x0800b2ba
 8007958:	0800b2cb 	.word	0x0800b2cb

0800795c <siprintf>:
 800795c:	b40e      	push	{r1, r2, r3}
 800795e:	b500      	push	{lr}
 8007960:	b09c      	sub	sp, #112	; 0x70
 8007962:	ab1d      	add	r3, sp, #116	; 0x74
 8007964:	9002      	str	r0, [sp, #8]
 8007966:	9006      	str	r0, [sp, #24]
 8007968:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800796c:	4809      	ldr	r0, [pc, #36]	; (8007994 <siprintf+0x38>)
 800796e:	9107      	str	r1, [sp, #28]
 8007970:	9104      	str	r1, [sp, #16]
 8007972:	4909      	ldr	r1, [pc, #36]	; (8007998 <siprintf+0x3c>)
 8007974:	f853 2b04 	ldr.w	r2, [r3], #4
 8007978:	9105      	str	r1, [sp, #20]
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	a902      	add	r1, sp, #8
 8007980:	f001 fb78 	bl	8009074 <_svfiprintf_r>
 8007984:	9b02      	ldr	r3, [sp, #8]
 8007986:	2200      	movs	r2, #0
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	b01c      	add	sp, #112	; 0x70
 800798c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007990:	b003      	add	sp, #12
 8007992:	4770      	bx	lr
 8007994:	2000000c 	.word	0x2000000c
 8007998:	ffff0208 	.word	0xffff0208

0800799c <quorem>:
 800799c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	6903      	ldr	r3, [r0, #16]
 80079a2:	690c      	ldr	r4, [r1, #16]
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	4607      	mov	r7, r0
 80079a8:	f2c0 8081 	blt.w	8007aae <quorem+0x112>
 80079ac:	3c01      	subs	r4, #1
 80079ae:	f101 0814 	add.w	r8, r1, #20
 80079b2:	f100 0514 	add.w	r5, r0, #20
 80079b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c4:	3301      	adds	r3, #1
 80079c6:	429a      	cmp	r2, r3
 80079c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079d4:	d331      	bcc.n	8007a3a <quorem+0x9e>
 80079d6:	f04f 0e00 	mov.w	lr, #0
 80079da:	4640      	mov	r0, r8
 80079dc:	46ac      	mov	ip, r5
 80079de:	46f2      	mov	sl, lr
 80079e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80079e4:	b293      	uxth	r3, r2
 80079e6:	fb06 e303 	mla	r3, r6, r3, lr
 80079ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ebaa 0303 	sub.w	r3, sl, r3
 80079f4:	f8dc a000 	ldr.w	sl, [ip]
 80079f8:	0c12      	lsrs	r2, r2, #16
 80079fa:	fa13 f38a 	uxtah	r3, r3, sl
 80079fe:	fb06 e202 	mla	r2, r6, r2, lr
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	9b00      	ldr	r3, [sp, #0]
 8007a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a0a:	b292      	uxth	r2, r2
 8007a0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a18:	4581      	cmp	r9, r0
 8007a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a26:	d2db      	bcs.n	80079e0 <quorem+0x44>
 8007a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a2c:	b92b      	cbnz	r3, 8007a3a <quorem+0x9e>
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	3b04      	subs	r3, #4
 8007a32:	429d      	cmp	r5, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	d32e      	bcc.n	8007a96 <quorem+0xfa>
 8007a38:	613c      	str	r4, [r7, #16]
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	f001 f8c6 	bl	8008bcc <__mcmp>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	db24      	blt.n	8007a8e <quorem+0xf2>
 8007a44:	3601      	adds	r6, #1
 8007a46:	4628      	mov	r0, r5
 8007a48:	f04f 0c00 	mov.w	ip, #0
 8007a4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a50:	f8d0 e000 	ldr.w	lr, [r0]
 8007a54:	b293      	uxth	r3, r2
 8007a56:	ebac 0303 	sub.w	r3, ip, r3
 8007a5a:	0c12      	lsrs	r2, r2, #16
 8007a5c:	fa13 f38e 	uxtah	r3, r3, lr
 8007a60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a6e:	45c1      	cmp	r9, r8
 8007a70:	f840 3b04 	str.w	r3, [r0], #4
 8007a74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a78:	d2e8      	bcs.n	8007a4c <quorem+0xb0>
 8007a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a82:	b922      	cbnz	r2, 8007a8e <quorem+0xf2>
 8007a84:	3b04      	subs	r3, #4
 8007a86:	429d      	cmp	r5, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	d30a      	bcc.n	8007aa2 <quorem+0x106>
 8007a8c:	613c      	str	r4, [r7, #16]
 8007a8e:	4630      	mov	r0, r6
 8007a90:	b003      	add	sp, #12
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d1cc      	bne.n	8007a38 <quorem+0x9c>
 8007a9e:	3c01      	subs	r4, #1
 8007aa0:	e7c7      	b.n	8007a32 <quorem+0x96>
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	2a00      	cmp	r2, #0
 8007aa8:	d1f0      	bne.n	8007a8c <quorem+0xf0>
 8007aaa:	3c01      	subs	r4, #1
 8007aac:	e7eb      	b.n	8007a86 <quorem+0xea>
 8007aae:	2000      	movs	r0, #0
 8007ab0:	e7ee      	b.n	8007a90 <quorem+0xf4>
 8007ab2:	0000      	movs	r0, r0
 8007ab4:	0000      	movs	r0, r0
	...

08007ab8 <_dtoa_r>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	ed2d 8b04 	vpush	{d8-d9}
 8007ac0:	ec57 6b10 	vmov	r6, r7, d0
 8007ac4:	b093      	sub	sp, #76	; 0x4c
 8007ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007acc:	9106      	str	r1, [sp, #24]
 8007ace:	ee10 aa10 	vmov	sl, s0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ad8:	46bb      	mov	fp, r7
 8007ada:	b975      	cbnz	r5, 8007afa <_dtoa_r+0x42>
 8007adc:	2010      	movs	r0, #16
 8007ade:	f000 fddd 	bl	800869c <malloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ae6:	b920      	cbnz	r0, 8007af2 <_dtoa_r+0x3a>
 8007ae8:	4ba7      	ldr	r3, [pc, #668]	; (8007d88 <_dtoa_r+0x2d0>)
 8007aea:	21ea      	movs	r1, #234	; 0xea
 8007aec:	48a7      	ldr	r0, [pc, #668]	; (8007d8c <_dtoa_r+0x2d4>)
 8007aee:	f001 fbd1 	bl	8009294 <__assert_func>
 8007af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007af6:	6005      	str	r5, [r0, #0]
 8007af8:	60c5      	str	r5, [r0, #12]
 8007afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007afc:	6819      	ldr	r1, [r3, #0]
 8007afe:	b151      	cbz	r1, 8007b16 <_dtoa_r+0x5e>
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	604a      	str	r2, [r1, #4]
 8007b04:	2301      	movs	r3, #1
 8007b06:	4093      	lsls	r3, r2
 8007b08:	608b      	str	r3, [r1, #8]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fe1c 	bl	8008748 <_Bfree>
 8007b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	1e3b      	subs	r3, r7, #0
 8007b18:	bfaa      	itet	ge
 8007b1a:	2300      	movge	r3, #0
 8007b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b20:	f8c8 3000 	strge.w	r3, [r8]
 8007b24:	4b9a      	ldr	r3, [pc, #616]	; (8007d90 <_dtoa_r+0x2d8>)
 8007b26:	bfbc      	itt	lt
 8007b28:	2201      	movlt	r2, #1
 8007b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b2e:	ea33 030b 	bics.w	r3, r3, fp
 8007b32:	d11b      	bne.n	8007b6c <_dtoa_r+0xb4>
 8007b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b40:	4333      	orrs	r3, r6
 8007b42:	f000 8592 	beq.w	800866a <_dtoa_r+0xbb2>
 8007b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b48:	b963      	cbnz	r3, 8007b64 <_dtoa_r+0xac>
 8007b4a:	4b92      	ldr	r3, [pc, #584]	; (8007d94 <_dtoa_r+0x2dc>)
 8007b4c:	e022      	b.n	8007b94 <_dtoa_r+0xdc>
 8007b4e:	4b92      	ldr	r3, [pc, #584]	; (8007d98 <_dtoa_r+0x2e0>)
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	3308      	adds	r3, #8
 8007b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	9801      	ldr	r0, [sp, #4]
 8007b5a:	b013      	add	sp, #76	; 0x4c
 8007b5c:	ecbd 8b04 	vpop	{d8-d9}
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	4b8b      	ldr	r3, [pc, #556]	; (8007d94 <_dtoa_r+0x2dc>)
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	3303      	adds	r3, #3
 8007b6a:	e7f3      	b.n	8007b54 <_dtoa_r+0x9c>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2300      	movs	r3, #0
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	f7f8 ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b78:	ec4b ab19 	vmov	d9, sl, fp
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	b158      	cbz	r0, 8007b98 <_dtoa_r+0xe0>
 8007b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b82:	2301      	movs	r3, #1
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 856b 	beq.w	8008664 <_dtoa_r+0xbac>
 8007b8e:	4883      	ldr	r0, [pc, #524]	; (8007d9c <_dtoa_r+0x2e4>)
 8007b90:	6018      	str	r0, [r3, #0]
 8007b92:	1e43      	subs	r3, r0, #1
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	e7df      	b.n	8007b58 <_dtoa_r+0xa0>
 8007b98:	ec4b ab10 	vmov	d0, sl, fp
 8007b9c:	aa10      	add	r2, sp, #64	; 0x40
 8007b9e:	a911      	add	r1, sp, #68	; 0x44
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f001 f8b9 	bl	8008d18 <__d2b>
 8007ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007baa:	ee08 0a10 	vmov	s16, r0
 8007bae:	2d00      	cmp	r5, #0
 8007bb0:	f000 8084 	beq.w	8007cbc <_dtoa_r+0x204>
 8007bb4:	ee19 3a90 	vmov	r3, s19
 8007bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007bc0:	4656      	mov	r6, sl
 8007bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007bce:	4b74      	ldr	r3, [pc, #464]	; (8007da0 <_dtoa_r+0x2e8>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 fb57 	bl	8000288 <__aeabi_dsub>
 8007bda:	a365      	add	r3, pc, #404	; (adr r3, 8007d70 <_dtoa_r+0x2b8>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 fd0a 	bl	80005f8 <__aeabi_dmul>
 8007be4:	a364      	add	r3, pc, #400	; (adr r3, 8007d78 <_dtoa_r+0x2c0>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f7f8 fb4f 	bl	800028c <__adddf3>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	460f      	mov	r7, r1
 8007bf4:	f7f8 fc96 	bl	8000524 <__aeabi_i2d>
 8007bf8:	a361      	add	r3, pc, #388	; (adr r3, 8007d80 <_dtoa_r+0x2c8>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4630      	mov	r0, r6
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 fb3f 	bl	800028c <__adddf3>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460f      	mov	r7, r1
 8007c12:	f7f8 ffa1 	bl	8000b58 <__aeabi_d2iz>
 8007c16:	2200      	movs	r2, #0
 8007c18:	9000      	str	r0, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ff5c 	bl	8000adc <__aeabi_dcmplt>
 8007c24:	b150      	cbz	r0, 8007c3c <_dtoa_r+0x184>
 8007c26:	9800      	ldr	r0, [sp, #0]
 8007c28:	f7f8 fc7c 	bl	8000524 <__aeabi_i2d>
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	f7f8 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c34:	b910      	cbnz	r0, 8007c3c <_dtoa_r+0x184>
 8007c36:	9b00      	ldr	r3, [sp, #0]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	9b00      	ldr	r3, [sp, #0]
 8007c3e:	2b16      	cmp	r3, #22
 8007c40:	d85a      	bhi.n	8007cf8 <_dtoa_r+0x240>
 8007c42:	9a00      	ldr	r2, [sp, #0]
 8007c44:	4b57      	ldr	r3, [pc, #348]	; (8007da4 <_dtoa_r+0x2ec>)
 8007c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	ec51 0b19 	vmov	r0, r1, d9
 8007c52:	f7f8 ff43 	bl	8000adc <__aeabi_dcmplt>
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d050      	beq.n	8007cfc <_dtoa_r+0x244>
 8007c5a:	9b00      	ldr	r3, [sp, #0]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	2300      	movs	r3, #0
 8007c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c66:	1b5d      	subs	r5, r3, r5
 8007c68:	1e6b      	subs	r3, r5, #1
 8007c6a:	9305      	str	r3, [sp, #20]
 8007c6c:	bf45      	ittet	mi
 8007c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c72:	9304      	strmi	r3, [sp, #16]
 8007c74:	2300      	movpl	r3, #0
 8007c76:	2300      	movmi	r3, #0
 8007c78:	bf4c      	ite	mi
 8007c7a:	9305      	strmi	r3, [sp, #20]
 8007c7c:	9304      	strpl	r3, [sp, #16]
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	db3d      	blt.n	8007d00 <_dtoa_r+0x248>
 8007c84:	9b05      	ldr	r3, [sp, #20]
 8007c86:	9a00      	ldr	r2, [sp, #0]
 8007c88:	920a      	str	r2, [sp, #40]	; 0x28
 8007c8a:	4413      	add	r3, r2
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9307      	str	r3, [sp, #28]
 8007c92:	9b06      	ldr	r3, [sp, #24]
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	f200 8089 	bhi.w	8007dac <_dtoa_r+0x2f4>
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	bfc4      	itt	gt
 8007c9e:	3b04      	subgt	r3, #4
 8007ca0:	9306      	strgt	r3, [sp, #24]
 8007ca2:	9b06      	ldr	r3, [sp, #24]
 8007ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ca8:	bfcc      	ite	gt
 8007caa:	2500      	movgt	r5, #0
 8007cac:	2501      	movle	r5, #1
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	f200 8087 	bhi.w	8007dc2 <_dtoa_r+0x30a>
 8007cb4:	e8df f003 	tbb	[pc, r3]
 8007cb8:	59383a2d 	.word	0x59383a2d
 8007cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007cc0:	441d      	add	r5, r3
 8007cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	bfc1      	itttt	gt
 8007cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cda:	bfda      	itte	le
 8007cdc:	f1c3 0320 	rsble	r3, r3, #32
 8007ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ce4:	4318      	orrgt	r0, r3
 8007ce6:	f7f8 fc0d 	bl	8000504 <__aeabi_ui2d>
 8007cea:	2301      	movs	r3, #1
 8007cec:	4606      	mov	r6, r0
 8007cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cf2:	3d01      	subs	r5, #1
 8007cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf6:	e76a      	b.n	8007bce <_dtoa_r+0x116>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e7b2      	b.n	8007c62 <_dtoa_r+0x1aa>
 8007cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007cfe:	e7b1      	b.n	8007c64 <_dtoa_r+0x1ac>
 8007d00:	9b04      	ldr	r3, [sp, #16]
 8007d02:	9a00      	ldr	r2, [sp, #0]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	4253      	negs	r3, r2
 8007d0a:	9307      	str	r3, [sp, #28]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d10:	e7bf      	b.n	8007c92 <_dtoa_r+0x1da>
 8007d12:	2300      	movs	r3, #0
 8007d14:	9308      	str	r3, [sp, #32]
 8007d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dc55      	bgt.n	8007dc8 <_dtoa_r+0x310>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d22:	461a      	mov	r2, r3
 8007d24:	9209      	str	r2, [sp, #36]	; 0x24
 8007d26:	e00c      	b.n	8007d42 <_dtoa_r+0x28a>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e7f3      	b.n	8007d14 <_dtoa_r+0x25c>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	9b00      	ldr	r3, [sp, #0]
 8007d34:	4413      	add	r3, r2
 8007d36:	9302      	str	r3, [sp, #8]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	bfb8      	it	lt
 8007d40:	2301      	movlt	r3, #1
 8007d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d44:	2200      	movs	r2, #0
 8007d46:	6042      	str	r2, [r0, #4]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	f102 0614 	add.w	r6, r2, #20
 8007d4e:	429e      	cmp	r6, r3
 8007d50:	6841      	ldr	r1, [r0, #4]
 8007d52:	d93d      	bls.n	8007dd0 <_dtoa_r+0x318>
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fcb7 	bl	80086c8 <_Balloc>
 8007d5a:	9001      	str	r0, [sp, #4]
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d13b      	bne.n	8007dd8 <_dtoa_r+0x320>
 8007d60:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <_dtoa_r+0x2f0>)
 8007d62:	4602      	mov	r2, r0
 8007d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d68:	e6c0      	b.n	8007aec <_dtoa_r+0x34>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e7df      	b.n	8007d2e <_dtoa_r+0x276>
 8007d6e:	bf00      	nop
 8007d70:	636f4361 	.word	0x636f4361
 8007d74:	3fd287a7 	.word	0x3fd287a7
 8007d78:	8b60c8b3 	.word	0x8b60c8b3
 8007d7c:	3fc68a28 	.word	0x3fc68a28
 8007d80:	509f79fb 	.word	0x509f79fb
 8007d84:	3fd34413 	.word	0x3fd34413
 8007d88:	0800b2e9 	.word	0x0800b2e9
 8007d8c:	0800b300 	.word	0x0800b300
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	0800b2e5 	.word	0x0800b2e5
 8007d98:	0800b2dc 	.word	0x0800b2dc
 8007d9c:	0800b2b9 	.word	0x0800b2b9
 8007da0:	3ff80000 	.word	0x3ff80000
 8007da4:	0800b3f0 	.word	0x0800b3f0
 8007da8:	0800b35b 	.word	0x0800b35b
 8007dac:	2501      	movs	r5, #1
 8007dae:	2300      	movs	r3, #0
 8007db0:	9306      	str	r3, [sp, #24]
 8007db2:	9508      	str	r5, [sp, #32]
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295
 8007db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2312      	movs	r3, #18
 8007dc0:	e7b0      	b.n	8007d24 <_dtoa_r+0x26c>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	9308      	str	r3, [sp, #32]
 8007dc6:	e7f5      	b.n	8007db4 <_dtoa_r+0x2fc>
 8007dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dce:	e7b8      	b.n	8007d42 <_dtoa_r+0x28a>
 8007dd0:	3101      	adds	r1, #1
 8007dd2:	6041      	str	r1, [r0, #4]
 8007dd4:	0052      	lsls	r2, r2, #1
 8007dd6:	e7b8      	b.n	8007d4a <_dtoa_r+0x292>
 8007dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dda:	9a01      	ldr	r2, [sp, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	2b0e      	cmp	r3, #14
 8007de2:	f200 809d 	bhi.w	8007f20 <_dtoa_r+0x468>
 8007de6:	2d00      	cmp	r5, #0
 8007de8:	f000 809a 	beq.w	8007f20 <_dtoa_r+0x468>
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	dd32      	ble.n	8007e58 <_dtoa_r+0x3a0>
 8007df2:	4ab7      	ldr	r2, [pc, #732]	; (80080d0 <_dtoa_r+0x618>)
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	05d8      	lsls	r0, r3, #23
 8007e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e08:	d516      	bpl.n	8007e38 <_dtoa_r+0x380>
 8007e0a:	4bb2      	ldr	r3, [pc, #712]	; (80080d4 <_dtoa_r+0x61c>)
 8007e0c:	ec51 0b19 	vmov	r0, r1, d9
 8007e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e14:	f7f8 fd1a 	bl	800084c <__aeabi_ddiv>
 8007e18:	f007 070f 	and.w	r7, r7, #15
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	468b      	mov	fp, r1
 8007e20:	2503      	movs	r5, #3
 8007e22:	4eac      	ldr	r6, [pc, #688]	; (80080d4 <_dtoa_r+0x61c>)
 8007e24:	b957      	cbnz	r7, 8007e3c <_dtoa_r+0x384>
 8007e26:	4642      	mov	r2, r8
 8007e28:	464b      	mov	r3, r9
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	f7f8 fd0d 	bl	800084c <__aeabi_ddiv>
 8007e32:	4682      	mov	sl, r0
 8007e34:	468b      	mov	fp, r1
 8007e36:	e028      	b.n	8007e8a <_dtoa_r+0x3d2>
 8007e38:	2502      	movs	r5, #2
 8007e3a:	e7f2      	b.n	8007e22 <_dtoa_r+0x36a>
 8007e3c:	07f9      	lsls	r1, r7, #31
 8007e3e:	d508      	bpl.n	8007e52 <_dtoa_r+0x39a>
 8007e40:	4640      	mov	r0, r8
 8007e42:	4649      	mov	r1, r9
 8007e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	4680      	mov	r8, r0
 8007e50:	4689      	mov	r9, r1
 8007e52:	107f      	asrs	r7, r7, #1
 8007e54:	3608      	adds	r6, #8
 8007e56:	e7e5      	b.n	8007e24 <_dtoa_r+0x36c>
 8007e58:	f000 809b 	beq.w	8007f92 <_dtoa_r+0x4da>
 8007e5c:	9b00      	ldr	r3, [sp, #0]
 8007e5e:	4f9d      	ldr	r7, [pc, #628]	; (80080d4 <_dtoa_r+0x61c>)
 8007e60:	425e      	negs	r6, r3
 8007e62:	4b9b      	ldr	r3, [pc, #620]	; (80080d0 <_dtoa_r+0x618>)
 8007e64:	f006 020f 	and.w	r2, r6, #15
 8007e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	ec51 0b19 	vmov	r0, r1, d9
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	1136      	asrs	r6, r6, #4
 8007e7a:	4682      	mov	sl, r0
 8007e7c:	468b      	mov	fp, r1
 8007e7e:	2300      	movs	r3, #0
 8007e80:	2502      	movs	r5, #2
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	d17a      	bne.n	8007f7c <_dtoa_r+0x4c4>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1d3      	bne.n	8007e32 <_dtoa_r+0x37a>
 8007e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 8082 	beq.w	8007f96 <_dtoa_r+0x4de>
 8007e92:	4b91      	ldr	r3, [pc, #580]	; (80080d8 <_dtoa_r+0x620>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	4650      	mov	r0, sl
 8007e98:	4659      	mov	r1, fp
 8007e9a:	f7f8 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d079      	beq.n	8007f96 <_dtoa_r+0x4de>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d076      	beq.n	8007f96 <_dtoa_r+0x4de>
 8007ea8:	9b02      	ldr	r3, [sp, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	dd36      	ble.n	8007f1c <_dtoa_r+0x464>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	4650      	mov	r0, sl
 8007eb2:	4659      	mov	r1, fp
 8007eb4:	1e5f      	subs	r7, r3, #1
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4b88      	ldr	r3, [pc, #544]	; (80080dc <_dtoa_r+0x624>)
 8007eba:	f7f8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8007ebe:	9e02      	ldr	r6, [sp, #8]
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f7f8 fb2c 	bl	8000524 <__aeabi_i2d>
 8007ecc:	4652      	mov	r2, sl
 8007ece:	465b      	mov	r3, fp
 8007ed0:	f7f8 fb92 	bl	80005f8 <__aeabi_dmul>
 8007ed4:	4b82      	ldr	r3, [pc, #520]	; (80080e0 <_dtoa_r+0x628>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f7f8 f9d8 	bl	800028c <__adddf3>
 8007edc:	46d0      	mov	r8, sl
 8007ede:	46d9      	mov	r9, fp
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	d158      	bne.n	8007f9c <_dtoa_r+0x4e4>
 8007eea:	4b7e      	ldr	r3, [pc, #504]	; (80080e4 <_dtoa_r+0x62c>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	f7f8 f9c9 	bl	8000288 <__aeabi_dsub>
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	465b      	mov	r3, fp
 8007efa:	4680      	mov	r8, r0
 8007efc:	4689      	mov	r9, r1
 8007efe:	f7f8 fe0b 	bl	8000b18 <__aeabi_dcmpgt>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f040 8295 	bne.w	8008432 <_dtoa_r+0x97a>
 8007f08:	4652      	mov	r2, sl
 8007f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 fde3 	bl	8000adc <__aeabi_dcmplt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	f040 8289 	bne.w	800842e <_dtoa_r+0x976>
 8007f1c:	ec5b ab19 	vmov	sl, fp, d9
 8007f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f2c0 8148 	blt.w	80081b8 <_dtoa_r+0x700>
 8007f28:	9a00      	ldr	r2, [sp, #0]
 8007f2a:	2a0e      	cmp	r2, #14
 8007f2c:	f300 8144 	bgt.w	80081b8 <_dtoa_r+0x700>
 8007f30:	4b67      	ldr	r3, [pc, #412]	; (80080d0 <_dtoa_r+0x618>)
 8007f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f280 80d5 	bge.w	80080ec <_dtoa_r+0x634>
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f300 80d1 	bgt.w	80080ec <_dtoa_r+0x634>
 8007f4a:	f040 826f 	bne.w	800842c <_dtoa_r+0x974>
 8007f4e:	4b65      	ldr	r3, [pc, #404]	; (80080e4 <_dtoa_r+0x62c>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	4640      	mov	r0, r8
 8007f54:	4649      	mov	r1, r9
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	f7f8 fdd1 	bl	8000b04 <__aeabi_dcmpge>
 8007f62:	9e03      	ldr	r6, [sp, #12]
 8007f64:	4637      	mov	r7, r6
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f040 8245 	bne.w	80083f6 <_dtoa_r+0x93e>
 8007f6c:	9d01      	ldr	r5, [sp, #4]
 8007f6e:	2331      	movs	r3, #49	; 0x31
 8007f70:	f805 3b01 	strb.w	r3, [r5], #1
 8007f74:	9b00      	ldr	r3, [sp, #0]
 8007f76:	3301      	adds	r3, #1
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	e240      	b.n	80083fe <_dtoa_r+0x946>
 8007f7c:	07f2      	lsls	r2, r6, #31
 8007f7e:	d505      	bpl.n	8007f8c <_dtoa_r+0x4d4>
 8007f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f84:	f7f8 fb38 	bl	80005f8 <__aeabi_dmul>
 8007f88:	3501      	adds	r5, #1
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	1076      	asrs	r6, r6, #1
 8007f8e:	3708      	adds	r7, #8
 8007f90:	e777      	b.n	8007e82 <_dtoa_r+0x3ca>
 8007f92:	2502      	movs	r5, #2
 8007f94:	e779      	b.n	8007e8a <_dtoa_r+0x3d2>
 8007f96:	9f00      	ldr	r7, [sp, #0]
 8007f98:	9e03      	ldr	r6, [sp, #12]
 8007f9a:	e794      	b.n	8007ec6 <_dtoa_r+0x40e>
 8007f9c:	9901      	ldr	r1, [sp, #4]
 8007f9e:	4b4c      	ldr	r3, [pc, #304]	; (80080d0 <_dtoa_r+0x618>)
 8007fa0:	4431      	add	r1, r6
 8007fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8007fa4:	9908      	ldr	r1, [sp, #32]
 8007fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d043      	beq.n	800803a <_dtoa_r+0x582>
 8007fb2:	494d      	ldr	r1, [pc, #308]	; (80080e8 <_dtoa_r+0x630>)
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f7f8 fc49 	bl	800084c <__aeabi_ddiv>
 8007fba:	4652      	mov	r2, sl
 8007fbc:	465b      	mov	r3, fp
 8007fbe:	f7f8 f963 	bl	8000288 <__aeabi_dsub>
 8007fc2:	9d01      	ldr	r5, [sp, #4]
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	468b      	mov	fp, r1
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4640      	mov	r0, r8
 8007fcc:	f7f8 fdc4 	bl	8000b58 <__aeabi_d2iz>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	f7f8 faa7 	bl	8000524 <__aeabi_i2d>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4649      	mov	r1, r9
 8007fde:	f7f8 f953 	bl	8000288 <__aeabi_dsub>
 8007fe2:	3630      	adds	r6, #48	; 0x30
 8007fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8007fe8:	4652      	mov	r2, sl
 8007fea:	465b      	mov	r3, fp
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	f7f8 fd74 	bl	8000adc <__aeabi_dcmplt>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d163      	bne.n	80080c0 <_dtoa_r+0x608>
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	4936      	ldr	r1, [pc, #216]	; (80080d8 <_dtoa_r+0x620>)
 8007ffe:	2000      	movs	r0, #0
 8008000:	f7f8 f942 	bl	8000288 <__aeabi_dsub>
 8008004:	4652      	mov	r2, sl
 8008006:	465b      	mov	r3, fp
 8008008:	f7f8 fd68 	bl	8000adc <__aeabi_dcmplt>
 800800c:	2800      	cmp	r0, #0
 800800e:	f040 80b5 	bne.w	800817c <_dtoa_r+0x6c4>
 8008012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008014:	429d      	cmp	r5, r3
 8008016:	d081      	beq.n	8007f1c <_dtoa_r+0x464>
 8008018:	4b30      	ldr	r3, [pc, #192]	; (80080dc <_dtoa_r+0x624>)
 800801a:	2200      	movs	r2, #0
 800801c:	4650      	mov	r0, sl
 800801e:	4659      	mov	r1, fp
 8008020:	f7f8 faea 	bl	80005f8 <__aeabi_dmul>
 8008024:	4b2d      	ldr	r3, [pc, #180]	; (80080dc <_dtoa_r+0x624>)
 8008026:	4682      	mov	sl, r0
 8008028:	468b      	mov	fp, r1
 800802a:	4640      	mov	r0, r8
 800802c:	4649      	mov	r1, r9
 800802e:	2200      	movs	r2, #0
 8008030:	f7f8 fae2 	bl	80005f8 <__aeabi_dmul>
 8008034:	4680      	mov	r8, r0
 8008036:	4689      	mov	r9, r1
 8008038:	e7c6      	b.n	8007fc8 <_dtoa_r+0x510>
 800803a:	4650      	mov	r0, sl
 800803c:	4659      	mov	r1, fp
 800803e:	f7f8 fadb 	bl	80005f8 <__aeabi_dmul>
 8008042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008044:	9d01      	ldr	r5, [sp, #4]
 8008046:	930f      	str	r3, [sp, #60]	; 0x3c
 8008048:	4682      	mov	sl, r0
 800804a:	468b      	mov	fp, r1
 800804c:	4649      	mov	r1, r9
 800804e:	4640      	mov	r0, r8
 8008050:	f7f8 fd82 	bl	8000b58 <__aeabi_d2iz>
 8008054:	4606      	mov	r6, r0
 8008056:	f7f8 fa65 	bl	8000524 <__aeabi_i2d>
 800805a:	3630      	adds	r6, #48	; 0x30
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4640      	mov	r0, r8
 8008062:	4649      	mov	r1, r9
 8008064:	f7f8 f910 	bl	8000288 <__aeabi_dsub>
 8008068:	f805 6b01 	strb.w	r6, [r5], #1
 800806c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800806e:	429d      	cmp	r5, r3
 8008070:	4680      	mov	r8, r0
 8008072:	4689      	mov	r9, r1
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	d124      	bne.n	80080c4 <_dtoa_r+0x60c>
 800807a:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <_dtoa_r+0x630>)
 800807c:	4650      	mov	r0, sl
 800807e:	4659      	mov	r1, fp
 8008080:	f7f8 f904 	bl	800028c <__adddf3>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4640      	mov	r0, r8
 800808a:	4649      	mov	r1, r9
 800808c:	f7f8 fd44 	bl	8000b18 <__aeabi_dcmpgt>
 8008090:	2800      	cmp	r0, #0
 8008092:	d173      	bne.n	800817c <_dtoa_r+0x6c4>
 8008094:	4652      	mov	r2, sl
 8008096:	465b      	mov	r3, fp
 8008098:	4913      	ldr	r1, [pc, #76]	; (80080e8 <_dtoa_r+0x630>)
 800809a:	2000      	movs	r0, #0
 800809c:	f7f8 f8f4 	bl	8000288 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4640      	mov	r0, r8
 80080a6:	4649      	mov	r1, r9
 80080a8:	f7f8 fd18 	bl	8000adc <__aeabi_dcmplt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f43f af35 	beq.w	8007f1c <_dtoa_r+0x464>
 80080b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080b4:	1e6b      	subs	r3, r5, #1
 80080b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080bc:	2b30      	cmp	r3, #48	; 0x30
 80080be:	d0f8      	beq.n	80080b2 <_dtoa_r+0x5fa>
 80080c0:	9700      	str	r7, [sp, #0]
 80080c2:	e049      	b.n	8008158 <_dtoa_r+0x6a0>
 80080c4:	4b05      	ldr	r3, [pc, #20]	; (80080dc <_dtoa_r+0x624>)
 80080c6:	f7f8 fa97 	bl	80005f8 <__aeabi_dmul>
 80080ca:	4680      	mov	r8, r0
 80080cc:	4689      	mov	r9, r1
 80080ce:	e7bd      	b.n	800804c <_dtoa_r+0x594>
 80080d0:	0800b3f0 	.word	0x0800b3f0
 80080d4:	0800b3c8 	.word	0x0800b3c8
 80080d8:	3ff00000 	.word	0x3ff00000
 80080dc:	40240000 	.word	0x40240000
 80080e0:	401c0000 	.word	0x401c0000
 80080e4:	40140000 	.word	0x40140000
 80080e8:	3fe00000 	.word	0x3fe00000
 80080ec:	9d01      	ldr	r5, [sp, #4]
 80080ee:	4656      	mov	r6, sl
 80080f0:	465f      	mov	r7, fp
 80080f2:	4642      	mov	r2, r8
 80080f4:	464b      	mov	r3, r9
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 fba7 	bl	800084c <__aeabi_ddiv>
 80080fe:	f7f8 fd2b 	bl	8000b58 <__aeabi_d2iz>
 8008102:	4682      	mov	sl, r0
 8008104:	f7f8 fa0e 	bl	8000524 <__aeabi_i2d>
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	f7f8 fa74 	bl	80005f8 <__aeabi_dmul>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800811c:	f7f8 f8b4 	bl	8000288 <__aeabi_dsub>
 8008120:	f805 6b01 	strb.w	r6, [r5], #1
 8008124:	9e01      	ldr	r6, [sp, #4]
 8008126:	9f03      	ldr	r7, [sp, #12]
 8008128:	1bae      	subs	r6, r5, r6
 800812a:	42b7      	cmp	r7, r6
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	d135      	bne.n	800819e <_dtoa_r+0x6e6>
 8008132:	f7f8 f8ab 	bl	800028c <__adddf3>
 8008136:	4642      	mov	r2, r8
 8008138:	464b      	mov	r3, r9
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	f7f8 fceb 	bl	8000b18 <__aeabi_dcmpgt>
 8008142:	b9d0      	cbnz	r0, 800817a <_dtoa_r+0x6c2>
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008150:	b110      	cbz	r0, 8008158 <_dtoa_r+0x6a0>
 8008152:	f01a 0f01 	tst.w	sl, #1
 8008156:	d110      	bne.n	800817a <_dtoa_r+0x6c2>
 8008158:	4620      	mov	r0, r4
 800815a:	ee18 1a10 	vmov	r1, s16
 800815e:	f000 faf3 	bl	8008748 <_Bfree>
 8008162:	2300      	movs	r3, #0
 8008164:	9800      	ldr	r0, [sp, #0]
 8008166:	702b      	strb	r3, [r5, #0]
 8008168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800816a:	3001      	adds	r0, #1
 800816c:	6018      	str	r0, [r3, #0]
 800816e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008170:	2b00      	cmp	r3, #0
 8008172:	f43f acf1 	beq.w	8007b58 <_dtoa_r+0xa0>
 8008176:	601d      	str	r5, [r3, #0]
 8008178:	e4ee      	b.n	8007b58 <_dtoa_r+0xa0>
 800817a:	9f00      	ldr	r7, [sp, #0]
 800817c:	462b      	mov	r3, r5
 800817e:	461d      	mov	r5, r3
 8008180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008184:	2a39      	cmp	r2, #57	; 0x39
 8008186:	d106      	bne.n	8008196 <_dtoa_r+0x6de>
 8008188:	9a01      	ldr	r2, [sp, #4]
 800818a:	429a      	cmp	r2, r3
 800818c:	d1f7      	bne.n	800817e <_dtoa_r+0x6c6>
 800818e:	9901      	ldr	r1, [sp, #4]
 8008190:	2230      	movs	r2, #48	; 0x30
 8008192:	3701      	adds	r7, #1
 8008194:	700a      	strb	r2, [r1, #0]
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	3201      	adds	r2, #1
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e790      	b.n	80080c0 <_dtoa_r+0x608>
 800819e:	4ba6      	ldr	r3, [pc, #664]	; (8008438 <_dtoa_r+0x980>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	f7f8 fa29 	bl	80005f8 <__aeabi_dmul>
 80081a6:	2200      	movs	r2, #0
 80081a8:	2300      	movs	r3, #0
 80081aa:	4606      	mov	r6, r0
 80081ac:	460f      	mov	r7, r1
 80081ae:	f7f8 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d09d      	beq.n	80080f2 <_dtoa_r+0x63a>
 80081b6:	e7cf      	b.n	8008158 <_dtoa_r+0x6a0>
 80081b8:	9a08      	ldr	r2, [sp, #32]
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	f000 80d7 	beq.w	800836e <_dtoa_r+0x8b6>
 80081c0:	9a06      	ldr	r2, [sp, #24]
 80081c2:	2a01      	cmp	r2, #1
 80081c4:	f300 80ba 	bgt.w	800833c <_dtoa_r+0x884>
 80081c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	f000 80b2 	beq.w	8008334 <_dtoa_r+0x87c>
 80081d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081d4:	9e07      	ldr	r6, [sp, #28]
 80081d6:	9d04      	ldr	r5, [sp, #16]
 80081d8:	9a04      	ldr	r2, [sp, #16]
 80081da:	441a      	add	r2, r3
 80081dc:	9204      	str	r2, [sp, #16]
 80081de:	9a05      	ldr	r2, [sp, #20]
 80081e0:	2101      	movs	r1, #1
 80081e2:	441a      	add	r2, r3
 80081e4:	4620      	mov	r0, r4
 80081e6:	9205      	str	r2, [sp, #20]
 80081e8:	f000 fb66 	bl	80088b8 <__i2b>
 80081ec:	4607      	mov	r7, r0
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	dd0c      	ble.n	800820c <_dtoa_r+0x754>
 80081f2:	9b05      	ldr	r3, [sp, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dd09      	ble.n	800820c <_dtoa_r+0x754>
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	bfa8      	it	ge
 80081fe:	462b      	movge	r3, r5
 8008200:	1ad2      	subs	r2, r2, r3
 8008202:	9204      	str	r2, [sp, #16]
 8008204:	9a05      	ldr	r2, [sp, #20]
 8008206:	1aed      	subs	r5, r5, r3
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	b31b      	cbz	r3, 8008258 <_dtoa_r+0x7a0>
 8008210:	9b08      	ldr	r3, [sp, #32]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80af 	beq.w	8008376 <_dtoa_r+0x8be>
 8008218:	2e00      	cmp	r6, #0
 800821a:	dd13      	ble.n	8008244 <_dtoa_r+0x78c>
 800821c:	4639      	mov	r1, r7
 800821e:	4632      	mov	r2, r6
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fc09 	bl	8008a38 <__pow5mult>
 8008226:	ee18 2a10 	vmov	r2, s16
 800822a:	4601      	mov	r1, r0
 800822c:	4607      	mov	r7, r0
 800822e:	4620      	mov	r0, r4
 8008230:	f000 fb58 	bl	80088e4 <__multiply>
 8008234:	ee18 1a10 	vmov	r1, s16
 8008238:	4680      	mov	r8, r0
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fa84 	bl	8008748 <_Bfree>
 8008240:	ee08 8a10 	vmov	s16, r8
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	1b9a      	subs	r2, r3, r6
 8008248:	d006      	beq.n	8008258 <_dtoa_r+0x7a0>
 800824a:	ee18 1a10 	vmov	r1, s16
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fbf2 	bl	8008a38 <__pow5mult>
 8008254:	ee08 0a10 	vmov	s16, r0
 8008258:	2101      	movs	r1, #1
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fb2c 	bl	80088b8 <__i2b>
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	2b00      	cmp	r3, #0
 8008264:	4606      	mov	r6, r0
 8008266:	f340 8088 	ble.w	800837a <_dtoa_r+0x8c2>
 800826a:	461a      	mov	r2, r3
 800826c:	4601      	mov	r1, r0
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fbe2 	bl	8008a38 <__pow5mult>
 8008274:	9b06      	ldr	r3, [sp, #24]
 8008276:	2b01      	cmp	r3, #1
 8008278:	4606      	mov	r6, r0
 800827a:	f340 8081 	ble.w	8008380 <_dtoa_r+0x8c8>
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	6933      	ldr	r3, [r6, #16]
 8008284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008288:	6918      	ldr	r0, [r3, #16]
 800828a:	f000 fac5 	bl	8008818 <__hi0bits>
 800828e:	f1c0 0020 	rsb	r0, r0, #32
 8008292:	9b05      	ldr	r3, [sp, #20]
 8008294:	4418      	add	r0, r3
 8008296:	f010 001f 	ands.w	r0, r0, #31
 800829a:	f000 8092 	beq.w	80083c2 <_dtoa_r+0x90a>
 800829e:	f1c0 0320 	rsb	r3, r0, #32
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	f340 808a 	ble.w	80083bc <_dtoa_r+0x904>
 80082a8:	f1c0 001c 	rsb	r0, r0, #28
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	4403      	add	r3, r0
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	4403      	add	r3, r0
 80082b6:	4405      	add	r5, r0
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd07      	ble.n	80082d0 <_dtoa_r+0x818>
 80082c0:	ee18 1a10 	vmov	r1, s16
 80082c4:	461a      	mov	r2, r3
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 fc10 	bl	8008aec <__lshift>
 80082cc:	ee08 0a10 	vmov	s16, r0
 80082d0:	9b05      	ldr	r3, [sp, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd05      	ble.n	80082e2 <_dtoa_r+0x82a>
 80082d6:	4631      	mov	r1, r6
 80082d8:	461a      	mov	r2, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fc06 	bl	8008aec <__lshift>
 80082e0:	4606      	mov	r6, r0
 80082e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d06e      	beq.n	80083c6 <_dtoa_r+0x90e>
 80082e8:	ee18 0a10 	vmov	r0, s16
 80082ec:	4631      	mov	r1, r6
 80082ee:	f000 fc6d 	bl	8008bcc <__mcmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	da67      	bge.n	80083c6 <_dtoa_r+0x90e>
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	ee18 1a10 	vmov	r1, s16
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	220a      	movs	r2, #10
 8008302:	2300      	movs	r3, #0
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fa41 	bl	800878c <__multadd>
 800830a:	9b08      	ldr	r3, [sp, #32]
 800830c:	ee08 0a10 	vmov	s16, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 81b1 	beq.w	8008678 <_dtoa_r+0xbc0>
 8008316:	2300      	movs	r3, #0
 8008318:	4639      	mov	r1, r7
 800831a:	220a      	movs	r2, #10
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fa35 	bl	800878c <__multadd>
 8008322:	9b02      	ldr	r3, [sp, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	4607      	mov	r7, r0
 8008328:	f300 808e 	bgt.w	8008448 <_dtoa_r+0x990>
 800832c:	9b06      	ldr	r3, [sp, #24]
 800832e:	2b02      	cmp	r3, #2
 8008330:	dc51      	bgt.n	80083d6 <_dtoa_r+0x91e>
 8008332:	e089      	b.n	8008448 <_dtoa_r+0x990>
 8008334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800833a:	e74b      	b.n	80081d4 <_dtoa_r+0x71c>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1e5e      	subs	r6, r3, #1
 8008340:	9b07      	ldr	r3, [sp, #28]
 8008342:	42b3      	cmp	r3, r6
 8008344:	bfbf      	itttt	lt
 8008346:	9b07      	ldrlt	r3, [sp, #28]
 8008348:	9607      	strlt	r6, [sp, #28]
 800834a:	1af2      	sublt	r2, r6, r3
 800834c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800834e:	bfb6      	itet	lt
 8008350:	189b      	addlt	r3, r3, r2
 8008352:	1b9e      	subge	r6, r3, r6
 8008354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	bfb8      	it	lt
 800835a:	2600      	movlt	r6, #0
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfb7      	itett	lt
 8008360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008368:	1a9d      	sublt	r5, r3, r2
 800836a:	2300      	movlt	r3, #0
 800836c:	e734      	b.n	80081d8 <_dtoa_r+0x720>
 800836e:	9e07      	ldr	r6, [sp, #28]
 8008370:	9d04      	ldr	r5, [sp, #16]
 8008372:	9f08      	ldr	r7, [sp, #32]
 8008374:	e73b      	b.n	80081ee <_dtoa_r+0x736>
 8008376:	9a07      	ldr	r2, [sp, #28]
 8008378:	e767      	b.n	800824a <_dtoa_r+0x792>
 800837a:	9b06      	ldr	r3, [sp, #24]
 800837c:	2b01      	cmp	r3, #1
 800837e:	dc18      	bgt.n	80083b2 <_dtoa_r+0x8fa>
 8008380:	f1ba 0f00 	cmp.w	sl, #0
 8008384:	d115      	bne.n	80083b2 <_dtoa_r+0x8fa>
 8008386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800838a:	b993      	cbnz	r3, 80083b2 <_dtoa_r+0x8fa>
 800838c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008390:	0d1b      	lsrs	r3, r3, #20
 8008392:	051b      	lsls	r3, r3, #20
 8008394:	b183      	cbz	r3, 80083b8 <_dtoa_r+0x900>
 8008396:	9b04      	ldr	r3, [sp, #16]
 8008398:	3301      	adds	r3, #1
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	9b05      	ldr	r3, [sp, #20]
 800839e:	3301      	adds	r3, #1
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	f04f 0801 	mov.w	r8, #1
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f af6a 	bne.w	8008282 <_dtoa_r+0x7ca>
 80083ae:	2001      	movs	r0, #1
 80083b0:	e76f      	b.n	8008292 <_dtoa_r+0x7da>
 80083b2:	f04f 0800 	mov.w	r8, #0
 80083b6:	e7f6      	b.n	80083a6 <_dtoa_r+0x8ee>
 80083b8:	4698      	mov	r8, r3
 80083ba:	e7f4      	b.n	80083a6 <_dtoa_r+0x8ee>
 80083bc:	f43f af7d 	beq.w	80082ba <_dtoa_r+0x802>
 80083c0:	4618      	mov	r0, r3
 80083c2:	301c      	adds	r0, #28
 80083c4:	e772      	b.n	80082ac <_dtoa_r+0x7f4>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dc37      	bgt.n	800843c <_dtoa_r+0x984>
 80083cc:	9b06      	ldr	r3, [sp, #24]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	dd34      	ble.n	800843c <_dtoa_r+0x984>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	9b02      	ldr	r3, [sp, #8]
 80083d8:	b96b      	cbnz	r3, 80083f6 <_dtoa_r+0x93e>
 80083da:	4631      	mov	r1, r6
 80083dc:	2205      	movs	r2, #5
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 f9d4 	bl	800878c <__multadd>
 80083e4:	4601      	mov	r1, r0
 80083e6:	4606      	mov	r6, r0
 80083e8:	ee18 0a10 	vmov	r0, s16
 80083ec:	f000 fbee 	bl	8008bcc <__mcmp>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f73f adbb 	bgt.w	8007f6c <_dtoa_r+0x4b4>
 80083f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f8:	9d01      	ldr	r5, [sp, #4]
 80083fa:	43db      	mvns	r3, r3
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	f04f 0800 	mov.w	r8, #0
 8008402:	4631      	mov	r1, r6
 8008404:	4620      	mov	r0, r4
 8008406:	f000 f99f 	bl	8008748 <_Bfree>
 800840a:	2f00      	cmp	r7, #0
 800840c:	f43f aea4 	beq.w	8008158 <_dtoa_r+0x6a0>
 8008410:	f1b8 0f00 	cmp.w	r8, #0
 8008414:	d005      	beq.n	8008422 <_dtoa_r+0x96a>
 8008416:	45b8      	cmp	r8, r7
 8008418:	d003      	beq.n	8008422 <_dtoa_r+0x96a>
 800841a:	4641      	mov	r1, r8
 800841c:	4620      	mov	r0, r4
 800841e:	f000 f993 	bl	8008748 <_Bfree>
 8008422:	4639      	mov	r1, r7
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f98f 	bl	8008748 <_Bfree>
 800842a:	e695      	b.n	8008158 <_dtoa_r+0x6a0>
 800842c:	2600      	movs	r6, #0
 800842e:	4637      	mov	r7, r6
 8008430:	e7e1      	b.n	80083f6 <_dtoa_r+0x93e>
 8008432:	9700      	str	r7, [sp, #0]
 8008434:	4637      	mov	r7, r6
 8008436:	e599      	b.n	8007f6c <_dtoa_r+0x4b4>
 8008438:	40240000 	.word	0x40240000
 800843c:	9b08      	ldr	r3, [sp, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 80ca 	beq.w	80085d8 <_dtoa_r+0xb20>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	9302      	str	r3, [sp, #8]
 8008448:	2d00      	cmp	r5, #0
 800844a:	dd05      	ble.n	8008458 <_dtoa_r+0x9a0>
 800844c:	4639      	mov	r1, r7
 800844e:	462a      	mov	r2, r5
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fb4b 	bl	8008aec <__lshift>
 8008456:	4607      	mov	r7, r0
 8008458:	f1b8 0f00 	cmp.w	r8, #0
 800845c:	d05b      	beq.n	8008516 <_dtoa_r+0xa5e>
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4620      	mov	r0, r4
 8008462:	f000 f931 	bl	80086c8 <_Balloc>
 8008466:	4605      	mov	r5, r0
 8008468:	b928      	cbnz	r0, 8008476 <_dtoa_r+0x9be>
 800846a:	4b87      	ldr	r3, [pc, #540]	; (8008688 <_dtoa_r+0xbd0>)
 800846c:	4602      	mov	r2, r0
 800846e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008472:	f7ff bb3b 	b.w	8007aec <_dtoa_r+0x34>
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	3202      	adds	r2, #2
 800847a:	0092      	lsls	r2, r2, #2
 800847c:	f107 010c 	add.w	r1, r7, #12
 8008480:	300c      	adds	r0, #12
 8008482:	f000 f913 	bl	80086ac <memcpy>
 8008486:	2201      	movs	r2, #1
 8008488:	4629      	mov	r1, r5
 800848a:	4620      	mov	r0, r4
 800848c:	f000 fb2e 	bl	8008aec <__lshift>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	f103 0901 	add.w	r9, r3, #1
 8008496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800849a:	4413      	add	r3, r2
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	f00a 0301 	and.w	r3, sl, #1
 80084a2:	46b8      	mov	r8, r7
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	4607      	mov	r7, r0
 80084a8:	4631      	mov	r1, r6
 80084aa:	ee18 0a10 	vmov	r0, s16
 80084ae:	f7ff fa75 	bl	800799c <quorem>
 80084b2:	4641      	mov	r1, r8
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084ba:	ee18 0a10 	vmov	r0, s16
 80084be:	f000 fb85 	bl	8008bcc <__mcmp>
 80084c2:	463a      	mov	r2, r7
 80084c4:	9003      	str	r0, [sp, #12]
 80084c6:	4631      	mov	r1, r6
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fb9b 	bl	8008c04 <__mdiff>
 80084ce:	68c2      	ldr	r2, [r0, #12]
 80084d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80084d4:	4605      	mov	r5, r0
 80084d6:	bb02      	cbnz	r2, 800851a <_dtoa_r+0xa62>
 80084d8:	4601      	mov	r1, r0
 80084da:	ee18 0a10 	vmov	r0, s16
 80084de:	f000 fb75 	bl	8008bcc <__mcmp>
 80084e2:	4602      	mov	r2, r0
 80084e4:	4629      	mov	r1, r5
 80084e6:	4620      	mov	r0, r4
 80084e8:	9207      	str	r2, [sp, #28]
 80084ea:	f000 f92d 	bl	8008748 <_Bfree>
 80084ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80084f2:	ea43 0102 	orr.w	r1, r3, r2
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	430b      	orrs	r3, r1
 80084fa:	464d      	mov	r5, r9
 80084fc:	d10f      	bne.n	800851e <_dtoa_r+0xa66>
 80084fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008502:	d02a      	beq.n	800855a <_dtoa_r+0xaa2>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd02      	ble.n	8008510 <_dtoa_r+0xa58>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008510:	f88b a000 	strb.w	sl, [fp]
 8008514:	e775      	b.n	8008402 <_dtoa_r+0x94a>
 8008516:	4638      	mov	r0, r7
 8008518:	e7ba      	b.n	8008490 <_dtoa_r+0x9d8>
 800851a:	2201      	movs	r2, #1
 800851c:	e7e2      	b.n	80084e4 <_dtoa_r+0xa2c>
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	db04      	blt.n	800852e <_dtoa_r+0xa76>
 8008524:	9906      	ldr	r1, [sp, #24]
 8008526:	430b      	orrs	r3, r1
 8008528:	9904      	ldr	r1, [sp, #16]
 800852a:	430b      	orrs	r3, r1
 800852c:	d122      	bne.n	8008574 <_dtoa_r+0xabc>
 800852e:	2a00      	cmp	r2, #0
 8008530:	ddee      	ble.n	8008510 <_dtoa_r+0xa58>
 8008532:	ee18 1a10 	vmov	r1, s16
 8008536:	2201      	movs	r2, #1
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fad7 	bl	8008aec <__lshift>
 800853e:	4631      	mov	r1, r6
 8008540:	ee08 0a10 	vmov	s16, r0
 8008544:	f000 fb42 	bl	8008bcc <__mcmp>
 8008548:	2800      	cmp	r0, #0
 800854a:	dc03      	bgt.n	8008554 <_dtoa_r+0xa9c>
 800854c:	d1e0      	bne.n	8008510 <_dtoa_r+0xa58>
 800854e:	f01a 0f01 	tst.w	sl, #1
 8008552:	d0dd      	beq.n	8008510 <_dtoa_r+0xa58>
 8008554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008558:	d1d7      	bne.n	800850a <_dtoa_r+0xa52>
 800855a:	2339      	movs	r3, #57	; 0x39
 800855c:	f88b 3000 	strb.w	r3, [fp]
 8008560:	462b      	mov	r3, r5
 8008562:	461d      	mov	r5, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800856a:	2a39      	cmp	r2, #57	; 0x39
 800856c:	d071      	beq.n	8008652 <_dtoa_r+0xb9a>
 800856e:	3201      	adds	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e746      	b.n	8008402 <_dtoa_r+0x94a>
 8008574:	2a00      	cmp	r2, #0
 8008576:	dd07      	ble.n	8008588 <_dtoa_r+0xad0>
 8008578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800857c:	d0ed      	beq.n	800855a <_dtoa_r+0xaa2>
 800857e:	f10a 0301 	add.w	r3, sl, #1
 8008582:	f88b 3000 	strb.w	r3, [fp]
 8008586:	e73c      	b.n	8008402 <_dtoa_r+0x94a>
 8008588:	9b05      	ldr	r3, [sp, #20]
 800858a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800858e:	4599      	cmp	r9, r3
 8008590:	d047      	beq.n	8008622 <_dtoa_r+0xb6a>
 8008592:	ee18 1a10 	vmov	r1, s16
 8008596:	2300      	movs	r3, #0
 8008598:	220a      	movs	r2, #10
 800859a:	4620      	mov	r0, r4
 800859c:	f000 f8f6 	bl	800878c <__multadd>
 80085a0:	45b8      	cmp	r8, r7
 80085a2:	ee08 0a10 	vmov	s16, r0
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	f04f 020a 	mov.w	r2, #10
 80085ae:	4641      	mov	r1, r8
 80085b0:	4620      	mov	r0, r4
 80085b2:	d106      	bne.n	80085c2 <_dtoa_r+0xb0a>
 80085b4:	f000 f8ea 	bl	800878c <__multadd>
 80085b8:	4680      	mov	r8, r0
 80085ba:	4607      	mov	r7, r0
 80085bc:	f109 0901 	add.w	r9, r9, #1
 80085c0:	e772      	b.n	80084a8 <_dtoa_r+0x9f0>
 80085c2:	f000 f8e3 	bl	800878c <__multadd>
 80085c6:	4639      	mov	r1, r7
 80085c8:	4680      	mov	r8, r0
 80085ca:	2300      	movs	r3, #0
 80085cc:	220a      	movs	r2, #10
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 f8dc 	bl	800878c <__multadd>
 80085d4:	4607      	mov	r7, r0
 80085d6:	e7f1      	b.n	80085bc <_dtoa_r+0xb04>
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	9302      	str	r3, [sp, #8]
 80085dc:	9d01      	ldr	r5, [sp, #4]
 80085de:	ee18 0a10 	vmov	r0, s16
 80085e2:	4631      	mov	r1, r6
 80085e4:	f7ff f9da 	bl	800799c <quorem>
 80085e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	f805 ab01 	strb.w	sl, [r5], #1
 80085f2:	1aea      	subs	r2, r5, r3
 80085f4:	9b02      	ldr	r3, [sp, #8]
 80085f6:	4293      	cmp	r3, r2
 80085f8:	dd09      	ble.n	800860e <_dtoa_r+0xb56>
 80085fa:	ee18 1a10 	vmov	r1, s16
 80085fe:	2300      	movs	r3, #0
 8008600:	220a      	movs	r2, #10
 8008602:	4620      	mov	r0, r4
 8008604:	f000 f8c2 	bl	800878c <__multadd>
 8008608:	ee08 0a10 	vmov	s16, r0
 800860c:	e7e7      	b.n	80085de <_dtoa_r+0xb26>
 800860e:	9b02      	ldr	r3, [sp, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	bfc8      	it	gt
 8008614:	461d      	movgt	r5, r3
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	bfd8      	it	le
 800861a:	2501      	movle	r5, #1
 800861c:	441d      	add	r5, r3
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	ee18 1a10 	vmov	r1, s16
 8008626:	2201      	movs	r2, #1
 8008628:	4620      	mov	r0, r4
 800862a:	f000 fa5f 	bl	8008aec <__lshift>
 800862e:	4631      	mov	r1, r6
 8008630:	ee08 0a10 	vmov	s16, r0
 8008634:	f000 faca 	bl	8008bcc <__mcmp>
 8008638:	2800      	cmp	r0, #0
 800863a:	dc91      	bgt.n	8008560 <_dtoa_r+0xaa8>
 800863c:	d102      	bne.n	8008644 <_dtoa_r+0xb8c>
 800863e:	f01a 0f01 	tst.w	sl, #1
 8008642:	d18d      	bne.n	8008560 <_dtoa_r+0xaa8>
 8008644:	462b      	mov	r3, r5
 8008646:	461d      	mov	r5, r3
 8008648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800864c:	2a30      	cmp	r2, #48	; 0x30
 800864e:	d0fa      	beq.n	8008646 <_dtoa_r+0xb8e>
 8008650:	e6d7      	b.n	8008402 <_dtoa_r+0x94a>
 8008652:	9a01      	ldr	r2, [sp, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d184      	bne.n	8008562 <_dtoa_r+0xaaa>
 8008658:	9b00      	ldr	r3, [sp, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2331      	movs	r3, #49	; 0x31
 8008660:	7013      	strb	r3, [r2, #0]
 8008662:	e6ce      	b.n	8008402 <_dtoa_r+0x94a>
 8008664:	4b09      	ldr	r3, [pc, #36]	; (800868c <_dtoa_r+0xbd4>)
 8008666:	f7ff ba95 	b.w	8007b94 <_dtoa_r+0xdc>
 800866a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800866c:	2b00      	cmp	r3, #0
 800866e:	f47f aa6e 	bne.w	8007b4e <_dtoa_r+0x96>
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <_dtoa_r+0xbd8>)
 8008674:	f7ff ba8e 	b.w	8007b94 <_dtoa_r+0xdc>
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	dcae      	bgt.n	80085dc <_dtoa_r+0xb24>
 800867e:	9b06      	ldr	r3, [sp, #24]
 8008680:	2b02      	cmp	r3, #2
 8008682:	f73f aea8 	bgt.w	80083d6 <_dtoa_r+0x91e>
 8008686:	e7a9      	b.n	80085dc <_dtoa_r+0xb24>
 8008688:	0800b35b 	.word	0x0800b35b
 800868c:	0800b2b8 	.word	0x0800b2b8
 8008690:	0800b2dc 	.word	0x0800b2dc

08008694 <_localeconv_r>:
 8008694:	4800      	ldr	r0, [pc, #0]	; (8008698 <_localeconv_r+0x4>)
 8008696:	4770      	bx	lr
 8008698:	20000160 	.word	0x20000160

0800869c <malloc>:
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <malloc+0xc>)
 800869e:	4601      	mov	r1, r0
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	f000 bc17 	b.w	8008ed4 <_malloc_r>
 80086a6:	bf00      	nop
 80086a8:	2000000c 	.word	0x2000000c

080086ac <memcpy>:
 80086ac:	440a      	add	r2, r1
 80086ae:	4291      	cmp	r1, r2
 80086b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086b4:	d100      	bne.n	80086b8 <memcpy+0xc>
 80086b6:	4770      	bx	lr
 80086b8:	b510      	push	{r4, lr}
 80086ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086c2:	4291      	cmp	r1, r2
 80086c4:	d1f9      	bne.n	80086ba <memcpy+0xe>
 80086c6:	bd10      	pop	{r4, pc}

080086c8 <_Balloc>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	b976      	cbnz	r6, 80086f0 <_Balloc+0x28>
 80086d2:	2010      	movs	r0, #16
 80086d4:	f7ff ffe2 	bl	800869c <malloc>
 80086d8:	4602      	mov	r2, r0
 80086da:	6260      	str	r0, [r4, #36]	; 0x24
 80086dc:	b920      	cbnz	r0, 80086e8 <_Balloc+0x20>
 80086de:	4b18      	ldr	r3, [pc, #96]	; (8008740 <_Balloc+0x78>)
 80086e0:	4818      	ldr	r0, [pc, #96]	; (8008744 <_Balloc+0x7c>)
 80086e2:	2166      	movs	r1, #102	; 0x66
 80086e4:	f000 fdd6 	bl	8009294 <__assert_func>
 80086e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ec:	6006      	str	r6, [r0, #0]
 80086ee:	60c6      	str	r6, [r0, #12]
 80086f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086f2:	68f3      	ldr	r3, [r6, #12]
 80086f4:	b183      	cbz	r3, 8008718 <_Balloc+0x50>
 80086f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086fe:	b9b8      	cbnz	r0, 8008730 <_Balloc+0x68>
 8008700:	2101      	movs	r1, #1
 8008702:	fa01 f605 	lsl.w	r6, r1, r5
 8008706:	1d72      	adds	r2, r6, #5
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fb60 	bl	8008dd0 <_calloc_r>
 8008710:	b160      	cbz	r0, 800872c <_Balloc+0x64>
 8008712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008716:	e00e      	b.n	8008736 <_Balloc+0x6e>
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	2104      	movs	r1, #4
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fb57 	bl	8008dd0 <_calloc_r>
 8008722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008724:	60f0      	str	r0, [r6, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e4      	bne.n	80086f6 <_Balloc+0x2e>
 800872c:	2000      	movs	r0, #0
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	6802      	ldr	r2, [r0, #0]
 8008732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008736:	2300      	movs	r3, #0
 8008738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800873c:	e7f7      	b.n	800872e <_Balloc+0x66>
 800873e:	bf00      	nop
 8008740:	0800b2e9 	.word	0x0800b2e9
 8008744:	0800b36c 	.word	0x0800b36c

08008748 <_Bfree>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	b976      	cbnz	r6, 8008770 <_Bfree+0x28>
 8008752:	2010      	movs	r0, #16
 8008754:	f7ff ffa2 	bl	800869c <malloc>
 8008758:	4602      	mov	r2, r0
 800875a:	6268      	str	r0, [r5, #36]	; 0x24
 800875c:	b920      	cbnz	r0, 8008768 <_Bfree+0x20>
 800875e:	4b09      	ldr	r3, [pc, #36]	; (8008784 <_Bfree+0x3c>)
 8008760:	4809      	ldr	r0, [pc, #36]	; (8008788 <_Bfree+0x40>)
 8008762:	218a      	movs	r1, #138	; 0x8a
 8008764:	f000 fd96 	bl	8009294 <__assert_func>
 8008768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800876c:	6006      	str	r6, [r0, #0]
 800876e:	60c6      	str	r6, [r0, #12]
 8008770:	b13c      	cbz	r4, 8008782 <_Bfree+0x3a>
 8008772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800877c:	6021      	str	r1, [r4, #0]
 800877e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	0800b2e9 	.word	0x0800b2e9
 8008788:	0800b36c 	.word	0x0800b36c

0800878c <__multadd>:
 800878c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	690d      	ldr	r5, [r1, #16]
 8008792:	4607      	mov	r7, r0
 8008794:	460c      	mov	r4, r1
 8008796:	461e      	mov	r6, r3
 8008798:	f101 0c14 	add.w	ip, r1, #20
 800879c:	2000      	movs	r0, #0
 800879e:	f8dc 3000 	ldr.w	r3, [ip]
 80087a2:	b299      	uxth	r1, r3
 80087a4:	fb02 6101 	mla	r1, r2, r1, r6
 80087a8:	0c1e      	lsrs	r6, r3, #16
 80087aa:	0c0b      	lsrs	r3, r1, #16
 80087ac:	fb02 3306 	mla	r3, r2, r6, r3
 80087b0:	b289      	uxth	r1, r1
 80087b2:	3001      	adds	r0, #1
 80087b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087b8:	4285      	cmp	r5, r0
 80087ba:	f84c 1b04 	str.w	r1, [ip], #4
 80087be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087c2:	dcec      	bgt.n	800879e <__multadd+0x12>
 80087c4:	b30e      	cbz	r6, 800880a <__multadd+0x7e>
 80087c6:	68a3      	ldr	r3, [r4, #8]
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	dc19      	bgt.n	8008800 <__multadd+0x74>
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	4638      	mov	r0, r7
 80087d0:	3101      	adds	r1, #1
 80087d2:	f7ff ff79 	bl	80086c8 <_Balloc>
 80087d6:	4680      	mov	r8, r0
 80087d8:	b928      	cbnz	r0, 80087e6 <__multadd+0x5a>
 80087da:	4602      	mov	r2, r0
 80087dc:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <__multadd+0x84>)
 80087de:	480d      	ldr	r0, [pc, #52]	; (8008814 <__multadd+0x88>)
 80087e0:	21b5      	movs	r1, #181	; 0xb5
 80087e2:	f000 fd57 	bl	8009294 <__assert_func>
 80087e6:	6922      	ldr	r2, [r4, #16]
 80087e8:	3202      	adds	r2, #2
 80087ea:	f104 010c 	add.w	r1, r4, #12
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	300c      	adds	r0, #12
 80087f2:	f7ff ff5b 	bl	80086ac <memcpy>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff ffa5 	bl	8008748 <_Bfree>
 80087fe:	4644      	mov	r4, r8
 8008800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008804:	3501      	adds	r5, #1
 8008806:	615e      	str	r6, [r3, #20]
 8008808:	6125      	str	r5, [r4, #16]
 800880a:	4620      	mov	r0, r4
 800880c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008810:	0800b35b 	.word	0x0800b35b
 8008814:	0800b36c 	.word	0x0800b36c

08008818 <__hi0bits>:
 8008818:	0c03      	lsrs	r3, r0, #16
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	b9d3      	cbnz	r3, 8008854 <__hi0bits+0x3c>
 800881e:	0400      	lsls	r0, r0, #16
 8008820:	2310      	movs	r3, #16
 8008822:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008826:	bf04      	itt	eq
 8008828:	0200      	lsleq	r0, r0, #8
 800882a:	3308      	addeq	r3, #8
 800882c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008830:	bf04      	itt	eq
 8008832:	0100      	lsleq	r0, r0, #4
 8008834:	3304      	addeq	r3, #4
 8008836:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800883a:	bf04      	itt	eq
 800883c:	0080      	lsleq	r0, r0, #2
 800883e:	3302      	addeq	r3, #2
 8008840:	2800      	cmp	r0, #0
 8008842:	db05      	blt.n	8008850 <__hi0bits+0x38>
 8008844:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008848:	f103 0301 	add.w	r3, r3, #1
 800884c:	bf08      	it	eq
 800884e:	2320      	moveq	r3, #32
 8008850:	4618      	mov	r0, r3
 8008852:	4770      	bx	lr
 8008854:	2300      	movs	r3, #0
 8008856:	e7e4      	b.n	8008822 <__hi0bits+0xa>

08008858 <__lo0bits>:
 8008858:	6803      	ldr	r3, [r0, #0]
 800885a:	f013 0207 	ands.w	r2, r3, #7
 800885e:	4601      	mov	r1, r0
 8008860:	d00b      	beq.n	800887a <__lo0bits+0x22>
 8008862:	07da      	lsls	r2, r3, #31
 8008864:	d423      	bmi.n	80088ae <__lo0bits+0x56>
 8008866:	0798      	lsls	r0, r3, #30
 8008868:	bf49      	itett	mi
 800886a:	085b      	lsrmi	r3, r3, #1
 800886c:	089b      	lsrpl	r3, r3, #2
 800886e:	2001      	movmi	r0, #1
 8008870:	600b      	strmi	r3, [r1, #0]
 8008872:	bf5c      	itt	pl
 8008874:	600b      	strpl	r3, [r1, #0]
 8008876:	2002      	movpl	r0, #2
 8008878:	4770      	bx	lr
 800887a:	b298      	uxth	r0, r3
 800887c:	b9a8      	cbnz	r0, 80088aa <__lo0bits+0x52>
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	2010      	movs	r0, #16
 8008882:	b2da      	uxtb	r2, r3
 8008884:	b90a      	cbnz	r2, 800888a <__lo0bits+0x32>
 8008886:	3008      	adds	r0, #8
 8008888:	0a1b      	lsrs	r3, r3, #8
 800888a:	071a      	lsls	r2, r3, #28
 800888c:	bf04      	itt	eq
 800888e:	091b      	lsreq	r3, r3, #4
 8008890:	3004      	addeq	r0, #4
 8008892:	079a      	lsls	r2, r3, #30
 8008894:	bf04      	itt	eq
 8008896:	089b      	lsreq	r3, r3, #2
 8008898:	3002      	addeq	r0, #2
 800889a:	07da      	lsls	r2, r3, #31
 800889c:	d403      	bmi.n	80088a6 <__lo0bits+0x4e>
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	f100 0001 	add.w	r0, r0, #1
 80088a4:	d005      	beq.n	80088b2 <__lo0bits+0x5a>
 80088a6:	600b      	str	r3, [r1, #0]
 80088a8:	4770      	bx	lr
 80088aa:	4610      	mov	r0, r2
 80088ac:	e7e9      	b.n	8008882 <__lo0bits+0x2a>
 80088ae:	2000      	movs	r0, #0
 80088b0:	4770      	bx	lr
 80088b2:	2020      	movs	r0, #32
 80088b4:	4770      	bx	lr
	...

080088b8 <__i2b>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	460c      	mov	r4, r1
 80088bc:	2101      	movs	r1, #1
 80088be:	f7ff ff03 	bl	80086c8 <_Balloc>
 80088c2:	4602      	mov	r2, r0
 80088c4:	b928      	cbnz	r0, 80088d2 <__i2b+0x1a>
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <__i2b+0x24>)
 80088c8:	4805      	ldr	r0, [pc, #20]	; (80088e0 <__i2b+0x28>)
 80088ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ce:	f000 fce1 	bl	8009294 <__assert_func>
 80088d2:	2301      	movs	r3, #1
 80088d4:	6144      	str	r4, [r0, #20]
 80088d6:	6103      	str	r3, [r0, #16]
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	0800b35b 	.word	0x0800b35b
 80088e0:	0800b36c 	.word	0x0800b36c

080088e4 <__multiply>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	4691      	mov	r9, r2
 80088ea:	690a      	ldr	r2, [r1, #16]
 80088ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	bfb8      	it	lt
 80088f4:	460b      	movlt	r3, r1
 80088f6:	460c      	mov	r4, r1
 80088f8:	bfbc      	itt	lt
 80088fa:	464c      	movlt	r4, r9
 80088fc:	4699      	movlt	r9, r3
 80088fe:	6927      	ldr	r7, [r4, #16]
 8008900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008904:	68a3      	ldr	r3, [r4, #8]
 8008906:	6861      	ldr	r1, [r4, #4]
 8008908:	eb07 060a 	add.w	r6, r7, sl
 800890c:	42b3      	cmp	r3, r6
 800890e:	b085      	sub	sp, #20
 8008910:	bfb8      	it	lt
 8008912:	3101      	addlt	r1, #1
 8008914:	f7ff fed8 	bl	80086c8 <_Balloc>
 8008918:	b930      	cbnz	r0, 8008928 <__multiply+0x44>
 800891a:	4602      	mov	r2, r0
 800891c:	4b44      	ldr	r3, [pc, #272]	; (8008a30 <__multiply+0x14c>)
 800891e:	4845      	ldr	r0, [pc, #276]	; (8008a34 <__multiply+0x150>)
 8008920:	f240 115d 	movw	r1, #349	; 0x15d
 8008924:	f000 fcb6 	bl	8009294 <__assert_func>
 8008928:	f100 0514 	add.w	r5, r0, #20
 800892c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008930:	462b      	mov	r3, r5
 8008932:	2200      	movs	r2, #0
 8008934:	4543      	cmp	r3, r8
 8008936:	d321      	bcc.n	800897c <__multiply+0x98>
 8008938:	f104 0314 	add.w	r3, r4, #20
 800893c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008940:	f109 0314 	add.w	r3, r9, #20
 8008944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008948:	9202      	str	r2, [sp, #8]
 800894a:	1b3a      	subs	r2, r7, r4
 800894c:	3a15      	subs	r2, #21
 800894e:	f022 0203 	bic.w	r2, r2, #3
 8008952:	3204      	adds	r2, #4
 8008954:	f104 0115 	add.w	r1, r4, #21
 8008958:	428f      	cmp	r7, r1
 800895a:	bf38      	it	cc
 800895c:	2204      	movcc	r2, #4
 800895e:	9201      	str	r2, [sp, #4]
 8008960:	9a02      	ldr	r2, [sp, #8]
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	429a      	cmp	r2, r3
 8008966:	d80c      	bhi.n	8008982 <__multiply+0x9e>
 8008968:	2e00      	cmp	r6, #0
 800896a:	dd03      	ble.n	8008974 <__multiply+0x90>
 800896c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008970:	2b00      	cmp	r3, #0
 8008972:	d05a      	beq.n	8008a2a <__multiply+0x146>
 8008974:	6106      	str	r6, [r0, #16]
 8008976:	b005      	add	sp, #20
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897c:	f843 2b04 	str.w	r2, [r3], #4
 8008980:	e7d8      	b.n	8008934 <__multiply+0x50>
 8008982:	f8b3 a000 	ldrh.w	sl, [r3]
 8008986:	f1ba 0f00 	cmp.w	sl, #0
 800898a:	d024      	beq.n	80089d6 <__multiply+0xf2>
 800898c:	f104 0e14 	add.w	lr, r4, #20
 8008990:	46a9      	mov	r9, r5
 8008992:	f04f 0c00 	mov.w	ip, #0
 8008996:	f85e 2b04 	ldr.w	r2, [lr], #4
 800899a:	f8d9 1000 	ldr.w	r1, [r9]
 800899e:	fa1f fb82 	uxth.w	fp, r2
 80089a2:	b289      	uxth	r1, r1
 80089a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80089a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089ac:	f8d9 2000 	ldr.w	r2, [r9]
 80089b0:	4461      	add	r1, ip
 80089b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80089ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089be:	b289      	uxth	r1, r1
 80089c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089c4:	4577      	cmp	r7, lr
 80089c6:	f849 1b04 	str.w	r1, [r9], #4
 80089ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ce:	d8e2      	bhi.n	8008996 <__multiply+0xb2>
 80089d0:	9a01      	ldr	r2, [sp, #4]
 80089d2:	f845 c002 	str.w	ip, [r5, r2]
 80089d6:	9a03      	ldr	r2, [sp, #12]
 80089d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089dc:	3304      	adds	r3, #4
 80089de:	f1b9 0f00 	cmp.w	r9, #0
 80089e2:	d020      	beq.n	8008a26 <__multiply+0x142>
 80089e4:	6829      	ldr	r1, [r5, #0]
 80089e6:	f104 0c14 	add.w	ip, r4, #20
 80089ea:	46ae      	mov	lr, r5
 80089ec:	f04f 0a00 	mov.w	sl, #0
 80089f0:	f8bc b000 	ldrh.w	fp, [ip]
 80089f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089f8:	fb09 220b 	mla	r2, r9, fp, r2
 80089fc:	4492      	add	sl, r2
 80089fe:	b289      	uxth	r1, r1
 8008a00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a04:	f84e 1b04 	str.w	r1, [lr], #4
 8008a08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a0c:	f8be 1000 	ldrh.w	r1, [lr]
 8008a10:	0c12      	lsrs	r2, r2, #16
 8008a12:	fb09 1102 	mla	r1, r9, r2, r1
 8008a16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a1a:	4567      	cmp	r7, ip
 8008a1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a20:	d8e6      	bhi.n	80089f0 <__multiply+0x10c>
 8008a22:	9a01      	ldr	r2, [sp, #4]
 8008a24:	50a9      	str	r1, [r5, r2]
 8008a26:	3504      	adds	r5, #4
 8008a28:	e79a      	b.n	8008960 <__multiply+0x7c>
 8008a2a:	3e01      	subs	r6, #1
 8008a2c:	e79c      	b.n	8008968 <__multiply+0x84>
 8008a2e:	bf00      	nop
 8008a30:	0800b35b 	.word	0x0800b35b
 8008a34:	0800b36c 	.word	0x0800b36c

08008a38 <__pow5mult>:
 8008a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	f012 0203 	ands.w	r2, r2, #3
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	d007      	beq.n	8008a58 <__pow5mult+0x20>
 8008a48:	4c25      	ldr	r4, [pc, #148]	; (8008ae0 <__pow5mult+0xa8>)
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a52:	f7ff fe9b 	bl	800878c <__multadd>
 8008a56:	4607      	mov	r7, r0
 8008a58:	10ad      	asrs	r5, r5, #2
 8008a5a:	d03d      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008a5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a5e:	b97c      	cbnz	r4, 8008a80 <__pow5mult+0x48>
 8008a60:	2010      	movs	r0, #16
 8008a62:	f7ff fe1b 	bl	800869c <malloc>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6270      	str	r0, [r6, #36]	; 0x24
 8008a6a:	b928      	cbnz	r0, 8008a78 <__pow5mult+0x40>
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <__pow5mult+0xac>)
 8008a6e:	481e      	ldr	r0, [pc, #120]	; (8008ae8 <__pow5mult+0xb0>)
 8008a70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a74:	f000 fc0e 	bl	8009294 <__assert_func>
 8008a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a7c:	6004      	str	r4, [r0, #0]
 8008a7e:	60c4      	str	r4, [r0, #12]
 8008a80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a88:	b94c      	cbnz	r4, 8008a9e <__pow5mult+0x66>
 8008a8a:	f240 2171 	movw	r1, #625	; 0x271
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7ff ff12 	bl	80088b8 <__i2b>
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	6003      	str	r3, [r0, #0]
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	07eb      	lsls	r3, r5, #31
 8008aa4:	d50a      	bpl.n	8008abc <__pow5mult+0x84>
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7ff ff1a 	bl	80088e4 <__multiply>
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff fe47 	bl	8008748 <_Bfree>
 8008aba:	4647      	mov	r7, r8
 8008abc:	106d      	asrs	r5, r5, #1
 8008abe:	d00b      	beq.n	8008ad8 <__pow5mult+0xa0>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	b938      	cbnz	r0, 8008ad4 <__pow5mult+0x9c>
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ff0b 	bl	80088e4 <__multiply>
 8008ace:	6020      	str	r0, [r4, #0]
 8008ad0:	f8c0 9000 	str.w	r9, [r0]
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	e7e4      	b.n	8008aa2 <__pow5mult+0x6a>
 8008ad8:	4638      	mov	r0, r7
 8008ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800b4b8 	.word	0x0800b4b8
 8008ae4:	0800b2e9 	.word	0x0800b2e9
 8008ae8:	0800b36c 	.word	0x0800b36c

08008aec <__lshift>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	6849      	ldr	r1, [r1, #4]
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	4607      	mov	r7, r0
 8008afe:	4691      	mov	r9, r2
 8008b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b04:	f108 0601 	add.w	r6, r8, #1
 8008b08:	42b3      	cmp	r3, r6
 8008b0a:	db0b      	blt.n	8008b24 <__lshift+0x38>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff fddb 	bl	80086c8 <_Balloc>
 8008b12:	4605      	mov	r5, r0
 8008b14:	b948      	cbnz	r0, 8008b2a <__lshift+0x3e>
 8008b16:	4602      	mov	r2, r0
 8008b18:	4b2a      	ldr	r3, [pc, #168]	; (8008bc4 <__lshift+0xd8>)
 8008b1a:	482b      	ldr	r0, [pc, #172]	; (8008bc8 <__lshift+0xdc>)
 8008b1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b20:	f000 fbb8 	bl	8009294 <__assert_func>
 8008b24:	3101      	adds	r1, #1
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	e7ee      	b.n	8008b08 <__lshift+0x1c>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f100 0114 	add.w	r1, r0, #20
 8008b30:	f100 0210 	add.w	r2, r0, #16
 8008b34:	4618      	mov	r0, r3
 8008b36:	4553      	cmp	r3, sl
 8008b38:	db37      	blt.n	8008baa <__lshift+0xbe>
 8008b3a:	6920      	ldr	r0, [r4, #16]
 8008b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b40:	f104 0314 	add.w	r3, r4, #20
 8008b44:	f019 091f 	ands.w	r9, r9, #31
 8008b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b50:	d02f      	beq.n	8008bb2 <__lshift+0xc6>
 8008b52:	f1c9 0e20 	rsb	lr, r9, #32
 8008b56:	468a      	mov	sl, r1
 8008b58:	f04f 0c00 	mov.w	ip, #0
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b62:	ea42 020c 	orr.w	r2, r2, ip
 8008b66:	f84a 2b04 	str.w	r2, [sl], #4
 8008b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6e:	4298      	cmp	r0, r3
 8008b70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b74:	d8f2      	bhi.n	8008b5c <__lshift+0x70>
 8008b76:	1b03      	subs	r3, r0, r4
 8008b78:	3b15      	subs	r3, #21
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	3304      	adds	r3, #4
 8008b80:	f104 0215 	add.w	r2, r4, #21
 8008b84:	4290      	cmp	r0, r2
 8008b86:	bf38      	it	cc
 8008b88:	2304      	movcc	r3, #4
 8008b8a:	f841 c003 	str.w	ip, [r1, r3]
 8008b8e:	f1bc 0f00 	cmp.w	ip, #0
 8008b92:	d001      	beq.n	8008b98 <__lshift+0xac>
 8008b94:	f108 0602 	add.w	r6, r8, #2
 8008b98:	3e01      	subs	r6, #1
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	612e      	str	r6, [r5, #16]
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	f7ff fdd2 	bl	8008748 <_Bfree>
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008baa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bae:	3301      	adds	r3, #1
 8008bb0:	e7c1      	b.n	8008b36 <__lshift+0x4a>
 8008bb2:	3904      	subs	r1, #4
 8008bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bbc:	4298      	cmp	r0, r3
 8008bbe:	d8f9      	bhi.n	8008bb4 <__lshift+0xc8>
 8008bc0:	e7ea      	b.n	8008b98 <__lshift+0xac>
 8008bc2:	bf00      	nop
 8008bc4:	0800b35b 	.word	0x0800b35b
 8008bc8:	0800b36c 	.word	0x0800b36c

08008bcc <__mcmp>:
 8008bcc:	b530      	push	{r4, r5, lr}
 8008bce:	6902      	ldr	r2, [r0, #16]
 8008bd0:	690c      	ldr	r4, [r1, #16]
 8008bd2:	1b12      	subs	r2, r2, r4
 8008bd4:	d10e      	bne.n	8008bf4 <__mcmp+0x28>
 8008bd6:	f100 0314 	add.w	r3, r0, #20
 8008bda:	3114      	adds	r1, #20
 8008bdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008be0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008be4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008be8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bec:	42a5      	cmp	r5, r4
 8008bee:	d003      	beq.n	8008bf8 <__mcmp+0x2c>
 8008bf0:	d305      	bcc.n	8008bfe <__mcmp+0x32>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	bd30      	pop	{r4, r5, pc}
 8008bf8:	4283      	cmp	r3, r0
 8008bfa:	d3f3      	bcc.n	8008be4 <__mcmp+0x18>
 8008bfc:	e7fa      	b.n	8008bf4 <__mcmp+0x28>
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008c02:	e7f7      	b.n	8008bf4 <__mcmp+0x28>

08008c04 <__mdiff>:
 8008c04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	460c      	mov	r4, r1
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4690      	mov	r8, r2
 8008c12:	f7ff ffdb 	bl	8008bcc <__mcmp>
 8008c16:	1e05      	subs	r5, r0, #0
 8008c18:	d110      	bne.n	8008c3c <__mdiff+0x38>
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f7ff fd53 	bl	80086c8 <_Balloc>
 8008c22:	b930      	cbnz	r0, 8008c32 <__mdiff+0x2e>
 8008c24:	4b3a      	ldr	r3, [pc, #232]	; (8008d10 <__mdiff+0x10c>)
 8008c26:	4602      	mov	r2, r0
 8008c28:	f240 2132 	movw	r1, #562	; 0x232
 8008c2c:	4839      	ldr	r0, [pc, #228]	; (8008d14 <__mdiff+0x110>)
 8008c2e:	f000 fb31 	bl	8009294 <__assert_func>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3c:	bfa4      	itt	ge
 8008c3e:	4643      	movge	r3, r8
 8008c40:	46a0      	movge	r8, r4
 8008c42:	4630      	mov	r0, r6
 8008c44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c48:	bfa6      	itte	ge
 8008c4a:	461c      	movge	r4, r3
 8008c4c:	2500      	movge	r5, #0
 8008c4e:	2501      	movlt	r5, #1
 8008c50:	f7ff fd3a 	bl	80086c8 <_Balloc>
 8008c54:	b920      	cbnz	r0, 8008c60 <__mdiff+0x5c>
 8008c56:	4b2e      	ldr	r3, [pc, #184]	; (8008d10 <__mdiff+0x10c>)
 8008c58:	4602      	mov	r2, r0
 8008c5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c5e:	e7e5      	b.n	8008c2c <__mdiff+0x28>
 8008c60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c64:	6926      	ldr	r6, [r4, #16]
 8008c66:	60c5      	str	r5, [r0, #12]
 8008c68:	f104 0914 	add.w	r9, r4, #20
 8008c6c:	f108 0514 	add.w	r5, r8, #20
 8008c70:	f100 0e14 	add.w	lr, r0, #20
 8008c74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c7c:	f108 0210 	add.w	r2, r8, #16
 8008c80:	46f2      	mov	sl, lr
 8008c82:	2100      	movs	r1, #0
 8008c84:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c8c:	fa1f f883 	uxth.w	r8, r3
 8008c90:	fa11 f18b 	uxtah	r1, r1, fp
 8008c94:	0c1b      	lsrs	r3, r3, #16
 8008c96:	eba1 0808 	sub.w	r8, r1, r8
 8008c9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ca2:	fa1f f888 	uxth.w	r8, r8
 8008ca6:	1419      	asrs	r1, r3, #16
 8008ca8:	454e      	cmp	r6, r9
 8008caa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008cae:	f84a 3b04 	str.w	r3, [sl], #4
 8008cb2:	d8e7      	bhi.n	8008c84 <__mdiff+0x80>
 8008cb4:	1b33      	subs	r3, r6, r4
 8008cb6:	3b15      	subs	r3, #21
 8008cb8:	f023 0303 	bic.w	r3, r3, #3
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	3415      	adds	r4, #21
 8008cc0:	42a6      	cmp	r6, r4
 8008cc2:	bf38      	it	cc
 8008cc4:	2304      	movcc	r3, #4
 8008cc6:	441d      	add	r5, r3
 8008cc8:	4473      	add	r3, lr
 8008cca:	469e      	mov	lr, r3
 8008ccc:	462e      	mov	r6, r5
 8008cce:	4566      	cmp	r6, ip
 8008cd0:	d30e      	bcc.n	8008cf0 <__mdiff+0xec>
 8008cd2:	f10c 0203 	add.w	r2, ip, #3
 8008cd6:	1b52      	subs	r2, r2, r5
 8008cd8:	f022 0203 	bic.w	r2, r2, #3
 8008cdc:	3d03      	subs	r5, #3
 8008cde:	45ac      	cmp	ip, r5
 8008ce0:	bf38      	it	cc
 8008ce2:	2200      	movcc	r2, #0
 8008ce4:	441a      	add	r2, r3
 8008ce6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cea:	b17b      	cbz	r3, 8008d0c <__mdiff+0x108>
 8008cec:	6107      	str	r7, [r0, #16]
 8008cee:	e7a3      	b.n	8008c38 <__mdiff+0x34>
 8008cf0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cf4:	fa11 f288 	uxtah	r2, r1, r8
 8008cf8:	1414      	asrs	r4, r2, #16
 8008cfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cfe:	b292      	uxth	r2, r2
 8008d00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d04:	f84e 2b04 	str.w	r2, [lr], #4
 8008d08:	1421      	asrs	r1, r4, #16
 8008d0a:	e7e0      	b.n	8008cce <__mdiff+0xca>
 8008d0c:	3f01      	subs	r7, #1
 8008d0e:	e7ea      	b.n	8008ce6 <__mdiff+0xe2>
 8008d10:	0800b35b 	.word	0x0800b35b
 8008d14:	0800b36c 	.word	0x0800b36c

08008d18 <__d2b>:
 8008d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	4689      	mov	r9, r1
 8008d1e:	2101      	movs	r1, #1
 8008d20:	ec57 6b10 	vmov	r6, r7, d0
 8008d24:	4690      	mov	r8, r2
 8008d26:	f7ff fccf 	bl	80086c8 <_Balloc>
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	b930      	cbnz	r0, 8008d3c <__d2b+0x24>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	4b25      	ldr	r3, [pc, #148]	; (8008dc8 <__d2b+0xb0>)
 8008d32:	4826      	ldr	r0, [pc, #152]	; (8008dcc <__d2b+0xb4>)
 8008d34:	f240 310a 	movw	r1, #778	; 0x30a
 8008d38:	f000 faac 	bl	8009294 <__assert_func>
 8008d3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d44:	bb35      	cbnz	r5, 8008d94 <__d2b+0x7c>
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	9301      	str	r3, [sp, #4]
 8008d4a:	d028      	beq.n	8008d9e <__d2b+0x86>
 8008d4c:	4668      	mov	r0, sp
 8008d4e:	9600      	str	r6, [sp, #0]
 8008d50:	f7ff fd82 	bl	8008858 <__lo0bits>
 8008d54:	9900      	ldr	r1, [sp, #0]
 8008d56:	b300      	cbz	r0, 8008d9a <__d2b+0x82>
 8008d58:	9a01      	ldr	r2, [sp, #4]
 8008d5a:	f1c0 0320 	rsb	r3, r0, #32
 8008d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d62:	430b      	orrs	r3, r1
 8008d64:	40c2      	lsrs	r2, r0
 8008d66:	6163      	str	r3, [r4, #20]
 8008d68:	9201      	str	r2, [sp, #4]
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	61a3      	str	r3, [r4, #24]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bf14      	ite	ne
 8008d72:	2202      	movne	r2, #2
 8008d74:	2201      	moveq	r2, #1
 8008d76:	6122      	str	r2, [r4, #16]
 8008d78:	b1d5      	cbz	r5, 8008db0 <__d2b+0x98>
 8008d7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d7e:	4405      	add	r5, r0
 8008d80:	f8c9 5000 	str.w	r5, [r9]
 8008d84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d88:	f8c8 0000 	str.w	r0, [r8]
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	b003      	add	sp, #12
 8008d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d98:	e7d5      	b.n	8008d46 <__d2b+0x2e>
 8008d9a:	6161      	str	r1, [r4, #20]
 8008d9c:	e7e5      	b.n	8008d6a <__d2b+0x52>
 8008d9e:	a801      	add	r0, sp, #4
 8008da0:	f7ff fd5a 	bl	8008858 <__lo0bits>
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	6163      	str	r3, [r4, #20]
 8008da8:	2201      	movs	r2, #1
 8008daa:	6122      	str	r2, [r4, #16]
 8008dac:	3020      	adds	r0, #32
 8008dae:	e7e3      	b.n	8008d78 <__d2b+0x60>
 8008db0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008db4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008db8:	f8c9 0000 	str.w	r0, [r9]
 8008dbc:	6918      	ldr	r0, [r3, #16]
 8008dbe:	f7ff fd2b 	bl	8008818 <__hi0bits>
 8008dc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dc6:	e7df      	b.n	8008d88 <__d2b+0x70>
 8008dc8:	0800b35b 	.word	0x0800b35b
 8008dcc:	0800b36c 	.word	0x0800b36c

08008dd0 <_calloc_r>:
 8008dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd2:	fba1 2402 	umull	r2, r4, r1, r2
 8008dd6:	b94c      	cbnz	r4, 8008dec <_calloc_r+0x1c>
 8008dd8:	4611      	mov	r1, r2
 8008dda:	9201      	str	r2, [sp, #4]
 8008ddc:	f000 f87a 	bl	8008ed4 <_malloc_r>
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	4605      	mov	r5, r0
 8008de4:	b930      	cbnz	r0, 8008df4 <_calloc_r+0x24>
 8008de6:	4628      	mov	r0, r5
 8008de8:	b003      	add	sp, #12
 8008dea:	bd30      	pop	{r4, r5, pc}
 8008dec:	220c      	movs	r2, #12
 8008dee:	6002      	str	r2, [r0, #0]
 8008df0:	2500      	movs	r5, #0
 8008df2:	e7f8      	b.n	8008de6 <_calloc_r+0x16>
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7fe f93f 	bl	8007078 <memset>
 8008dfa:	e7f4      	b.n	8008de6 <_calloc_r+0x16>

08008dfc <_free_r>:
 8008dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d044      	beq.n	8008e8c <_free_r+0x90>
 8008e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e06:	9001      	str	r0, [sp, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e0e:	bfb8      	it	lt
 8008e10:	18e4      	addlt	r4, r4, r3
 8008e12:	f000 fa9b 	bl	800934c <__malloc_lock>
 8008e16:	4a1e      	ldr	r2, [pc, #120]	; (8008e90 <_free_r+0x94>)
 8008e18:	9801      	ldr	r0, [sp, #4]
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	b933      	cbnz	r3, 8008e2c <_free_r+0x30>
 8008e1e:	6063      	str	r3, [r4, #4]
 8008e20:	6014      	str	r4, [r2, #0]
 8008e22:	b003      	add	sp, #12
 8008e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e28:	f000 ba96 	b.w	8009358 <__malloc_unlock>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d908      	bls.n	8008e42 <_free_r+0x46>
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf01      	itttt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	1949      	addeq	r1, r1, r5
 8008e3e:	6021      	streq	r1, [r4, #0]
 8008e40:	e7ed      	b.n	8008e1e <_free_r+0x22>
 8008e42:	461a      	mov	r2, r3
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b10b      	cbz	r3, 8008e4c <_free_r+0x50>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d9fa      	bls.n	8008e42 <_free_r+0x46>
 8008e4c:	6811      	ldr	r1, [r2, #0]
 8008e4e:	1855      	adds	r5, r2, r1
 8008e50:	42a5      	cmp	r5, r4
 8008e52:	d10b      	bne.n	8008e6c <_free_r+0x70>
 8008e54:	6824      	ldr	r4, [r4, #0]
 8008e56:	4421      	add	r1, r4
 8008e58:	1854      	adds	r4, r2, r1
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	d1e0      	bne.n	8008e22 <_free_r+0x26>
 8008e60:	681c      	ldr	r4, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	6053      	str	r3, [r2, #4]
 8008e66:	4421      	add	r1, r4
 8008e68:	6011      	str	r1, [r2, #0]
 8008e6a:	e7da      	b.n	8008e22 <_free_r+0x26>
 8008e6c:	d902      	bls.n	8008e74 <_free_r+0x78>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	e7d6      	b.n	8008e22 <_free_r+0x26>
 8008e74:	6825      	ldr	r5, [r4, #0]
 8008e76:	1961      	adds	r1, r4, r5
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf04      	itt	eq
 8008e7c:	6819      	ldreq	r1, [r3, #0]
 8008e7e:	685b      	ldreq	r3, [r3, #4]
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	bf04      	itt	eq
 8008e84:	1949      	addeq	r1, r1, r5
 8008e86:	6021      	streq	r1, [r4, #0]
 8008e88:	6054      	str	r4, [r2, #4]
 8008e8a:	e7ca      	b.n	8008e22 <_free_r+0x26>
 8008e8c:	b003      	add	sp, #12
 8008e8e:	bd30      	pop	{r4, r5, pc}
 8008e90:	200004a8 	.word	0x200004a8

08008e94 <sbrk_aligned>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	4e0e      	ldr	r6, [pc, #56]	; (8008ed0 <sbrk_aligned+0x3c>)
 8008e98:	460c      	mov	r4, r1
 8008e9a:	6831      	ldr	r1, [r6, #0]
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	b911      	cbnz	r1, 8008ea6 <sbrk_aligned+0x12>
 8008ea0:	f000 f9e8 	bl	8009274 <_sbrk_r>
 8008ea4:	6030      	str	r0, [r6, #0]
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 f9e3 	bl	8009274 <_sbrk_r>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	d00a      	beq.n	8008ec8 <sbrk_aligned+0x34>
 8008eb2:	1cc4      	adds	r4, r0, #3
 8008eb4:	f024 0403 	bic.w	r4, r4, #3
 8008eb8:	42a0      	cmp	r0, r4
 8008eba:	d007      	beq.n	8008ecc <sbrk_aligned+0x38>
 8008ebc:	1a21      	subs	r1, r4, r0
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f9d8 	bl	8009274 <_sbrk_r>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d101      	bne.n	8008ecc <sbrk_aligned+0x38>
 8008ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8008ecc:	4620      	mov	r0, r4
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
 8008ed0:	200004ac 	.word	0x200004ac

08008ed4 <_malloc_r>:
 8008ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed8:	1ccd      	adds	r5, r1, #3
 8008eda:	f025 0503 	bic.w	r5, r5, #3
 8008ede:	3508      	adds	r5, #8
 8008ee0:	2d0c      	cmp	r5, #12
 8008ee2:	bf38      	it	cc
 8008ee4:	250c      	movcc	r5, #12
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	4607      	mov	r7, r0
 8008eea:	db01      	blt.n	8008ef0 <_malloc_r+0x1c>
 8008eec:	42a9      	cmp	r1, r5
 8008eee:	d905      	bls.n	8008efc <_malloc_r+0x28>
 8008ef0:	230c      	movs	r3, #12
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	2600      	movs	r6, #0
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008efc:	4e2e      	ldr	r6, [pc, #184]	; (8008fb8 <_malloc_r+0xe4>)
 8008efe:	f000 fa25 	bl	800934c <__malloc_lock>
 8008f02:	6833      	ldr	r3, [r6, #0]
 8008f04:	461c      	mov	r4, r3
 8008f06:	bb34      	cbnz	r4, 8008f56 <_malloc_r+0x82>
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	f7ff ffc2 	bl	8008e94 <sbrk_aligned>
 8008f10:	1c43      	adds	r3, r0, #1
 8008f12:	4604      	mov	r4, r0
 8008f14:	d14d      	bne.n	8008fb2 <_malloc_r+0xde>
 8008f16:	6834      	ldr	r4, [r6, #0]
 8008f18:	4626      	mov	r6, r4
 8008f1a:	2e00      	cmp	r6, #0
 8008f1c:	d140      	bne.n	8008fa0 <_malloc_r+0xcc>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	4631      	mov	r1, r6
 8008f22:	4638      	mov	r0, r7
 8008f24:	eb04 0803 	add.w	r8, r4, r3
 8008f28:	f000 f9a4 	bl	8009274 <_sbrk_r>
 8008f2c:	4580      	cmp	r8, r0
 8008f2e:	d13a      	bne.n	8008fa6 <_malloc_r+0xd2>
 8008f30:	6821      	ldr	r1, [r4, #0]
 8008f32:	3503      	adds	r5, #3
 8008f34:	1a6d      	subs	r5, r5, r1
 8008f36:	f025 0503 	bic.w	r5, r5, #3
 8008f3a:	3508      	adds	r5, #8
 8008f3c:	2d0c      	cmp	r5, #12
 8008f3e:	bf38      	it	cc
 8008f40:	250c      	movcc	r5, #12
 8008f42:	4629      	mov	r1, r5
 8008f44:	4638      	mov	r0, r7
 8008f46:	f7ff ffa5 	bl	8008e94 <sbrk_aligned>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d02b      	beq.n	8008fa6 <_malloc_r+0xd2>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	442b      	add	r3, r5
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	e00e      	b.n	8008f74 <_malloc_r+0xa0>
 8008f56:	6822      	ldr	r2, [r4, #0]
 8008f58:	1b52      	subs	r2, r2, r5
 8008f5a:	d41e      	bmi.n	8008f9a <_malloc_r+0xc6>
 8008f5c:	2a0b      	cmp	r2, #11
 8008f5e:	d916      	bls.n	8008f8e <_malloc_r+0xba>
 8008f60:	1961      	adds	r1, r4, r5
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	6025      	str	r5, [r4, #0]
 8008f66:	bf18      	it	ne
 8008f68:	6059      	strne	r1, [r3, #4]
 8008f6a:	6863      	ldr	r3, [r4, #4]
 8008f6c:	bf08      	it	eq
 8008f6e:	6031      	streq	r1, [r6, #0]
 8008f70:	5162      	str	r2, [r4, r5]
 8008f72:	604b      	str	r3, [r1, #4]
 8008f74:	4638      	mov	r0, r7
 8008f76:	f104 060b 	add.w	r6, r4, #11
 8008f7a:	f000 f9ed 	bl	8009358 <__malloc_unlock>
 8008f7e:	f026 0607 	bic.w	r6, r6, #7
 8008f82:	1d23      	adds	r3, r4, #4
 8008f84:	1af2      	subs	r2, r6, r3
 8008f86:	d0b6      	beq.n	8008ef6 <_malloc_r+0x22>
 8008f88:	1b9b      	subs	r3, r3, r6
 8008f8a:	50a3      	str	r3, [r4, r2]
 8008f8c:	e7b3      	b.n	8008ef6 <_malloc_r+0x22>
 8008f8e:	6862      	ldr	r2, [r4, #4]
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	bf0c      	ite	eq
 8008f94:	6032      	streq	r2, [r6, #0]
 8008f96:	605a      	strne	r2, [r3, #4]
 8008f98:	e7ec      	b.n	8008f74 <_malloc_r+0xa0>
 8008f9a:	4623      	mov	r3, r4
 8008f9c:	6864      	ldr	r4, [r4, #4]
 8008f9e:	e7b2      	b.n	8008f06 <_malloc_r+0x32>
 8008fa0:	4634      	mov	r4, r6
 8008fa2:	6876      	ldr	r6, [r6, #4]
 8008fa4:	e7b9      	b.n	8008f1a <_malloc_r+0x46>
 8008fa6:	230c      	movs	r3, #12
 8008fa8:	603b      	str	r3, [r7, #0]
 8008faa:	4638      	mov	r0, r7
 8008fac:	f000 f9d4 	bl	8009358 <__malloc_unlock>
 8008fb0:	e7a1      	b.n	8008ef6 <_malloc_r+0x22>
 8008fb2:	6025      	str	r5, [r4, #0]
 8008fb4:	e7de      	b.n	8008f74 <_malloc_r+0xa0>
 8008fb6:	bf00      	nop
 8008fb8:	200004a8 	.word	0x200004a8

08008fbc <__ssputs_r>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	688e      	ldr	r6, [r1, #8]
 8008fc2:	429e      	cmp	r6, r3
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	4690      	mov	r8, r2
 8008fca:	461f      	mov	r7, r3
 8008fcc:	d838      	bhi.n	8009040 <__ssputs_r+0x84>
 8008fce:	898a      	ldrh	r2, [r1, #12]
 8008fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fd4:	d032      	beq.n	800903c <__ssputs_r+0x80>
 8008fd6:	6825      	ldr	r5, [r4, #0]
 8008fd8:	6909      	ldr	r1, [r1, #16]
 8008fda:	eba5 0901 	sub.w	r9, r5, r1
 8008fde:	6965      	ldr	r5, [r4, #20]
 8008fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fe8:	3301      	adds	r3, #1
 8008fea:	444b      	add	r3, r9
 8008fec:	106d      	asrs	r5, r5, #1
 8008fee:	429d      	cmp	r5, r3
 8008ff0:	bf38      	it	cc
 8008ff2:	461d      	movcc	r5, r3
 8008ff4:	0553      	lsls	r3, r2, #21
 8008ff6:	d531      	bpl.n	800905c <__ssputs_r+0xa0>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7ff ff6b 	bl	8008ed4 <_malloc_r>
 8008ffe:	4606      	mov	r6, r0
 8009000:	b950      	cbnz	r0, 8009018 <__ssputs_r+0x5c>
 8009002:	230c      	movs	r3, #12
 8009004:	f8ca 3000 	str.w	r3, [sl]
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	6921      	ldr	r1, [r4, #16]
 800901a:	464a      	mov	r2, r9
 800901c:	f7ff fb46 	bl	80086ac <memcpy>
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	6126      	str	r6, [r4, #16]
 800902e:	6165      	str	r5, [r4, #20]
 8009030:	444e      	add	r6, r9
 8009032:	eba5 0509 	sub.w	r5, r5, r9
 8009036:	6026      	str	r6, [r4, #0]
 8009038:	60a5      	str	r5, [r4, #8]
 800903a:	463e      	mov	r6, r7
 800903c:	42be      	cmp	r6, r7
 800903e:	d900      	bls.n	8009042 <__ssputs_r+0x86>
 8009040:	463e      	mov	r6, r7
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	4632      	mov	r2, r6
 8009046:	4641      	mov	r1, r8
 8009048:	f000 f966 	bl	8009318 <memmove>
 800904c:	68a3      	ldr	r3, [r4, #8]
 800904e:	1b9b      	subs	r3, r3, r6
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	4433      	add	r3, r6
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	2000      	movs	r0, #0
 800905a:	e7db      	b.n	8009014 <__ssputs_r+0x58>
 800905c:	462a      	mov	r2, r5
 800905e:	f000 f981 	bl	8009364 <_realloc_r>
 8009062:	4606      	mov	r6, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	d1e1      	bne.n	800902c <__ssputs_r+0x70>
 8009068:	6921      	ldr	r1, [r4, #16]
 800906a:	4650      	mov	r0, sl
 800906c:	f7ff fec6 	bl	8008dfc <_free_r>
 8009070:	e7c7      	b.n	8009002 <__ssputs_r+0x46>
	...

08009074 <_svfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4698      	mov	r8, r3
 800907a:	898b      	ldrh	r3, [r1, #12]
 800907c:	061b      	lsls	r3, r3, #24
 800907e:	b09d      	sub	sp, #116	; 0x74
 8009080:	4607      	mov	r7, r0
 8009082:	460d      	mov	r5, r1
 8009084:	4614      	mov	r4, r2
 8009086:	d50e      	bpl.n	80090a6 <_svfiprintf_r+0x32>
 8009088:	690b      	ldr	r3, [r1, #16]
 800908a:	b963      	cbnz	r3, 80090a6 <_svfiprintf_r+0x32>
 800908c:	2140      	movs	r1, #64	; 0x40
 800908e:	f7ff ff21 	bl	8008ed4 <_malloc_r>
 8009092:	6028      	str	r0, [r5, #0]
 8009094:	6128      	str	r0, [r5, #16]
 8009096:	b920      	cbnz	r0, 80090a2 <_svfiprintf_r+0x2e>
 8009098:	230c      	movs	r3, #12
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e0d1      	b.n	8009246 <_svfiprintf_r+0x1d2>
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	616b      	str	r3, [r5, #20]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9309      	str	r3, [sp, #36]	; 0x24
 80090aa:	2320      	movs	r3, #32
 80090ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b4:	2330      	movs	r3, #48	; 0x30
 80090b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009260 <_svfiprintf_r+0x1ec>
 80090ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090be:	f04f 0901 	mov.w	r9, #1
 80090c2:	4623      	mov	r3, r4
 80090c4:	469a      	mov	sl, r3
 80090c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ca:	b10a      	cbz	r2, 80090d0 <_svfiprintf_r+0x5c>
 80090cc:	2a25      	cmp	r2, #37	; 0x25
 80090ce:	d1f9      	bne.n	80090c4 <_svfiprintf_r+0x50>
 80090d0:	ebba 0b04 	subs.w	fp, sl, r4
 80090d4:	d00b      	beq.n	80090ee <_svfiprintf_r+0x7a>
 80090d6:	465b      	mov	r3, fp
 80090d8:	4622      	mov	r2, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff ff6d 	bl	8008fbc <__ssputs_r>
 80090e2:	3001      	adds	r0, #1
 80090e4:	f000 80aa 	beq.w	800923c <_svfiprintf_r+0x1c8>
 80090e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ea:	445a      	add	r2, fp
 80090ec:	9209      	str	r2, [sp, #36]	; 0x24
 80090ee:	f89a 3000 	ldrb.w	r3, [sl]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 80a2 	beq.w	800923c <_svfiprintf_r+0x1c8>
 80090f8:	2300      	movs	r3, #0
 80090fa:	f04f 32ff 	mov.w	r2, #4294967295
 80090fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009102:	f10a 0a01 	add.w	sl, sl, #1
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	9307      	str	r3, [sp, #28]
 800910a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800910e:	931a      	str	r3, [sp, #104]	; 0x68
 8009110:	4654      	mov	r4, sl
 8009112:	2205      	movs	r2, #5
 8009114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009118:	4851      	ldr	r0, [pc, #324]	; (8009260 <_svfiprintf_r+0x1ec>)
 800911a:	f7f7 f861 	bl	80001e0 <memchr>
 800911e:	9a04      	ldr	r2, [sp, #16]
 8009120:	b9d8      	cbnz	r0, 800915a <_svfiprintf_r+0xe6>
 8009122:	06d0      	lsls	r0, r2, #27
 8009124:	bf44      	itt	mi
 8009126:	2320      	movmi	r3, #32
 8009128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912c:	0711      	lsls	r1, r2, #28
 800912e:	bf44      	itt	mi
 8009130:	232b      	movmi	r3, #43	; 0x2b
 8009132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009136:	f89a 3000 	ldrb.w	r3, [sl]
 800913a:	2b2a      	cmp	r3, #42	; 0x2a
 800913c:	d015      	beq.n	800916a <_svfiprintf_r+0xf6>
 800913e:	9a07      	ldr	r2, [sp, #28]
 8009140:	4654      	mov	r4, sl
 8009142:	2000      	movs	r0, #0
 8009144:	f04f 0c0a 	mov.w	ip, #10
 8009148:	4621      	mov	r1, r4
 800914a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800914e:	3b30      	subs	r3, #48	; 0x30
 8009150:	2b09      	cmp	r3, #9
 8009152:	d94e      	bls.n	80091f2 <_svfiprintf_r+0x17e>
 8009154:	b1b0      	cbz	r0, 8009184 <_svfiprintf_r+0x110>
 8009156:	9207      	str	r2, [sp, #28]
 8009158:	e014      	b.n	8009184 <_svfiprintf_r+0x110>
 800915a:	eba0 0308 	sub.w	r3, r0, r8
 800915e:	fa09 f303 	lsl.w	r3, r9, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	46a2      	mov	sl, r4
 8009168:	e7d2      	b.n	8009110 <_svfiprintf_r+0x9c>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	1d19      	adds	r1, r3, #4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9103      	str	r1, [sp, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfbb      	ittet	lt
 8009176:	425b      	neglt	r3, r3
 8009178:	f042 0202 	orrlt.w	r2, r2, #2
 800917c:	9307      	strge	r3, [sp, #28]
 800917e:	9307      	strlt	r3, [sp, #28]
 8009180:	bfb8      	it	lt
 8009182:	9204      	strlt	r2, [sp, #16]
 8009184:	7823      	ldrb	r3, [r4, #0]
 8009186:	2b2e      	cmp	r3, #46	; 0x2e
 8009188:	d10c      	bne.n	80091a4 <_svfiprintf_r+0x130>
 800918a:	7863      	ldrb	r3, [r4, #1]
 800918c:	2b2a      	cmp	r3, #42	; 0x2a
 800918e:	d135      	bne.n	80091fc <_svfiprintf_r+0x188>
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	1d1a      	adds	r2, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	9203      	str	r2, [sp, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	bfb8      	it	lt
 800919c:	f04f 33ff 	movlt.w	r3, #4294967295
 80091a0:	3402      	adds	r4, #2
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009270 <_svfiprintf_r+0x1fc>
 80091a8:	7821      	ldrb	r1, [r4, #0]
 80091aa:	2203      	movs	r2, #3
 80091ac:	4650      	mov	r0, sl
 80091ae:	f7f7 f817 	bl	80001e0 <memchr>
 80091b2:	b140      	cbz	r0, 80091c6 <_svfiprintf_r+0x152>
 80091b4:	2340      	movs	r3, #64	; 0x40
 80091b6:	eba0 000a 	sub.w	r0, r0, sl
 80091ba:	fa03 f000 	lsl.w	r0, r3, r0
 80091be:	9b04      	ldr	r3, [sp, #16]
 80091c0:	4303      	orrs	r3, r0
 80091c2:	3401      	adds	r4, #1
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ca:	4826      	ldr	r0, [pc, #152]	; (8009264 <_svfiprintf_r+0x1f0>)
 80091cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091d0:	2206      	movs	r2, #6
 80091d2:	f7f7 f805 	bl	80001e0 <memchr>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d038      	beq.n	800924c <_svfiprintf_r+0x1d8>
 80091da:	4b23      	ldr	r3, [pc, #140]	; (8009268 <_svfiprintf_r+0x1f4>)
 80091dc:	bb1b      	cbnz	r3, 8009226 <_svfiprintf_r+0x1b2>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	3307      	adds	r3, #7
 80091e2:	f023 0307 	bic.w	r3, r3, #7
 80091e6:	3308      	adds	r3, #8
 80091e8:	9303      	str	r3, [sp, #12]
 80091ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ec:	4433      	add	r3, r6
 80091ee:	9309      	str	r3, [sp, #36]	; 0x24
 80091f0:	e767      	b.n	80090c2 <_svfiprintf_r+0x4e>
 80091f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80091f6:	460c      	mov	r4, r1
 80091f8:	2001      	movs	r0, #1
 80091fa:	e7a5      	b.n	8009148 <_svfiprintf_r+0xd4>
 80091fc:	2300      	movs	r3, #0
 80091fe:	3401      	adds	r4, #1
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	4619      	mov	r1, r3
 8009204:	f04f 0c0a 	mov.w	ip, #10
 8009208:	4620      	mov	r0, r4
 800920a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800920e:	3a30      	subs	r2, #48	; 0x30
 8009210:	2a09      	cmp	r2, #9
 8009212:	d903      	bls.n	800921c <_svfiprintf_r+0x1a8>
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0c5      	beq.n	80091a4 <_svfiprintf_r+0x130>
 8009218:	9105      	str	r1, [sp, #20]
 800921a:	e7c3      	b.n	80091a4 <_svfiprintf_r+0x130>
 800921c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009220:	4604      	mov	r4, r0
 8009222:	2301      	movs	r3, #1
 8009224:	e7f0      	b.n	8009208 <_svfiprintf_r+0x194>
 8009226:	ab03      	add	r3, sp, #12
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	462a      	mov	r2, r5
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <_svfiprintf_r+0x1f8>)
 800922e:	a904      	add	r1, sp, #16
 8009230:	4638      	mov	r0, r7
 8009232:	f7fd ffc9 	bl	80071c8 <_printf_float>
 8009236:	1c42      	adds	r2, r0, #1
 8009238:	4606      	mov	r6, r0
 800923a:	d1d6      	bne.n	80091ea <_svfiprintf_r+0x176>
 800923c:	89ab      	ldrh	r3, [r5, #12]
 800923e:	065b      	lsls	r3, r3, #25
 8009240:	f53f af2c 	bmi.w	800909c <_svfiprintf_r+0x28>
 8009244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009246:	b01d      	add	sp, #116	; 0x74
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	ab03      	add	r3, sp, #12
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	462a      	mov	r2, r5
 8009252:	4b06      	ldr	r3, [pc, #24]	; (800926c <_svfiprintf_r+0x1f8>)
 8009254:	a904      	add	r1, sp, #16
 8009256:	4638      	mov	r0, r7
 8009258:	f7fe fa5a 	bl	8007710 <_printf_i>
 800925c:	e7eb      	b.n	8009236 <_svfiprintf_r+0x1c2>
 800925e:	bf00      	nop
 8009260:	0800b4c4 	.word	0x0800b4c4
 8009264:	0800b4ce 	.word	0x0800b4ce
 8009268:	080071c9 	.word	0x080071c9
 800926c:	08008fbd 	.word	0x08008fbd
 8009270:	0800b4ca 	.word	0x0800b4ca

08009274 <_sbrk_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d06      	ldr	r5, [pc, #24]	; (8009290 <_sbrk_r+0x1c>)
 8009278:	2300      	movs	r3, #0
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	602b      	str	r3, [r5, #0]
 8009280:	f7f9 f812 	bl	80022a8 <_sbrk>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_sbrk_r+0x1a>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_sbrk_r+0x1a>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	200004b0 	.word	0x200004b0

08009294 <__assert_func>:
 8009294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009296:	4614      	mov	r4, r2
 8009298:	461a      	mov	r2, r3
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <__assert_func+0x2c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4605      	mov	r5, r0
 80092a0:	68d8      	ldr	r0, [r3, #12]
 80092a2:	b14c      	cbz	r4, 80092b8 <__assert_func+0x24>
 80092a4:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <__assert_func+0x30>)
 80092a6:	9100      	str	r1, [sp, #0]
 80092a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092ac:	4906      	ldr	r1, [pc, #24]	; (80092c8 <__assert_func+0x34>)
 80092ae:	462b      	mov	r3, r5
 80092b0:	f000 f80e 	bl	80092d0 <fiprintf>
 80092b4:	f000 faac 	bl	8009810 <abort>
 80092b8:	4b04      	ldr	r3, [pc, #16]	; (80092cc <__assert_func+0x38>)
 80092ba:	461c      	mov	r4, r3
 80092bc:	e7f3      	b.n	80092a6 <__assert_func+0x12>
 80092be:	bf00      	nop
 80092c0:	2000000c 	.word	0x2000000c
 80092c4:	0800b4d5 	.word	0x0800b4d5
 80092c8:	0800b4e2 	.word	0x0800b4e2
 80092cc:	0800b510 	.word	0x0800b510

080092d0 <fiprintf>:
 80092d0:	b40e      	push	{r1, r2, r3}
 80092d2:	b503      	push	{r0, r1, lr}
 80092d4:	4601      	mov	r1, r0
 80092d6:	ab03      	add	r3, sp, #12
 80092d8:	4805      	ldr	r0, [pc, #20]	; (80092f0 <fiprintf+0x20>)
 80092da:	f853 2b04 	ldr.w	r2, [r3], #4
 80092de:	6800      	ldr	r0, [r0, #0]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f000 f897 	bl	8009414 <_vfiprintf_r>
 80092e6:	b002      	add	sp, #8
 80092e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ec:	b003      	add	sp, #12
 80092ee:	4770      	bx	lr
 80092f0:	2000000c 	.word	0x2000000c

080092f4 <__ascii_mbtowc>:
 80092f4:	b082      	sub	sp, #8
 80092f6:	b901      	cbnz	r1, 80092fa <__ascii_mbtowc+0x6>
 80092f8:	a901      	add	r1, sp, #4
 80092fa:	b142      	cbz	r2, 800930e <__ascii_mbtowc+0x1a>
 80092fc:	b14b      	cbz	r3, 8009312 <__ascii_mbtowc+0x1e>
 80092fe:	7813      	ldrb	r3, [r2, #0]
 8009300:	600b      	str	r3, [r1, #0]
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	1e10      	subs	r0, r2, #0
 8009306:	bf18      	it	ne
 8009308:	2001      	movne	r0, #1
 800930a:	b002      	add	sp, #8
 800930c:	4770      	bx	lr
 800930e:	4610      	mov	r0, r2
 8009310:	e7fb      	b.n	800930a <__ascii_mbtowc+0x16>
 8009312:	f06f 0001 	mvn.w	r0, #1
 8009316:	e7f8      	b.n	800930a <__ascii_mbtowc+0x16>

08009318 <memmove>:
 8009318:	4288      	cmp	r0, r1
 800931a:	b510      	push	{r4, lr}
 800931c:	eb01 0402 	add.w	r4, r1, r2
 8009320:	d902      	bls.n	8009328 <memmove+0x10>
 8009322:	4284      	cmp	r4, r0
 8009324:	4623      	mov	r3, r4
 8009326:	d807      	bhi.n	8009338 <memmove+0x20>
 8009328:	1e43      	subs	r3, r0, #1
 800932a:	42a1      	cmp	r1, r4
 800932c:	d008      	beq.n	8009340 <memmove+0x28>
 800932e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009336:	e7f8      	b.n	800932a <memmove+0x12>
 8009338:	4402      	add	r2, r0
 800933a:	4601      	mov	r1, r0
 800933c:	428a      	cmp	r2, r1
 800933e:	d100      	bne.n	8009342 <memmove+0x2a>
 8009340:	bd10      	pop	{r4, pc}
 8009342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800934a:	e7f7      	b.n	800933c <memmove+0x24>

0800934c <__malloc_lock>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__malloc_lock+0x8>)
 800934e:	f000 bc1f 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009352:	bf00      	nop
 8009354:	200004b4 	.word	0x200004b4

08009358 <__malloc_unlock>:
 8009358:	4801      	ldr	r0, [pc, #4]	; (8009360 <__malloc_unlock+0x8>)
 800935a:	f000 bc1a 	b.w	8009b92 <__retarget_lock_release_recursive>
 800935e:	bf00      	nop
 8009360:	200004b4 	.word	0x200004b4

08009364 <_realloc_r>:
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	4680      	mov	r8, r0
 800936a:	4614      	mov	r4, r2
 800936c:	460e      	mov	r6, r1
 800936e:	b921      	cbnz	r1, 800937a <_realloc_r+0x16>
 8009370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	4611      	mov	r1, r2
 8009376:	f7ff bdad 	b.w	8008ed4 <_malloc_r>
 800937a:	b92a      	cbnz	r2, 8009388 <_realloc_r+0x24>
 800937c:	f7ff fd3e 	bl	8008dfc <_free_r>
 8009380:	4625      	mov	r5, r4
 8009382:	4628      	mov	r0, r5
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	f000 fc6a 	bl	8009c60 <_malloc_usable_size_r>
 800938c:	4284      	cmp	r4, r0
 800938e:	4607      	mov	r7, r0
 8009390:	d802      	bhi.n	8009398 <_realloc_r+0x34>
 8009392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009396:	d812      	bhi.n	80093be <_realloc_r+0x5a>
 8009398:	4621      	mov	r1, r4
 800939a:	4640      	mov	r0, r8
 800939c:	f7ff fd9a 	bl	8008ed4 <_malloc_r>
 80093a0:	4605      	mov	r5, r0
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0ed      	beq.n	8009382 <_realloc_r+0x1e>
 80093a6:	42bc      	cmp	r4, r7
 80093a8:	4622      	mov	r2, r4
 80093aa:	4631      	mov	r1, r6
 80093ac:	bf28      	it	cs
 80093ae:	463a      	movcs	r2, r7
 80093b0:	f7ff f97c 	bl	80086ac <memcpy>
 80093b4:	4631      	mov	r1, r6
 80093b6:	4640      	mov	r0, r8
 80093b8:	f7ff fd20 	bl	8008dfc <_free_r>
 80093bc:	e7e1      	b.n	8009382 <_realloc_r+0x1e>
 80093be:	4635      	mov	r5, r6
 80093c0:	e7df      	b.n	8009382 <_realloc_r+0x1e>

080093c2 <__sfputc_r>:
 80093c2:	6893      	ldr	r3, [r2, #8]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	b410      	push	{r4}
 80093ca:	6093      	str	r3, [r2, #8]
 80093cc:	da08      	bge.n	80093e0 <__sfputc_r+0x1e>
 80093ce:	6994      	ldr	r4, [r2, #24]
 80093d0:	42a3      	cmp	r3, r4
 80093d2:	db01      	blt.n	80093d8 <__sfputc_r+0x16>
 80093d4:	290a      	cmp	r1, #10
 80093d6:	d103      	bne.n	80093e0 <__sfputc_r+0x1e>
 80093d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093dc:	f000 b94a 	b.w	8009674 <__swbuf_r>
 80093e0:	6813      	ldr	r3, [r2, #0]
 80093e2:	1c58      	adds	r0, r3, #1
 80093e4:	6010      	str	r0, [r2, #0]
 80093e6:	7019      	strb	r1, [r3, #0]
 80093e8:	4608      	mov	r0, r1
 80093ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <__sfputs_r>:
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f2:	4606      	mov	r6, r0
 80093f4:	460f      	mov	r7, r1
 80093f6:	4614      	mov	r4, r2
 80093f8:	18d5      	adds	r5, r2, r3
 80093fa:	42ac      	cmp	r4, r5
 80093fc:	d101      	bne.n	8009402 <__sfputs_r+0x12>
 80093fe:	2000      	movs	r0, #0
 8009400:	e007      	b.n	8009412 <__sfputs_r+0x22>
 8009402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009406:	463a      	mov	r2, r7
 8009408:	4630      	mov	r0, r6
 800940a:	f7ff ffda 	bl	80093c2 <__sfputc_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	d1f3      	bne.n	80093fa <__sfputs_r+0xa>
 8009412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009414 <_vfiprintf_r>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	460d      	mov	r5, r1
 800941a:	b09d      	sub	sp, #116	; 0x74
 800941c:	4614      	mov	r4, r2
 800941e:	4698      	mov	r8, r3
 8009420:	4606      	mov	r6, r0
 8009422:	b118      	cbz	r0, 800942c <_vfiprintf_r+0x18>
 8009424:	6983      	ldr	r3, [r0, #24]
 8009426:	b90b      	cbnz	r3, 800942c <_vfiprintf_r+0x18>
 8009428:	f000 fb14 	bl	8009a54 <__sinit>
 800942c:	4b89      	ldr	r3, [pc, #548]	; (8009654 <_vfiprintf_r+0x240>)
 800942e:	429d      	cmp	r5, r3
 8009430:	d11b      	bne.n	800946a <_vfiprintf_r+0x56>
 8009432:	6875      	ldr	r5, [r6, #4]
 8009434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009436:	07d9      	lsls	r1, r3, #31
 8009438:	d405      	bmi.n	8009446 <_vfiprintf_r+0x32>
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	059a      	lsls	r2, r3, #22
 800943e:	d402      	bmi.n	8009446 <_vfiprintf_r+0x32>
 8009440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009442:	f000 fba5 	bl	8009b90 <__retarget_lock_acquire_recursive>
 8009446:	89ab      	ldrh	r3, [r5, #12]
 8009448:	071b      	lsls	r3, r3, #28
 800944a:	d501      	bpl.n	8009450 <_vfiprintf_r+0x3c>
 800944c:	692b      	ldr	r3, [r5, #16]
 800944e:	b9eb      	cbnz	r3, 800948c <_vfiprintf_r+0x78>
 8009450:	4629      	mov	r1, r5
 8009452:	4630      	mov	r0, r6
 8009454:	f000 f96e 	bl	8009734 <__swsetup_r>
 8009458:	b1c0      	cbz	r0, 800948c <_vfiprintf_r+0x78>
 800945a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800945c:	07dc      	lsls	r4, r3, #31
 800945e:	d50e      	bpl.n	800947e <_vfiprintf_r+0x6a>
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	b01d      	add	sp, #116	; 0x74
 8009466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946a:	4b7b      	ldr	r3, [pc, #492]	; (8009658 <_vfiprintf_r+0x244>)
 800946c:	429d      	cmp	r5, r3
 800946e:	d101      	bne.n	8009474 <_vfiprintf_r+0x60>
 8009470:	68b5      	ldr	r5, [r6, #8]
 8009472:	e7df      	b.n	8009434 <_vfiprintf_r+0x20>
 8009474:	4b79      	ldr	r3, [pc, #484]	; (800965c <_vfiprintf_r+0x248>)
 8009476:	429d      	cmp	r5, r3
 8009478:	bf08      	it	eq
 800947a:	68f5      	ldreq	r5, [r6, #12]
 800947c:	e7da      	b.n	8009434 <_vfiprintf_r+0x20>
 800947e:	89ab      	ldrh	r3, [r5, #12]
 8009480:	0598      	lsls	r0, r3, #22
 8009482:	d4ed      	bmi.n	8009460 <_vfiprintf_r+0x4c>
 8009484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009486:	f000 fb84 	bl	8009b92 <__retarget_lock_release_recursive>
 800948a:	e7e9      	b.n	8009460 <_vfiprintf_r+0x4c>
 800948c:	2300      	movs	r3, #0
 800948e:	9309      	str	r3, [sp, #36]	; 0x24
 8009490:	2320      	movs	r3, #32
 8009492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009496:	f8cd 800c 	str.w	r8, [sp, #12]
 800949a:	2330      	movs	r3, #48	; 0x30
 800949c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009660 <_vfiprintf_r+0x24c>
 80094a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094a4:	f04f 0901 	mov.w	r9, #1
 80094a8:	4623      	mov	r3, r4
 80094aa:	469a      	mov	sl, r3
 80094ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094b0:	b10a      	cbz	r2, 80094b6 <_vfiprintf_r+0xa2>
 80094b2:	2a25      	cmp	r2, #37	; 0x25
 80094b4:	d1f9      	bne.n	80094aa <_vfiprintf_r+0x96>
 80094b6:	ebba 0b04 	subs.w	fp, sl, r4
 80094ba:	d00b      	beq.n	80094d4 <_vfiprintf_r+0xc0>
 80094bc:	465b      	mov	r3, fp
 80094be:	4622      	mov	r2, r4
 80094c0:	4629      	mov	r1, r5
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff ff94 	bl	80093f0 <__sfputs_r>
 80094c8:	3001      	adds	r0, #1
 80094ca:	f000 80aa 	beq.w	8009622 <_vfiprintf_r+0x20e>
 80094ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094d0:	445a      	add	r2, fp
 80094d2:	9209      	str	r2, [sp, #36]	; 0x24
 80094d4:	f89a 3000 	ldrb.w	r3, [sl]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 80a2 	beq.w	8009622 <_vfiprintf_r+0x20e>
 80094de:	2300      	movs	r3, #0
 80094e0:	f04f 32ff 	mov.w	r2, #4294967295
 80094e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e8:	f10a 0a01 	add.w	sl, sl, #1
 80094ec:	9304      	str	r3, [sp, #16]
 80094ee:	9307      	str	r3, [sp, #28]
 80094f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094f4:	931a      	str	r3, [sp, #104]	; 0x68
 80094f6:	4654      	mov	r4, sl
 80094f8:	2205      	movs	r2, #5
 80094fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fe:	4858      	ldr	r0, [pc, #352]	; (8009660 <_vfiprintf_r+0x24c>)
 8009500:	f7f6 fe6e 	bl	80001e0 <memchr>
 8009504:	9a04      	ldr	r2, [sp, #16]
 8009506:	b9d8      	cbnz	r0, 8009540 <_vfiprintf_r+0x12c>
 8009508:	06d1      	lsls	r1, r2, #27
 800950a:	bf44      	itt	mi
 800950c:	2320      	movmi	r3, #32
 800950e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009512:	0713      	lsls	r3, r2, #28
 8009514:	bf44      	itt	mi
 8009516:	232b      	movmi	r3, #43	; 0x2b
 8009518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800951c:	f89a 3000 	ldrb.w	r3, [sl]
 8009520:	2b2a      	cmp	r3, #42	; 0x2a
 8009522:	d015      	beq.n	8009550 <_vfiprintf_r+0x13c>
 8009524:	9a07      	ldr	r2, [sp, #28]
 8009526:	4654      	mov	r4, sl
 8009528:	2000      	movs	r0, #0
 800952a:	f04f 0c0a 	mov.w	ip, #10
 800952e:	4621      	mov	r1, r4
 8009530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009534:	3b30      	subs	r3, #48	; 0x30
 8009536:	2b09      	cmp	r3, #9
 8009538:	d94e      	bls.n	80095d8 <_vfiprintf_r+0x1c4>
 800953a:	b1b0      	cbz	r0, 800956a <_vfiprintf_r+0x156>
 800953c:	9207      	str	r2, [sp, #28]
 800953e:	e014      	b.n	800956a <_vfiprintf_r+0x156>
 8009540:	eba0 0308 	sub.w	r3, r0, r8
 8009544:	fa09 f303 	lsl.w	r3, r9, r3
 8009548:	4313      	orrs	r3, r2
 800954a:	9304      	str	r3, [sp, #16]
 800954c:	46a2      	mov	sl, r4
 800954e:	e7d2      	b.n	80094f6 <_vfiprintf_r+0xe2>
 8009550:	9b03      	ldr	r3, [sp, #12]
 8009552:	1d19      	adds	r1, r3, #4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	9103      	str	r1, [sp, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	bfbb      	ittet	lt
 800955c:	425b      	neglt	r3, r3
 800955e:	f042 0202 	orrlt.w	r2, r2, #2
 8009562:	9307      	strge	r3, [sp, #28]
 8009564:	9307      	strlt	r3, [sp, #28]
 8009566:	bfb8      	it	lt
 8009568:	9204      	strlt	r2, [sp, #16]
 800956a:	7823      	ldrb	r3, [r4, #0]
 800956c:	2b2e      	cmp	r3, #46	; 0x2e
 800956e:	d10c      	bne.n	800958a <_vfiprintf_r+0x176>
 8009570:	7863      	ldrb	r3, [r4, #1]
 8009572:	2b2a      	cmp	r3, #42	; 0x2a
 8009574:	d135      	bne.n	80095e2 <_vfiprintf_r+0x1ce>
 8009576:	9b03      	ldr	r3, [sp, #12]
 8009578:	1d1a      	adds	r2, r3, #4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	9203      	str	r2, [sp, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfb8      	it	lt
 8009582:	f04f 33ff 	movlt.w	r3, #4294967295
 8009586:	3402      	adds	r4, #2
 8009588:	9305      	str	r3, [sp, #20]
 800958a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009670 <_vfiprintf_r+0x25c>
 800958e:	7821      	ldrb	r1, [r4, #0]
 8009590:	2203      	movs	r2, #3
 8009592:	4650      	mov	r0, sl
 8009594:	f7f6 fe24 	bl	80001e0 <memchr>
 8009598:	b140      	cbz	r0, 80095ac <_vfiprintf_r+0x198>
 800959a:	2340      	movs	r3, #64	; 0x40
 800959c:	eba0 000a 	sub.w	r0, r0, sl
 80095a0:	fa03 f000 	lsl.w	r0, r3, r0
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	4303      	orrs	r3, r0
 80095a8:	3401      	adds	r4, #1
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b0:	482c      	ldr	r0, [pc, #176]	; (8009664 <_vfiprintf_r+0x250>)
 80095b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095b6:	2206      	movs	r2, #6
 80095b8:	f7f6 fe12 	bl	80001e0 <memchr>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d03f      	beq.n	8009640 <_vfiprintf_r+0x22c>
 80095c0:	4b29      	ldr	r3, [pc, #164]	; (8009668 <_vfiprintf_r+0x254>)
 80095c2:	bb1b      	cbnz	r3, 800960c <_vfiprintf_r+0x1f8>
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	3307      	adds	r3, #7
 80095c8:	f023 0307 	bic.w	r3, r3, #7
 80095cc:	3308      	adds	r3, #8
 80095ce:	9303      	str	r3, [sp, #12]
 80095d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d2:	443b      	add	r3, r7
 80095d4:	9309      	str	r3, [sp, #36]	; 0x24
 80095d6:	e767      	b.n	80094a8 <_vfiprintf_r+0x94>
 80095d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095dc:	460c      	mov	r4, r1
 80095de:	2001      	movs	r0, #1
 80095e0:	e7a5      	b.n	800952e <_vfiprintf_r+0x11a>
 80095e2:	2300      	movs	r3, #0
 80095e4:	3401      	adds	r4, #1
 80095e6:	9305      	str	r3, [sp, #20]
 80095e8:	4619      	mov	r1, r3
 80095ea:	f04f 0c0a 	mov.w	ip, #10
 80095ee:	4620      	mov	r0, r4
 80095f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f4:	3a30      	subs	r2, #48	; 0x30
 80095f6:	2a09      	cmp	r2, #9
 80095f8:	d903      	bls.n	8009602 <_vfiprintf_r+0x1ee>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0c5      	beq.n	800958a <_vfiprintf_r+0x176>
 80095fe:	9105      	str	r1, [sp, #20]
 8009600:	e7c3      	b.n	800958a <_vfiprintf_r+0x176>
 8009602:	fb0c 2101 	mla	r1, ip, r1, r2
 8009606:	4604      	mov	r4, r0
 8009608:	2301      	movs	r3, #1
 800960a:	e7f0      	b.n	80095ee <_vfiprintf_r+0x1da>
 800960c:	ab03      	add	r3, sp, #12
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	462a      	mov	r2, r5
 8009612:	4b16      	ldr	r3, [pc, #88]	; (800966c <_vfiprintf_r+0x258>)
 8009614:	a904      	add	r1, sp, #16
 8009616:	4630      	mov	r0, r6
 8009618:	f7fd fdd6 	bl	80071c8 <_printf_float>
 800961c:	4607      	mov	r7, r0
 800961e:	1c78      	adds	r0, r7, #1
 8009620:	d1d6      	bne.n	80095d0 <_vfiprintf_r+0x1bc>
 8009622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009624:	07d9      	lsls	r1, r3, #31
 8009626:	d405      	bmi.n	8009634 <_vfiprintf_r+0x220>
 8009628:	89ab      	ldrh	r3, [r5, #12]
 800962a:	059a      	lsls	r2, r3, #22
 800962c:	d402      	bmi.n	8009634 <_vfiprintf_r+0x220>
 800962e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009630:	f000 faaf 	bl	8009b92 <__retarget_lock_release_recursive>
 8009634:	89ab      	ldrh	r3, [r5, #12]
 8009636:	065b      	lsls	r3, r3, #25
 8009638:	f53f af12 	bmi.w	8009460 <_vfiprintf_r+0x4c>
 800963c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800963e:	e711      	b.n	8009464 <_vfiprintf_r+0x50>
 8009640:	ab03      	add	r3, sp, #12
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	462a      	mov	r2, r5
 8009646:	4b09      	ldr	r3, [pc, #36]	; (800966c <_vfiprintf_r+0x258>)
 8009648:	a904      	add	r1, sp, #16
 800964a:	4630      	mov	r0, r6
 800964c:	f7fe f860 	bl	8007710 <_printf_i>
 8009650:	e7e4      	b.n	800961c <_vfiprintf_r+0x208>
 8009652:	bf00      	nop
 8009654:	0800b63c 	.word	0x0800b63c
 8009658:	0800b65c 	.word	0x0800b65c
 800965c:	0800b61c 	.word	0x0800b61c
 8009660:	0800b4c4 	.word	0x0800b4c4
 8009664:	0800b4ce 	.word	0x0800b4ce
 8009668:	080071c9 	.word	0x080071c9
 800966c:	080093f1 	.word	0x080093f1
 8009670:	0800b4ca 	.word	0x0800b4ca

08009674 <__swbuf_r>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	460e      	mov	r6, r1
 8009678:	4614      	mov	r4, r2
 800967a:	4605      	mov	r5, r0
 800967c:	b118      	cbz	r0, 8009686 <__swbuf_r+0x12>
 800967e:	6983      	ldr	r3, [r0, #24]
 8009680:	b90b      	cbnz	r3, 8009686 <__swbuf_r+0x12>
 8009682:	f000 f9e7 	bl	8009a54 <__sinit>
 8009686:	4b21      	ldr	r3, [pc, #132]	; (800970c <__swbuf_r+0x98>)
 8009688:	429c      	cmp	r4, r3
 800968a:	d12b      	bne.n	80096e4 <__swbuf_r+0x70>
 800968c:	686c      	ldr	r4, [r5, #4]
 800968e:	69a3      	ldr	r3, [r4, #24]
 8009690:	60a3      	str	r3, [r4, #8]
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	071a      	lsls	r2, r3, #28
 8009696:	d52f      	bpl.n	80096f8 <__swbuf_r+0x84>
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	b36b      	cbz	r3, 80096f8 <__swbuf_r+0x84>
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	6820      	ldr	r0, [r4, #0]
 80096a0:	1ac0      	subs	r0, r0, r3
 80096a2:	6963      	ldr	r3, [r4, #20]
 80096a4:	b2f6      	uxtb	r6, r6
 80096a6:	4283      	cmp	r3, r0
 80096a8:	4637      	mov	r7, r6
 80096aa:	dc04      	bgt.n	80096b6 <__swbuf_r+0x42>
 80096ac:	4621      	mov	r1, r4
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 f93c 	bl	800992c <_fflush_r>
 80096b4:	bb30      	cbnz	r0, 8009704 <__swbuf_r+0x90>
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	60a3      	str	r3, [r4, #8]
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	6022      	str	r2, [r4, #0]
 80096c2:	701e      	strb	r6, [r3, #0]
 80096c4:	6963      	ldr	r3, [r4, #20]
 80096c6:	3001      	adds	r0, #1
 80096c8:	4283      	cmp	r3, r0
 80096ca:	d004      	beq.n	80096d6 <__swbuf_r+0x62>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	07db      	lsls	r3, r3, #31
 80096d0:	d506      	bpl.n	80096e0 <__swbuf_r+0x6c>
 80096d2:	2e0a      	cmp	r6, #10
 80096d4:	d104      	bne.n	80096e0 <__swbuf_r+0x6c>
 80096d6:	4621      	mov	r1, r4
 80096d8:	4628      	mov	r0, r5
 80096da:	f000 f927 	bl	800992c <_fflush_r>
 80096de:	b988      	cbnz	r0, 8009704 <__swbuf_r+0x90>
 80096e0:	4638      	mov	r0, r7
 80096e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e4:	4b0a      	ldr	r3, [pc, #40]	; (8009710 <__swbuf_r+0x9c>)
 80096e6:	429c      	cmp	r4, r3
 80096e8:	d101      	bne.n	80096ee <__swbuf_r+0x7a>
 80096ea:	68ac      	ldr	r4, [r5, #8]
 80096ec:	e7cf      	b.n	800968e <__swbuf_r+0x1a>
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <__swbuf_r+0xa0>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	bf08      	it	eq
 80096f4:	68ec      	ldreq	r4, [r5, #12]
 80096f6:	e7ca      	b.n	800968e <__swbuf_r+0x1a>
 80096f8:	4621      	mov	r1, r4
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 f81a 	bl	8009734 <__swsetup_r>
 8009700:	2800      	cmp	r0, #0
 8009702:	d0cb      	beq.n	800969c <__swbuf_r+0x28>
 8009704:	f04f 37ff 	mov.w	r7, #4294967295
 8009708:	e7ea      	b.n	80096e0 <__swbuf_r+0x6c>
 800970a:	bf00      	nop
 800970c:	0800b63c 	.word	0x0800b63c
 8009710:	0800b65c 	.word	0x0800b65c
 8009714:	0800b61c 	.word	0x0800b61c

08009718 <__ascii_wctomb>:
 8009718:	b149      	cbz	r1, 800972e <__ascii_wctomb+0x16>
 800971a:	2aff      	cmp	r2, #255	; 0xff
 800971c:	bf85      	ittet	hi
 800971e:	238a      	movhi	r3, #138	; 0x8a
 8009720:	6003      	strhi	r3, [r0, #0]
 8009722:	700a      	strbls	r2, [r1, #0]
 8009724:	f04f 30ff 	movhi.w	r0, #4294967295
 8009728:	bf98      	it	ls
 800972a:	2001      	movls	r0, #1
 800972c:	4770      	bx	lr
 800972e:	4608      	mov	r0, r1
 8009730:	4770      	bx	lr
	...

08009734 <__swsetup_r>:
 8009734:	4b32      	ldr	r3, [pc, #200]	; (8009800 <__swsetup_r+0xcc>)
 8009736:	b570      	push	{r4, r5, r6, lr}
 8009738:	681d      	ldr	r5, [r3, #0]
 800973a:	4606      	mov	r6, r0
 800973c:	460c      	mov	r4, r1
 800973e:	b125      	cbz	r5, 800974a <__swsetup_r+0x16>
 8009740:	69ab      	ldr	r3, [r5, #24]
 8009742:	b913      	cbnz	r3, 800974a <__swsetup_r+0x16>
 8009744:	4628      	mov	r0, r5
 8009746:	f000 f985 	bl	8009a54 <__sinit>
 800974a:	4b2e      	ldr	r3, [pc, #184]	; (8009804 <__swsetup_r+0xd0>)
 800974c:	429c      	cmp	r4, r3
 800974e:	d10f      	bne.n	8009770 <__swsetup_r+0x3c>
 8009750:	686c      	ldr	r4, [r5, #4]
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009758:	0719      	lsls	r1, r3, #28
 800975a:	d42c      	bmi.n	80097b6 <__swsetup_r+0x82>
 800975c:	06dd      	lsls	r5, r3, #27
 800975e:	d411      	bmi.n	8009784 <__swsetup_r+0x50>
 8009760:	2309      	movs	r3, #9
 8009762:	6033      	str	r3, [r6, #0]
 8009764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	f04f 30ff 	mov.w	r0, #4294967295
 800976e:	e03e      	b.n	80097ee <__swsetup_r+0xba>
 8009770:	4b25      	ldr	r3, [pc, #148]	; (8009808 <__swsetup_r+0xd4>)
 8009772:	429c      	cmp	r4, r3
 8009774:	d101      	bne.n	800977a <__swsetup_r+0x46>
 8009776:	68ac      	ldr	r4, [r5, #8]
 8009778:	e7eb      	b.n	8009752 <__swsetup_r+0x1e>
 800977a:	4b24      	ldr	r3, [pc, #144]	; (800980c <__swsetup_r+0xd8>)
 800977c:	429c      	cmp	r4, r3
 800977e:	bf08      	it	eq
 8009780:	68ec      	ldreq	r4, [r5, #12]
 8009782:	e7e6      	b.n	8009752 <__swsetup_r+0x1e>
 8009784:	0758      	lsls	r0, r3, #29
 8009786:	d512      	bpl.n	80097ae <__swsetup_r+0x7a>
 8009788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800978a:	b141      	cbz	r1, 800979e <__swsetup_r+0x6a>
 800978c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009790:	4299      	cmp	r1, r3
 8009792:	d002      	beq.n	800979a <__swsetup_r+0x66>
 8009794:	4630      	mov	r0, r6
 8009796:	f7ff fb31 	bl	8008dfc <_free_r>
 800979a:	2300      	movs	r3, #0
 800979c:	6363      	str	r3, [r4, #52]	; 0x34
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097a4:	81a3      	strh	r3, [r4, #12]
 80097a6:	2300      	movs	r3, #0
 80097a8:	6063      	str	r3, [r4, #4]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f043 0308 	orr.w	r3, r3, #8
 80097b4:	81a3      	strh	r3, [r4, #12]
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	b94b      	cbnz	r3, 80097ce <__swsetup_r+0x9a>
 80097ba:	89a3      	ldrh	r3, [r4, #12]
 80097bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097c4:	d003      	beq.n	80097ce <__swsetup_r+0x9a>
 80097c6:	4621      	mov	r1, r4
 80097c8:	4630      	mov	r0, r6
 80097ca:	f000 fa09 	bl	8009be0 <__smakebuf_r>
 80097ce:	89a0      	ldrh	r0, [r4, #12]
 80097d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097d4:	f010 0301 	ands.w	r3, r0, #1
 80097d8:	d00a      	beq.n	80097f0 <__swsetup_r+0xbc>
 80097da:	2300      	movs	r3, #0
 80097dc:	60a3      	str	r3, [r4, #8]
 80097de:	6963      	ldr	r3, [r4, #20]
 80097e0:	425b      	negs	r3, r3
 80097e2:	61a3      	str	r3, [r4, #24]
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	b943      	cbnz	r3, 80097fa <__swsetup_r+0xc6>
 80097e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097ec:	d1ba      	bne.n	8009764 <__swsetup_r+0x30>
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	0781      	lsls	r1, r0, #30
 80097f2:	bf58      	it	pl
 80097f4:	6963      	ldrpl	r3, [r4, #20]
 80097f6:	60a3      	str	r3, [r4, #8]
 80097f8:	e7f4      	b.n	80097e4 <__swsetup_r+0xb0>
 80097fa:	2000      	movs	r0, #0
 80097fc:	e7f7      	b.n	80097ee <__swsetup_r+0xba>
 80097fe:	bf00      	nop
 8009800:	2000000c 	.word	0x2000000c
 8009804:	0800b63c 	.word	0x0800b63c
 8009808:	0800b65c 	.word	0x0800b65c
 800980c:	0800b61c 	.word	0x0800b61c

08009810 <abort>:
 8009810:	b508      	push	{r3, lr}
 8009812:	2006      	movs	r0, #6
 8009814:	f000 fa54 	bl	8009cc0 <raise>
 8009818:	2001      	movs	r0, #1
 800981a:	f7f8 fccd 	bl	80021b8 <_exit>
	...

08009820 <__sflush_r>:
 8009820:	898a      	ldrh	r2, [r1, #12]
 8009822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009826:	4605      	mov	r5, r0
 8009828:	0710      	lsls	r0, r2, #28
 800982a:	460c      	mov	r4, r1
 800982c:	d458      	bmi.n	80098e0 <__sflush_r+0xc0>
 800982e:	684b      	ldr	r3, [r1, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc05      	bgt.n	8009840 <__sflush_r+0x20>
 8009834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	dc02      	bgt.n	8009840 <__sflush_r+0x20>
 800983a:	2000      	movs	r0, #0
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009842:	2e00      	cmp	r6, #0
 8009844:	d0f9      	beq.n	800983a <__sflush_r+0x1a>
 8009846:	2300      	movs	r3, #0
 8009848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800984c:	682f      	ldr	r7, [r5, #0]
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	d032      	beq.n	80098b8 <__sflush_r+0x98>
 8009852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	075a      	lsls	r2, r3, #29
 8009858:	d505      	bpl.n	8009866 <__sflush_r+0x46>
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	1ac0      	subs	r0, r0, r3
 800985e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009860:	b10b      	cbz	r3, 8009866 <__sflush_r+0x46>
 8009862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009864:	1ac0      	subs	r0, r0, r3
 8009866:	2300      	movs	r3, #0
 8009868:	4602      	mov	r2, r0
 800986a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800986c:	6a21      	ldr	r1, [r4, #32]
 800986e:	4628      	mov	r0, r5
 8009870:	47b0      	blx	r6
 8009872:	1c43      	adds	r3, r0, #1
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	d106      	bne.n	8009886 <__sflush_r+0x66>
 8009878:	6829      	ldr	r1, [r5, #0]
 800987a:	291d      	cmp	r1, #29
 800987c:	d82c      	bhi.n	80098d8 <__sflush_r+0xb8>
 800987e:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <__sflush_r+0x108>)
 8009880:	40ca      	lsrs	r2, r1
 8009882:	07d6      	lsls	r6, r2, #31
 8009884:	d528      	bpl.n	80098d8 <__sflush_r+0xb8>
 8009886:	2200      	movs	r2, #0
 8009888:	6062      	str	r2, [r4, #4]
 800988a:	04d9      	lsls	r1, r3, #19
 800988c:	6922      	ldr	r2, [r4, #16]
 800988e:	6022      	str	r2, [r4, #0]
 8009890:	d504      	bpl.n	800989c <__sflush_r+0x7c>
 8009892:	1c42      	adds	r2, r0, #1
 8009894:	d101      	bne.n	800989a <__sflush_r+0x7a>
 8009896:	682b      	ldr	r3, [r5, #0]
 8009898:	b903      	cbnz	r3, 800989c <__sflush_r+0x7c>
 800989a:	6560      	str	r0, [r4, #84]	; 0x54
 800989c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800989e:	602f      	str	r7, [r5, #0]
 80098a0:	2900      	cmp	r1, #0
 80098a2:	d0ca      	beq.n	800983a <__sflush_r+0x1a>
 80098a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098a8:	4299      	cmp	r1, r3
 80098aa:	d002      	beq.n	80098b2 <__sflush_r+0x92>
 80098ac:	4628      	mov	r0, r5
 80098ae:	f7ff faa5 	bl	8008dfc <_free_r>
 80098b2:	2000      	movs	r0, #0
 80098b4:	6360      	str	r0, [r4, #52]	; 0x34
 80098b6:	e7c1      	b.n	800983c <__sflush_r+0x1c>
 80098b8:	6a21      	ldr	r1, [r4, #32]
 80098ba:	2301      	movs	r3, #1
 80098bc:	4628      	mov	r0, r5
 80098be:	47b0      	blx	r6
 80098c0:	1c41      	adds	r1, r0, #1
 80098c2:	d1c7      	bne.n	8009854 <__sflush_r+0x34>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0c4      	beq.n	8009854 <__sflush_r+0x34>
 80098ca:	2b1d      	cmp	r3, #29
 80098cc:	d001      	beq.n	80098d2 <__sflush_r+0xb2>
 80098ce:	2b16      	cmp	r3, #22
 80098d0:	d101      	bne.n	80098d6 <__sflush_r+0xb6>
 80098d2:	602f      	str	r7, [r5, #0]
 80098d4:	e7b1      	b.n	800983a <__sflush_r+0x1a>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	e7ad      	b.n	800983c <__sflush_r+0x1c>
 80098e0:	690f      	ldr	r7, [r1, #16]
 80098e2:	2f00      	cmp	r7, #0
 80098e4:	d0a9      	beq.n	800983a <__sflush_r+0x1a>
 80098e6:	0793      	lsls	r3, r2, #30
 80098e8:	680e      	ldr	r6, [r1, #0]
 80098ea:	bf08      	it	eq
 80098ec:	694b      	ldreq	r3, [r1, #20]
 80098ee:	600f      	str	r7, [r1, #0]
 80098f0:	bf18      	it	ne
 80098f2:	2300      	movne	r3, #0
 80098f4:	eba6 0807 	sub.w	r8, r6, r7
 80098f8:	608b      	str	r3, [r1, #8]
 80098fa:	f1b8 0f00 	cmp.w	r8, #0
 80098fe:	dd9c      	ble.n	800983a <__sflush_r+0x1a>
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009904:	4643      	mov	r3, r8
 8009906:	463a      	mov	r2, r7
 8009908:	4628      	mov	r0, r5
 800990a:	47b0      	blx	r6
 800990c:	2800      	cmp	r0, #0
 800990e:	dc06      	bgt.n	800991e <__sflush_r+0xfe>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	f04f 30ff 	mov.w	r0, #4294967295
 800991c:	e78e      	b.n	800983c <__sflush_r+0x1c>
 800991e:	4407      	add	r7, r0
 8009920:	eba8 0800 	sub.w	r8, r8, r0
 8009924:	e7e9      	b.n	80098fa <__sflush_r+0xda>
 8009926:	bf00      	nop
 8009928:	20400001 	.word	0x20400001

0800992c <_fflush_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	690b      	ldr	r3, [r1, #16]
 8009930:	4605      	mov	r5, r0
 8009932:	460c      	mov	r4, r1
 8009934:	b913      	cbnz	r3, 800993c <_fflush_r+0x10>
 8009936:	2500      	movs	r5, #0
 8009938:	4628      	mov	r0, r5
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	b118      	cbz	r0, 8009946 <_fflush_r+0x1a>
 800993e:	6983      	ldr	r3, [r0, #24]
 8009940:	b90b      	cbnz	r3, 8009946 <_fflush_r+0x1a>
 8009942:	f000 f887 	bl	8009a54 <__sinit>
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <_fflush_r+0x6c>)
 8009948:	429c      	cmp	r4, r3
 800994a:	d11b      	bne.n	8009984 <_fflush_r+0x58>
 800994c:	686c      	ldr	r4, [r5, #4]
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0ef      	beq.n	8009936 <_fflush_r+0xa>
 8009956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009958:	07d0      	lsls	r0, r2, #31
 800995a:	d404      	bmi.n	8009966 <_fflush_r+0x3a>
 800995c:	0599      	lsls	r1, r3, #22
 800995e:	d402      	bmi.n	8009966 <_fflush_r+0x3a>
 8009960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009962:	f000 f915 	bl	8009b90 <__retarget_lock_acquire_recursive>
 8009966:	4628      	mov	r0, r5
 8009968:	4621      	mov	r1, r4
 800996a:	f7ff ff59 	bl	8009820 <__sflush_r>
 800996e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009970:	07da      	lsls	r2, r3, #31
 8009972:	4605      	mov	r5, r0
 8009974:	d4e0      	bmi.n	8009938 <_fflush_r+0xc>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	059b      	lsls	r3, r3, #22
 800997a:	d4dd      	bmi.n	8009938 <_fflush_r+0xc>
 800997c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800997e:	f000 f908 	bl	8009b92 <__retarget_lock_release_recursive>
 8009982:	e7d9      	b.n	8009938 <_fflush_r+0xc>
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <_fflush_r+0x70>)
 8009986:	429c      	cmp	r4, r3
 8009988:	d101      	bne.n	800998e <_fflush_r+0x62>
 800998a:	68ac      	ldr	r4, [r5, #8]
 800998c:	e7df      	b.n	800994e <_fflush_r+0x22>
 800998e:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <_fflush_r+0x74>)
 8009990:	429c      	cmp	r4, r3
 8009992:	bf08      	it	eq
 8009994:	68ec      	ldreq	r4, [r5, #12]
 8009996:	e7da      	b.n	800994e <_fflush_r+0x22>
 8009998:	0800b63c 	.word	0x0800b63c
 800999c:	0800b65c 	.word	0x0800b65c
 80099a0:	0800b61c 	.word	0x0800b61c

080099a4 <std>:
 80099a4:	2300      	movs	r3, #0
 80099a6:	b510      	push	{r4, lr}
 80099a8:	4604      	mov	r4, r0
 80099aa:	e9c0 3300 	strd	r3, r3, [r0]
 80099ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099b2:	6083      	str	r3, [r0, #8]
 80099b4:	8181      	strh	r1, [r0, #12]
 80099b6:	6643      	str	r3, [r0, #100]	; 0x64
 80099b8:	81c2      	strh	r2, [r0, #14]
 80099ba:	6183      	str	r3, [r0, #24]
 80099bc:	4619      	mov	r1, r3
 80099be:	2208      	movs	r2, #8
 80099c0:	305c      	adds	r0, #92	; 0x5c
 80099c2:	f7fd fb59 	bl	8007078 <memset>
 80099c6:	4b05      	ldr	r3, [pc, #20]	; (80099dc <std+0x38>)
 80099c8:	6263      	str	r3, [r4, #36]	; 0x24
 80099ca:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <std+0x3c>)
 80099cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <std+0x40>)
 80099d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099d2:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <std+0x44>)
 80099d4:	6224      	str	r4, [r4, #32]
 80099d6:	6323      	str	r3, [r4, #48]	; 0x30
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	bf00      	nop
 80099dc:	08009cf9 	.word	0x08009cf9
 80099e0:	08009d1b 	.word	0x08009d1b
 80099e4:	08009d53 	.word	0x08009d53
 80099e8:	08009d77 	.word	0x08009d77

080099ec <_cleanup_r>:
 80099ec:	4901      	ldr	r1, [pc, #4]	; (80099f4 <_cleanup_r+0x8>)
 80099ee:	f000 b8af 	b.w	8009b50 <_fwalk_reent>
 80099f2:	bf00      	nop
 80099f4:	0800992d 	.word	0x0800992d

080099f8 <__sfmoreglue>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	2268      	movs	r2, #104	; 0x68
 80099fc:	1e4d      	subs	r5, r1, #1
 80099fe:	4355      	muls	r5, r2
 8009a00:	460e      	mov	r6, r1
 8009a02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a06:	f7ff fa65 	bl	8008ed4 <_malloc_r>
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	b140      	cbz	r0, 8009a20 <__sfmoreglue+0x28>
 8009a0e:	2100      	movs	r1, #0
 8009a10:	e9c0 1600 	strd	r1, r6, [r0]
 8009a14:	300c      	adds	r0, #12
 8009a16:	60a0      	str	r0, [r4, #8]
 8009a18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a1c:	f7fd fb2c 	bl	8007078 <memset>
 8009a20:	4620      	mov	r0, r4
 8009a22:	bd70      	pop	{r4, r5, r6, pc}

08009a24 <__sfp_lock_acquire>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__sfp_lock_acquire+0x8>)
 8009a26:	f000 b8b3 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	200004b5 	.word	0x200004b5

08009a30 <__sfp_lock_release>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__sfp_lock_release+0x8>)
 8009a32:	f000 b8ae 	b.w	8009b92 <__retarget_lock_release_recursive>
 8009a36:	bf00      	nop
 8009a38:	200004b5 	.word	0x200004b5

08009a3c <__sinit_lock_acquire>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__sinit_lock_acquire+0x8>)
 8009a3e:	f000 b8a7 	b.w	8009b90 <__retarget_lock_acquire_recursive>
 8009a42:	bf00      	nop
 8009a44:	200004b6 	.word	0x200004b6

08009a48 <__sinit_lock_release>:
 8009a48:	4801      	ldr	r0, [pc, #4]	; (8009a50 <__sinit_lock_release+0x8>)
 8009a4a:	f000 b8a2 	b.w	8009b92 <__retarget_lock_release_recursive>
 8009a4e:	bf00      	nop
 8009a50:	200004b6 	.word	0x200004b6

08009a54 <__sinit>:
 8009a54:	b510      	push	{r4, lr}
 8009a56:	4604      	mov	r4, r0
 8009a58:	f7ff fff0 	bl	8009a3c <__sinit_lock_acquire>
 8009a5c:	69a3      	ldr	r3, [r4, #24]
 8009a5e:	b11b      	cbz	r3, 8009a68 <__sinit+0x14>
 8009a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a64:	f7ff bff0 	b.w	8009a48 <__sinit_lock_release>
 8009a68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a6c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <__sinit+0x68>)
 8009a70:	4a13      	ldr	r2, [pc, #76]	; (8009ac0 <__sinit+0x6c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	bf04      	itt	eq
 8009a7a:	2301      	moveq	r3, #1
 8009a7c:	61a3      	streq	r3, [r4, #24]
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 f820 	bl	8009ac4 <__sfp>
 8009a84:	6060      	str	r0, [r4, #4]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 f81c 	bl	8009ac4 <__sfp>
 8009a8c:	60a0      	str	r0, [r4, #8]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 f818 	bl	8009ac4 <__sfp>
 8009a94:	2200      	movs	r2, #0
 8009a96:	60e0      	str	r0, [r4, #12]
 8009a98:	2104      	movs	r1, #4
 8009a9a:	6860      	ldr	r0, [r4, #4]
 8009a9c:	f7ff ff82 	bl	80099a4 <std>
 8009aa0:	68a0      	ldr	r0, [r4, #8]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	2109      	movs	r1, #9
 8009aa6:	f7ff ff7d 	bl	80099a4 <std>
 8009aaa:	68e0      	ldr	r0, [r4, #12]
 8009aac:	2202      	movs	r2, #2
 8009aae:	2112      	movs	r1, #18
 8009ab0:	f7ff ff78 	bl	80099a4 <std>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	61a3      	str	r3, [r4, #24]
 8009ab8:	e7d2      	b.n	8009a60 <__sinit+0xc>
 8009aba:	bf00      	nop
 8009abc:	0800b2a4 	.word	0x0800b2a4
 8009ac0:	080099ed 	.word	0x080099ed

08009ac4 <__sfp>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	4607      	mov	r7, r0
 8009ac8:	f7ff ffac 	bl	8009a24 <__sfp_lock_acquire>
 8009acc:	4b1e      	ldr	r3, [pc, #120]	; (8009b48 <__sfp+0x84>)
 8009ace:	681e      	ldr	r6, [r3, #0]
 8009ad0:	69b3      	ldr	r3, [r6, #24]
 8009ad2:	b913      	cbnz	r3, 8009ada <__sfp+0x16>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f7ff ffbd 	bl	8009a54 <__sinit>
 8009ada:	3648      	adds	r6, #72	; 0x48
 8009adc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	d503      	bpl.n	8009aec <__sfp+0x28>
 8009ae4:	6833      	ldr	r3, [r6, #0]
 8009ae6:	b30b      	cbz	r3, 8009b2c <__sfp+0x68>
 8009ae8:	6836      	ldr	r6, [r6, #0]
 8009aea:	e7f7      	b.n	8009adc <__sfp+0x18>
 8009aec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009af0:	b9d5      	cbnz	r5, 8009b28 <__sfp+0x64>
 8009af2:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <__sfp+0x88>)
 8009af4:	60e3      	str	r3, [r4, #12]
 8009af6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009afa:	6665      	str	r5, [r4, #100]	; 0x64
 8009afc:	f000 f847 	bl	8009b8e <__retarget_lock_init_recursive>
 8009b00:	f7ff ff96 	bl	8009a30 <__sfp_lock_release>
 8009b04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b0c:	6025      	str	r5, [r4, #0]
 8009b0e:	61a5      	str	r5, [r4, #24]
 8009b10:	2208      	movs	r2, #8
 8009b12:	4629      	mov	r1, r5
 8009b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b18:	f7fd faae 	bl	8007078 <memset>
 8009b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b24:	4620      	mov	r0, r4
 8009b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b28:	3468      	adds	r4, #104	; 0x68
 8009b2a:	e7d9      	b.n	8009ae0 <__sfp+0x1c>
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	4638      	mov	r0, r7
 8009b30:	f7ff ff62 	bl	80099f8 <__sfmoreglue>
 8009b34:	4604      	mov	r4, r0
 8009b36:	6030      	str	r0, [r6, #0]
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1d5      	bne.n	8009ae8 <__sfp+0x24>
 8009b3c:	f7ff ff78 	bl	8009a30 <__sfp_lock_release>
 8009b40:	230c      	movs	r3, #12
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	e7ee      	b.n	8009b24 <__sfp+0x60>
 8009b46:	bf00      	nop
 8009b48:	0800b2a4 	.word	0x0800b2a4
 8009b4c:	ffff0001 	.word	0xffff0001

08009b50 <_fwalk_reent>:
 8009b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4606      	mov	r6, r0
 8009b56:	4688      	mov	r8, r1
 8009b58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b5c:	2700      	movs	r7, #0
 8009b5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b62:	f1b9 0901 	subs.w	r9, r9, #1
 8009b66:	d505      	bpl.n	8009b74 <_fwalk_reent+0x24>
 8009b68:	6824      	ldr	r4, [r4, #0]
 8009b6a:	2c00      	cmp	r4, #0
 8009b6c:	d1f7      	bne.n	8009b5e <_fwalk_reent+0xe>
 8009b6e:	4638      	mov	r0, r7
 8009b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b74:	89ab      	ldrh	r3, [r5, #12]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d907      	bls.n	8009b8a <_fwalk_reent+0x3a>
 8009b7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	d003      	beq.n	8009b8a <_fwalk_reent+0x3a>
 8009b82:	4629      	mov	r1, r5
 8009b84:	4630      	mov	r0, r6
 8009b86:	47c0      	blx	r8
 8009b88:	4307      	orrs	r7, r0
 8009b8a:	3568      	adds	r5, #104	; 0x68
 8009b8c:	e7e9      	b.n	8009b62 <_fwalk_reent+0x12>

08009b8e <__retarget_lock_init_recursive>:
 8009b8e:	4770      	bx	lr

08009b90 <__retarget_lock_acquire_recursive>:
 8009b90:	4770      	bx	lr

08009b92 <__retarget_lock_release_recursive>:
 8009b92:	4770      	bx	lr

08009b94 <__swhatbuf_r>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	460e      	mov	r6, r1
 8009b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	b096      	sub	sp, #88	; 0x58
 8009ba0:	4614      	mov	r4, r2
 8009ba2:	461d      	mov	r5, r3
 8009ba4:	da08      	bge.n	8009bb8 <__swhatbuf_r+0x24>
 8009ba6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	602a      	str	r2, [r5, #0]
 8009bae:	061a      	lsls	r2, r3, #24
 8009bb0:	d410      	bmi.n	8009bd4 <__swhatbuf_r+0x40>
 8009bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb6:	e00e      	b.n	8009bd6 <__swhatbuf_r+0x42>
 8009bb8:	466a      	mov	r2, sp
 8009bba:	f000 f903 	bl	8009dc4 <_fstat_r>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	dbf1      	blt.n	8009ba6 <__swhatbuf_r+0x12>
 8009bc2:	9a01      	ldr	r2, [sp, #4]
 8009bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bcc:	425a      	negs	r2, r3
 8009bce:	415a      	adcs	r2, r3
 8009bd0:	602a      	str	r2, [r5, #0]
 8009bd2:	e7ee      	b.n	8009bb2 <__swhatbuf_r+0x1e>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	b016      	add	sp, #88	; 0x58
 8009bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009be0 <__smakebuf_r>:
 8009be0:	898b      	ldrh	r3, [r1, #12]
 8009be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009be4:	079d      	lsls	r5, r3, #30
 8009be6:	4606      	mov	r6, r0
 8009be8:	460c      	mov	r4, r1
 8009bea:	d507      	bpl.n	8009bfc <__smakebuf_r+0x1c>
 8009bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	6123      	str	r3, [r4, #16]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	6163      	str	r3, [r4, #20]
 8009bf8:	b002      	add	sp, #8
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	ab01      	add	r3, sp, #4
 8009bfe:	466a      	mov	r2, sp
 8009c00:	f7ff ffc8 	bl	8009b94 <__swhatbuf_r>
 8009c04:	9900      	ldr	r1, [sp, #0]
 8009c06:	4605      	mov	r5, r0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f7ff f963 	bl	8008ed4 <_malloc_r>
 8009c0e:	b948      	cbnz	r0, 8009c24 <__smakebuf_r+0x44>
 8009c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c14:	059a      	lsls	r2, r3, #22
 8009c16:	d4ef      	bmi.n	8009bf8 <__smakebuf_r+0x18>
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	e7e3      	b.n	8009bec <__smakebuf_r+0xc>
 8009c24:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <__smakebuf_r+0x7c>)
 8009c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	6020      	str	r0, [r4, #0]
 8009c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	6163      	str	r3, [r4, #20]
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	6120      	str	r0, [r4, #16]
 8009c3a:	b15b      	cbz	r3, 8009c54 <__smakebuf_r+0x74>
 8009c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c40:	4630      	mov	r0, r6
 8009c42:	f000 f8d1 	bl	8009de8 <_isatty_r>
 8009c46:	b128      	cbz	r0, 8009c54 <__smakebuf_r+0x74>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f023 0303 	bic.w	r3, r3, #3
 8009c4e:	f043 0301 	orr.w	r3, r3, #1
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	89a0      	ldrh	r0, [r4, #12]
 8009c56:	4305      	orrs	r5, r0
 8009c58:	81a5      	strh	r5, [r4, #12]
 8009c5a:	e7cd      	b.n	8009bf8 <__smakebuf_r+0x18>
 8009c5c:	080099ed 	.word	0x080099ed

08009c60 <_malloc_usable_size_r>:
 8009c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c64:	1f18      	subs	r0, r3, #4
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfbc      	itt	lt
 8009c6a:	580b      	ldrlt	r3, [r1, r0]
 8009c6c:	18c0      	addlt	r0, r0, r3
 8009c6e:	4770      	bx	lr

08009c70 <_raise_r>:
 8009c70:	291f      	cmp	r1, #31
 8009c72:	b538      	push	{r3, r4, r5, lr}
 8009c74:	4604      	mov	r4, r0
 8009c76:	460d      	mov	r5, r1
 8009c78:	d904      	bls.n	8009c84 <_raise_r+0x14>
 8009c7a:	2316      	movs	r3, #22
 8009c7c:	6003      	str	r3, [r0, #0]
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c86:	b112      	cbz	r2, 8009c8e <_raise_r+0x1e>
 8009c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c8c:	b94b      	cbnz	r3, 8009ca2 <_raise_r+0x32>
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f830 	bl	8009cf4 <_getpid_r>
 8009c94:	462a      	mov	r2, r5
 8009c96:	4601      	mov	r1, r0
 8009c98:	4620      	mov	r0, r4
 8009c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c9e:	f000 b817 	b.w	8009cd0 <_kill_r>
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d00a      	beq.n	8009cbc <_raise_r+0x4c>
 8009ca6:	1c59      	adds	r1, r3, #1
 8009ca8:	d103      	bne.n	8009cb2 <_raise_r+0x42>
 8009caa:	2316      	movs	r3, #22
 8009cac:	6003      	str	r3, [r0, #0]
 8009cae:	2001      	movs	r0, #1
 8009cb0:	e7e7      	b.n	8009c82 <_raise_r+0x12>
 8009cb2:	2400      	movs	r4, #0
 8009cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cb8:	4628      	mov	r0, r5
 8009cba:	4798      	blx	r3
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	e7e0      	b.n	8009c82 <_raise_r+0x12>

08009cc0 <raise>:
 8009cc0:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <raise+0xc>)
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	f7ff bfd3 	b.w	8009c70 <_raise_r>
 8009cca:	bf00      	nop
 8009ccc:	2000000c 	.word	0x2000000c

08009cd0 <_kill_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4d07      	ldr	r5, [pc, #28]	; (8009cf0 <_kill_r+0x20>)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	f7f8 fa5b 	bl	8002198 <_kill>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	d102      	bne.n	8009cec <_kill_r+0x1c>
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	b103      	cbz	r3, 8009cec <_kill_r+0x1c>
 8009cea:	6023      	str	r3, [r4, #0]
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
 8009cee:	bf00      	nop
 8009cf0:	200004b0 	.word	0x200004b0

08009cf4 <_getpid_r>:
 8009cf4:	f7f8 ba48 	b.w	8002188 <_getpid>

08009cf8 <__sread>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d00:	f000 f894 	bl	8009e2c <_read_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	bfab      	itete	ge
 8009d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d0c:	181b      	addge	r3, r3, r0
 8009d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d12:	bfac      	ite	ge
 8009d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d16:	81a3      	strhlt	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__swrite>:
 8009d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1e:	461f      	mov	r7, r3
 8009d20:	898b      	ldrh	r3, [r1, #12]
 8009d22:	05db      	lsls	r3, r3, #23
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	4616      	mov	r6, r2
 8009d2a:	d505      	bpl.n	8009d38 <__swrite+0x1e>
 8009d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d30:	2302      	movs	r3, #2
 8009d32:	2200      	movs	r2, #0
 8009d34:	f000 f868 	bl	8009e08 <_lseek_r>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	4632      	mov	r2, r6
 8009d46:	463b      	mov	r3, r7
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4e:	f000 b817 	b.w	8009d80 <_write_r>

08009d52 <__sseek>:
 8009d52:	b510      	push	{r4, lr}
 8009d54:	460c      	mov	r4, r1
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	f000 f855 	bl	8009e08 <_lseek_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	bf15      	itete	ne
 8009d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d6e:	81a3      	strheq	r3, [r4, #12]
 8009d70:	bf18      	it	ne
 8009d72:	81a3      	strhne	r3, [r4, #12]
 8009d74:	bd10      	pop	{r4, pc}

08009d76 <__sclose>:
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 b813 	b.w	8009da4 <_close_r>
	...

08009d80 <_write_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	; (8009da0 <_write_r+0x20>)
 8009d84:	4604      	mov	r4, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f8 fa39 	bl	8002206 <_write>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_write_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_write_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	200004b0 	.word	0x200004b0

08009da4 <_close_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d06      	ldr	r5, [pc, #24]	; (8009dc0 <_close_r+0x1c>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	602b      	str	r3, [r5, #0]
 8009db0:	f7f8 fa45 	bl	800223e <_close>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_close_r+0x1a>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_close_r+0x1a>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	200004b0 	.word	0x200004b0

08009dc4 <_fstat_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4d07      	ldr	r5, [pc, #28]	; (8009de4 <_fstat_r+0x20>)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	602b      	str	r3, [r5, #0]
 8009dd2:	f7f8 fa40 	bl	8002256 <_fstat>
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	d102      	bne.n	8009de0 <_fstat_r+0x1c>
 8009dda:	682b      	ldr	r3, [r5, #0]
 8009ddc:	b103      	cbz	r3, 8009de0 <_fstat_r+0x1c>
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	bd38      	pop	{r3, r4, r5, pc}
 8009de2:	bf00      	nop
 8009de4:	200004b0 	.word	0x200004b0

08009de8 <_isatty_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d06      	ldr	r5, [pc, #24]	; (8009e04 <_isatty_r+0x1c>)
 8009dec:	2300      	movs	r3, #0
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	602b      	str	r3, [r5, #0]
 8009df4:	f7f8 fa3f 	bl	8002276 <_isatty>
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d102      	bne.n	8009e02 <_isatty_r+0x1a>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	b103      	cbz	r3, 8009e02 <_isatty_r+0x1a>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	200004b0 	.word	0x200004b0

08009e08 <_lseek_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	; (8009e28 <_lseek_r+0x20>)
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4611      	mov	r1, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	602a      	str	r2, [r5, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f7f8 fa38 	bl	800228c <_lseek>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_lseek_r+0x1e>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_lseek_r+0x1e>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	200004b0 	.word	0x200004b0

08009e2c <_read_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_read_r+0x20>)
 8009e30:	4604      	mov	r4, r0
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	2200      	movs	r2, #0
 8009e38:	602a      	str	r2, [r5, #0]
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f7f8 f9c6 	bl	80021cc <_read>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_read_r+0x1e>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_read_r+0x1e>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200004b0 	.word	0x200004b0

08009e50 <cosf>:
 8009e50:	ee10 3a10 	vmov	r3, s0
 8009e54:	b507      	push	{r0, r1, r2, lr}
 8009e56:	4a1e      	ldr	r2, [pc, #120]	; (8009ed0 <cosf+0x80>)
 8009e58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	dc06      	bgt.n	8009e6e <cosf+0x1e>
 8009e60:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009ed4 <cosf+0x84>
 8009e64:	b003      	add	sp, #12
 8009e66:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e6a:	f000 bb9b 	b.w	800a5a4 <__kernel_cosf>
 8009e6e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009e72:	db04      	blt.n	8009e7e <cosf+0x2e>
 8009e74:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009e78:	b003      	add	sp, #12
 8009e7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e7e:	4668      	mov	r0, sp
 8009e80:	f000 fa50 	bl	800a324 <__ieee754_rem_pio2f>
 8009e84:	f000 0003 	and.w	r0, r0, #3
 8009e88:	2801      	cmp	r0, #1
 8009e8a:	d009      	beq.n	8009ea0 <cosf+0x50>
 8009e8c:	2802      	cmp	r0, #2
 8009e8e:	d010      	beq.n	8009eb2 <cosf+0x62>
 8009e90:	b9b0      	cbnz	r0, 8009ec0 <cosf+0x70>
 8009e92:	eddd 0a01 	vldr	s1, [sp, #4]
 8009e96:	ed9d 0a00 	vldr	s0, [sp]
 8009e9a:	f000 fb83 	bl	800a5a4 <__kernel_cosf>
 8009e9e:	e7eb      	b.n	8009e78 <cosf+0x28>
 8009ea0:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ea4:	ed9d 0a00 	vldr	s0, [sp]
 8009ea8:	f000 fe52 	bl	800ab50 <__kernel_sinf>
 8009eac:	eeb1 0a40 	vneg.f32	s0, s0
 8009eb0:	e7e2      	b.n	8009e78 <cosf+0x28>
 8009eb2:	eddd 0a01 	vldr	s1, [sp, #4]
 8009eb6:	ed9d 0a00 	vldr	s0, [sp]
 8009eba:	f000 fb73 	bl	800a5a4 <__kernel_cosf>
 8009ebe:	e7f5      	b.n	8009eac <cosf+0x5c>
 8009ec0:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ec4:	ed9d 0a00 	vldr	s0, [sp]
 8009ec8:	2001      	movs	r0, #1
 8009eca:	f000 fe41 	bl	800ab50 <__kernel_sinf>
 8009ece:	e7d3      	b.n	8009e78 <cosf+0x28>
 8009ed0:	3f490fd8 	.word	0x3f490fd8
 8009ed4:	00000000 	.word	0x00000000

08009ed8 <sinf>:
 8009ed8:	ee10 3a10 	vmov	r3, s0
 8009edc:	b507      	push	{r0, r1, r2, lr}
 8009ede:	4a1f      	ldr	r2, [pc, #124]	; (8009f5c <sinf+0x84>)
 8009ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	dc07      	bgt.n	8009ef8 <sinf+0x20>
 8009ee8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009f60 <sinf+0x88>
 8009eec:	2000      	movs	r0, #0
 8009eee:	b003      	add	sp, #12
 8009ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef4:	f000 be2c 	b.w	800ab50 <__kernel_sinf>
 8009ef8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009efc:	db04      	blt.n	8009f08 <sinf+0x30>
 8009efe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009f02:	b003      	add	sp, #12
 8009f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f08:	4668      	mov	r0, sp
 8009f0a:	f000 fa0b 	bl	800a324 <__ieee754_rem_pio2f>
 8009f0e:	f000 0003 	and.w	r0, r0, #3
 8009f12:	2801      	cmp	r0, #1
 8009f14:	d00a      	beq.n	8009f2c <sinf+0x54>
 8009f16:	2802      	cmp	r0, #2
 8009f18:	d00f      	beq.n	8009f3a <sinf+0x62>
 8009f1a:	b9c0      	cbnz	r0, 8009f4e <sinf+0x76>
 8009f1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f20:	ed9d 0a00 	vldr	s0, [sp]
 8009f24:	2001      	movs	r0, #1
 8009f26:	f000 fe13 	bl	800ab50 <__kernel_sinf>
 8009f2a:	e7ea      	b.n	8009f02 <sinf+0x2a>
 8009f2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f30:	ed9d 0a00 	vldr	s0, [sp]
 8009f34:	f000 fb36 	bl	800a5a4 <__kernel_cosf>
 8009f38:	e7e3      	b.n	8009f02 <sinf+0x2a>
 8009f3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f3e:	ed9d 0a00 	vldr	s0, [sp]
 8009f42:	2001      	movs	r0, #1
 8009f44:	f000 fe04 	bl	800ab50 <__kernel_sinf>
 8009f48:	eeb1 0a40 	vneg.f32	s0, s0
 8009f4c:	e7d9      	b.n	8009f02 <sinf+0x2a>
 8009f4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f52:	ed9d 0a00 	vldr	s0, [sp]
 8009f56:	f000 fb25 	bl	800a5a4 <__kernel_cosf>
 8009f5a:	e7f5      	b.n	8009f48 <sinf+0x70>
 8009f5c:	3f490fd8 	.word	0x3f490fd8
 8009f60:	00000000 	.word	0x00000000

08009f64 <tanf>:
 8009f64:	ee10 3a10 	vmov	r3, s0
 8009f68:	b507      	push	{r0, r1, r2, lr}
 8009f6a:	4a12      	ldr	r2, [pc, #72]	; (8009fb4 <tanf+0x50>)
 8009f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f70:	4293      	cmp	r3, r2
 8009f72:	dc07      	bgt.n	8009f84 <tanf+0x20>
 8009f74:	eddf 0a10 	vldr	s1, [pc, #64]	; 8009fb8 <tanf+0x54>
 8009f78:	2001      	movs	r0, #1
 8009f7a:	b003      	add	sp, #12
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	f000 be2e 	b.w	800abe0 <__kernel_tanf>
 8009f84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009f88:	db04      	blt.n	8009f94 <tanf+0x30>
 8009f8a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009f8e:	b003      	add	sp, #12
 8009f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f94:	4668      	mov	r0, sp
 8009f96:	f000 f9c5 	bl	800a324 <__ieee754_rem_pio2f>
 8009f9a:	0040      	lsls	r0, r0, #1
 8009f9c:	f000 0002 	and.w	r0, r0, #2
 8009fa0:	eddd 0a01 	vldr	s1, [sp, #4]
 8009fa4:	ed9d 0a00 	vldr	s0, [sp]
 8009fa8:	f1c0 0001 	rsb	r0, r0, #1
 8009fac:	f000 fe18 	bl	800abe0 <__kernel_tanf>
 8009fb0:	e7ed      	b.n	8009f8e <tanf+0x2a>
 8009fb2:	bf00      	nop
 8009fb4:	3f490fda 	.word	0x3f490fda
 8009fb8:	00000000 	.word	0x00000000

08009fbc <asinf>:
 8009fbc:	b508      	push	{r3, lr}
 8009fbe:	ed2d 8b02 	vpush	{d8}
 8009fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8009fc6:	f000 f827 	bl	800a018 <__ieee754_asinf>
 8009fca:	eeb4 8a48 	vcmp.f32	s16, s16
 8009fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd2:	eef0 8a40 	vmov.f32	s17, s0
 8009fd6:	d615      	bvs.n	800a004 <asinf+0x48>
 8009fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8009fdc:	f000 ffb4 	bl	800af48 <fabsf>
 8009fe0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009fe4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fec:	dd0a      	ble.n	800a004 <asinf+0x48>
 8009fee:	f7fd f819 	bl	8007024 <__errno>
 8009ff2:	ecbd 8b02 	vpop	{d8}
 8009ff6:	2321      	movs	r3, #33	; 0x21
 8009ff8:	6003      	str	r3, [r0, #0]
 8009ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ffe:	4804      	ldr	r0, [pc, #16]	; (800a010 <asinf+0x54>)
 800a000:	f000 bfec 	b.w	800afdc <nanf>
 800a004:	eeb0 0a68 	vmov.f32	s0, s17
 800a008:	ecbd 8b02 	vpop	{d8}
 800a00c:	bd08      	pop	{r3, pc}
 800a00e:	bf00      	nop
 800a010:	0800b510 	.word	0x0800b510

0800a014 <atan2f>:
 800a014:	f000 b8e6 	b.w	800a1e4 <__ieee754_atan2f>

0800a018 <__ieee754_asinf>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	ee10 5a10 	vmov	r5, s0
 800a01e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a022:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a026:	ed2d 8b04 	vpush	{d8-d9}
 800a02a:	d10c      	bne.n	800a046 <__ieee754_asinf+0x2e>
 800a02c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a1a4 <__ieee754_asinf+0x18c>
 800a030:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a1a8 <__ieee754_asinf+0x190>
 800a034:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a038:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a03c:	eeb0 0a67 	vmov.f32	s0, s15
 800a040:	ecbd 8b04 	vpop	{d8-d9}
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	dd04      	ble.n	800a052 <__ieee754_asinf+0x3a>
 800a048:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a04c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a050:	e7f6      	b.n	800a040 <__ieee754_asinf+0x28>
 800a052:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a056:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a05a:	da0b      	bge.n	800a074 <__ieee754_asinf+0x5c>
 800a05c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a060:	da52      	bge.n	800a108 <__ieee754_asinf+0xf0>
 800a062:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a1ac <__ieee754_asinf+0x194>
 800a066:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a06a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a072:	dce5      	bgt.n	800a040 <__ieee754_asinf+0x28>
 800a074:	f000 ff68 	bl	800af48 <fabsf>
 800a078:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a07c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a080:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a084:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a1b0 <__ieee754_asinf+0x198>
 800a088:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a1b4 <__ieee754_asinf+0x19c>
 800a08c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a1b8 <__ieee754_asinf+0x1a0>
 800a090:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a094:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a1bc <__ieee754_asinf+0x1a4>
 800a098:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a09c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a1c0 <__ieee754_asinf+0x1a8>
 800a0a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a0a4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a1c4 <__ieee754_asinf+0x1ac>
 800a0a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a1c8 <__ieee754_asinf+0x1b0>
 800a0b0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a0b4:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a1cc <__ieee754_asinf+0x1b4>
 800a0b8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a0bc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a1d0 <__ieee754_asinf+0x1b8>
 800a0c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a0c4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a1d4 <__ieee754_asinf+0x1bc>
 800a0c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a0d0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a0d4:	f000 fa62 	bl	800a59c <__ieee754_sqrtf>
 800a0d8:	4b3f      	ldr	r3, [pc, #252]	; (800a1d8 <__ieee754_asinf+0x1c0>)
 800a0da:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a0e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a0e8:	dd3d      	ble.n	800a166 <__ieee754_asinf+0x14e>
 800a0ea:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a0ee:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a1dc <__ieee754_asinf+0x1c4>
 800a0f2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a0f6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a1a8 <__ieee754_asinf+0x190>
 800a0fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a0fe:	2d00      	cmp	r5, #0
 800a100:	bfd8      	it	le
 800a102:	eeb1 0a40 	vnegle.f32	s0, s0
 800a106:	e79b      	b.n	800a040 <__ieee754_asinf+0x28>
 800a108:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a10c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a1b0 <__ieee754_asinf+0x198>
 800a110:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a1b4 <__ieee754_asinf+0x19c>
 800a114:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a1c8 <__ieee754_asinf+0x1b0>
 800a118:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a11c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a1bc <__ieee754_asinf+0x1a4>
 800a120:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a124:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a1c0 <__ieee754_asinf+0x1a8>
 800a128:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a12c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a1c4 <__ieee754_asinf+0x1ac>
 800a130:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a134:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a1b8 <__ieee754_asinf+0x1a0>
 800a138:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a13c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a1cc <__ieee754_asinf+0x1b4>
 800a140:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a144:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a1d0 <__ieee754_asinf+0x1b8>
 800a148:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a14c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a1d4 <__ieee754_asinf+0x1bc>
 800a150:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a154:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a158:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a15c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a160:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a164:	e76c      	b.n	800a040 <__ieee754_asinf+0x28>
 800a166:	ee10 3a10 	vmov	r3, s0
 800a16a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a16e:	f023 030f 	bic.w	r3, r3, #15
 800a172:	ee07 3a10 	vmov	s14, r3
 800a176:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a17a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a17e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a182:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a186:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a1a4 <__ieee754_asinf+0x18c>
 800a18a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a18e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a192:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a1e0 <__ieee754_asinf+0x1c8>
 800a196:	eeb0 6a40 	vmov.f32	s12, s0
 800a19a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a19e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a1a2:	e7aa      	b.n	800a0fa <__ieee754_asinf+0xe2>
 800a1a4:	b33bbd2e 	.word	0xb33bbd2e
 800a1a8:	3fc90fdb 	.word	0x3fc90fdb
 800a1ac:	7149f2ca 	.word	0x7149f2ca
 800a1b0:	3811ef08 	.word	0x3811ef08
 800a1b4:	3a4f7f04 	.word	0x3a4f7f04
 800a1b8:	3e2aaaab 	.word	0x3e2aaaab
 800a1bc:	bd241146 	.word	0xbd241146
 800a1c0:	3e4e0aa8 	.word	0x3e4e0aa8
 800a1c4:	bea6b090 	.word	0xbea6b090
 800a1c8:	3d9dc62e 	.word	0x3d9dc62e
 800a1cc:	bf303361 	.word	0xbf303361
 800a1d0:	4001572d 	.word	0x4001572d
 800a1d4:	c019d139 	.word	0xc019d139
 800a1d8:	3f799999 	.word	0x3f799999
 800a1dc:	333bbd2e 	.word	0x333bbd2e
 800a1e0:	3f490fdb 	.word	0x3f490fdb

0800a1e4 <__ieee754_atan2f>:
 800a1e4:	ee10 2a90 	vmov	r2, s1
 800a1e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a1ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	eef0 7a40 	vmov.f32	s15, s0
 800a1f6:	dc06      	bgt.n	800a206 <__ieee754_atan2f+0x22>
 800a1f8:	ee10 0a10 	vmov	r0, s0
 800a1fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a200:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a204:	dd04      	ble.n	800a210 <__ieee754_atan2f+0x2c>
 800a206:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a20a:	eeb0 0a67 	vmov.f32	s0, s15
 800a20e:	bd10      	pop	{r4, pc}
 800a210:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a214:	d103      	bne.n	800a21e <__ieee754_atan2f+0x3a>
 800a216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a21a:	f000 bdc1 	b.w	800ada0 <atanf>
 800a21e:	1794      	asrs	r4, r2, #30
 800a220:	f004 0402 	and.w	r4, r4, #2
 800a224:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a228:	b943      	cbnz	r3, 800a23c <__ieee754_atan2f+0x58>
 800a22a:	2c02      	cmp	r4, #2
 800a22c:	d05e      	beq.n	800a2ec <__ieee754_atan2f+0x108>
 800a22e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a300 <__ieee754_atan2f+0x11c>
 800a232:	2c03      	cmp	r4, #3
 800a234:	bf08      	it	eq
 800a236:	eef0 7a47 	vmoveq.f32	s15, s14
 800a23a:	e7e6      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a23c:	b941      	cbnz	r1, 800a250 <__ieee754_atan2f+0x6c>
 800a23e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a304 <__ieee754_atan2f+0x120>
 800a242:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a308 <__ieee754_atan2f+0x124>
 800a246:	2800      	cmp	r0, #0
 800a248:	bfb8      	it	lt
 800a24a:	eef0 7a40 	vmovlt.f32	s15, s0
 800a24e:	e7dc      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a250:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a254:	d110      	bne.n	800a278 <__ieee754_atan2f+0x94>
 800a256:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a25a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a25e:	d107      	bne.n	800a270 <__ieee754_atan2f+0x8c>
 800a260:	2c02      	cmp	r4, #2
 800a262:	d846      	bhi.n	800a2f2 <__ieee754_atan2f+0x10e>
 800a264:	4b29      	ldr	r3, [pc, #164]	; (800a30c <__ieee754_atan2f+0x128>)
 800a266:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a26a:	edd4 7a00 	vldr	s15, [r4]
 800a26e:	e7cc      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a270:	2c02      	cmp	r4, #2
 800a272:	d841      	bhi.n	800a2f8 <__ieee754_atan2f+0x114>
 800a274:	4b26      	ldr	r3, [pc, #152]	; (800a310 <__ieee754_atan2f+0x12c>)
 800a276:	e7f6      	b.n	800a266 <__ieee754_atan2f+0x82>
 800a278:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a27c:	d0df      	beq.n	800a23e <__ieee754_atan2f+0x5a>
 800a27e:	1a5b      	subs	r3, r3, r1
 800a280:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a284:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a288:	da1a      	bge.n	800a2c0 <__ieee754_atan2f+0xdc>
 800a28a:	2a00      	cmp	r2, #0
 800a28c:	da01      	bge.n	800a292 <__ieee754_atan2f+0xae>
 800a28e:	313c      	adds	r1, #60	; 0x3c
 800a290:	db19      	blt.n	800a2c6 <__ieee754_atan2f+0xe2>
 800a292:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a296:	f000 fe57 	bl	800af48 <fabsf>
 800a29a:	f000 fd81 	bl	800ada0 <atanf>
 800a29e:	eef0 7a40 	vmov.f32	s15, s0
 800a2a2:	2c01      	cmp	r4, #1
 800a2a4:	d012      	beq.n	800a2cc <__ieee754_atan2f+0xe8>
 800a2a6:	2c02      	cmp	r4, #2
 800a2a8:	d017      	beq.n	800a2da <__ieee754_atan2f+0xf6>
 800a2aa:	2c00      	cmp	r4, #0
 800a2ac:	d0ad      	beq.n	800a20a <__ieee754_atan2f+0x26>
 800a2ae:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a314 <__ieee754_atan2f+0x130>
 800a2b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2b6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a318 <__ieee754_atan2f+0x134>
 800a2ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2be:	e7a4      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a2c0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a304 <__ieee754_atan2f+0x120>
 800a2c4:	e7ed      	b.n	800a2a2 <__ieee754_atan2f+0xbe>
 800a2c6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a31c <__ieee754_atan2f+0x138>
 800a2ca:	e7ea      	b.n	800a2a2 <__ieee754_atan2f+0xbe>
 800a2cc:	ee17 3a90 	vmov	r3, s15
 800a2d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	e797      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a2da:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a314 <__ieee754_atan2f+0x130>
 800a2de:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2e2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a318 <__ieee754_atan2f+0x134>
 800a2e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a2ea:	e78e      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a2ec:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a318 <__ieee754_atan2f+0x134>
 800a2f0:	e78b      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a2f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a320 <__ieee754_atan2f+0x13c>
 800a2f6:	e788      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a2f8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a31c <__ieee754_atan2f+0x138>
 800a2fc:	e785      	b.n	800a20a <__ieee754_atan2f+0x26>
 800a2fe:	bf00      	nop
 800a300:	c0490fdb 	.word	0xc0490fdb
 800a304:	3fc90fdb 	.word	0x3fc90fdb
 800a308:	bfc90fdb 	.word	0xbfc90fdb
 800a30c:	0800b67c 	.word	0x0800b67c
 800a310:	0800b688 	.word	0x0800b688
 800a314:	33bbbd2e 	.word	0x33bbbd2e
 800a318:	40490fdb 	.word	0x40490fdb
 800a31c:	00000000 	.word	0x00000000
 800a320:	3f490fdb 	.word	0x3f490fdb

0800a324 <__ieee754_rem_pio2f>:
 800a324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a326:	ee10 6a10 	vmov	r6, s0
 800a32a:	4b8e      	ldr	r3, [pc, #568]	; (800a564 <__ieee754_rem_pio2f+0x240>)
 800a32c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a330:	429d      	cmp	r5, r3
 800a332:	b087      	sub	sp, #28
 800a334:	eef0 7a40 	vmov.f32	s15, s0
 800a338:	4604      	mov	r4, r0
 800a33a:	dc05      	bgt.n	800a348 <__ieee754_rem_pio2f+0x24>
 800a33c:	2300      	movs	r3, #0
 800a33e:	ed80 0a00 	vstr	s0, [r0]
 800a342:	6043      	str	r3, [r0, #4]
 800a344:	2000      	movs	r0, #0
 800a346:	e01a      	b.n	800a37e <__ieee754_rem_pio2f+0x5a>
 800a348:	4b87      	ldr	r3, [pc, #540]	; (800a568 <__ieee754_rem_pio2f+0x244>)
 800a34a:	429d      	cmp	r5, r3
 800a34c:	dc46      	bgt.n	800a3dc <__ieee754_rem_pio2f+0xb8>
 800a34e:	2e00      	cmp	r6, #0
 800a350:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a56c <__ieee754_rem_pio2f+0x248>
 800a354:	4b86      	ldr	r3, [pc, #536]	; (800a570 <__ieee754_rem_pio2f+0x24c>)
 800a356:	f025 050f 	bic.w	r5, r5, #15
 800a35a:	dd1f      	ble.n	800a39c <__ieee754_rem_pio2f+0x78>
 800a35c:	429d      	cmp	r5, r3
 800a35e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a362:	d00e      	beq.n	800a382 <__ieee754_rem_pio2f+0x5e>
 800a364:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a574 <__ieee754_rem_pio2f+0x250>
 800a368:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a36c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a370:	ed80 0a00 	vstr	s0, [r0]
 800a374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a378:	2001      	movs	r0, #1
 800a37a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a37e:	b007      	add	sp, #28
 800a380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a382:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a578 <__ieee754_rem_pio2f+0x254>
 800a386:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a57c <__ieee754_rem_pio2f+0x258>
 800a38a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a38e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a396:	edc0 6a00 	vstr	s13, [r0]
 800a39a:	e7eb      	b.n	800a374 <__ieee754_rem_pio2f+0x50>
 800a39c:	429d      	cmp	r5, r3
 800a39e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3a2:	d00e      	beq.n	800a3c2 <__ieee754_rem_pio2f+0x9e>
 800a3a4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a574 <__ieee754_rem_pio2f+0x250>
 800a3a8:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a3ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3b0:	ed80 0a00 	vstr	s0, [r0]
 800a3b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3bc:	edc4 7a01 	vstr	s15, [r4, #4]
 800a3c0:	e7dd      	b.n	800a37e <__ieee754_rem_pio2f+0x5a>
 800a3c2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a578 <__ieee754_rem_pio2f+0x254>
 800a3c6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a57c <__ieee754_rem_pio2f+0x258>
 800a3ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a3ce:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a3d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3d6:	edc0 6a00 	vstr	s13, [r0]
 800a3da:	e7eb      	b.n	800a3b4 <__ieee754_rem_pio2f+0x90>
 800a3dc:	4b68      	ldr	r3, [pc, #416]	; (800a580 <__ieee754_rem_pio2f+0x25c>)
 800a3de:	429d      	cmp	r5, r3
 800a3e0:	dc72      	bgt.n	800a4c8 <__ieee754_rem_pio2f+0x1a4>
 800a3e2:	f000 fdb1 	bl	800af48 <fabsf>
 800a3e6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a584 <__ieee754_rem_pio2f+0x260>
 800a3ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a3ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a3f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a3fa:	ee17 0a90 	vmov	r0, s15
 800a3fe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a56c <__ieee754_rem_pio2f+0x248>
 800a402:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a406:	281f      	cmp	r0, #31
 800a408:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a574 <__ieee754_rem_pio2f+0x250>
 800a40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a410:	eeb1 6a47 	vneg.f32	s12, s14
 800a414:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a418:	ee16 2a90 	vmov	r2, s13
 800a41c:	dc1c      	bgt.n	800a458 <__ieee754_rem_pio2f+0x134>
 800a41e:	495a      	ldr	r1, [pc, #360]	; (800a588 <__ieee754_rem_pio2f+0x264>)
 800a420:	1e47      	subs	r7, r0, #1
 800a422:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a426:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a42a:	428b      	cmp	r3, r1
 800a42c:	d014      	beq.n	800a458 <__ieee754_rem_pio2f+0x134>
 800a42e:	6022      	str	r2, [r4, #0]
 800a430:	ed94 7a00 	vldr	s14, [r4]
 800a434:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a438:	2e00      	cmp	r6, #0
 800a43a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a43e:	ed84 0a01 	vstr	s0, [r4, #4]
 800a442:	da9c      	bge.n	800a37e <__ieee754_rem_pio2f+0x5a>
 800a444:	eeb1 7a47 	vneg.f32	s14, s14
 800a448:	eeb1 0a40 	vneg.f32	s0, s0
 800a44c:	ed84 7a00 	vstr	s14, [r4]
 800a450:	ed84 0a01 	vstr	s0, [r4, #4]
 800a454:	4240      	negs	r0, r0
 800a456:	e792      	b.n	800a37e <__ieee754_rem_pio2f+0x5a>
 800a458:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a45c:	15eb      	asrs	r3, r5, #23
 800a45e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a462:	2d08      	cmp	r5, #8
 800a464:	dde3      	ble.n	800a42e <__ieee754_rem_pio2f+0x10a>
 800a466:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a578 <__ieee754_rem_pio2f+0x254>
 800a46a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a57c <__ieee754_rem_pio2f+0x258>
 800a46e:	eef0 6a40 	vmov.f32	s13, s0
 800a472:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a476:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a47a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a47e:	eef0 7a40 	vmov.f32	s15, s0
 800a482:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a486:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a48a:	ee15 2a90 	vmov	r2, s11
 800a48e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a492:	1a5b      	subs	r3, r3, r1
 800a494:	2b19      	cmp	r3, #25
 800a496:	dc04      	bgt.n	800a4a2 <__ieee754_rem_pio2f+0x17e>
 800a498:	edc4 5a00 	vstr	s11, [r4]
 800a49c:	eeb0 0a66 	vmov.f32	s0, s13
 800a4a0:	e7c6      	b.n	800a430 <__ieee754_rem_pio2f+0x10c>
 800a4a2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a58c <__ieee754_rem_pio2f+0x268>
 800a4a6:	eeb0 0a66 	vmov.f32	s0, s13
 800a4aa:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a4ae:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a4b2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a590 <__ieee754_rem_pio2f+0x26c>
 800a4b6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a4ba:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a4be:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a4c2:	ed84 7a00 	vstr	s14, [r4]
 800a4c6:	e7b3      	b.n	800a430 <__ieee754_rem_pio2f+0x10c>
 800a4c8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a4cc:	db06      	blt.n	800a4dc <__ieee754_rem_pio2f+0x1b8>
 800a4ce:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a4d2:	edc0 7a01 	vstr	s15, [r0, #4]
 800a4d6:	edc0 7a00 	vstr	s15, [r0]
 800a4da:	e733      	b.n	800a344 <__ieee754_rem_pio2f+0x20>
 800a4dc:	15ea      	asrs	r2, r5, #23
 800a4de:	3a86      	subs	r2, #134	; 0x86
 800a4e0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a4e4:	ee07 3a90 	vmov	s15, r3
 800a4e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a4ec:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a594 <__ieee754_rem_pio2f+0x270>
 800a4f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a4f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4f8:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a4fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a500:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a504:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a50c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a510:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a514:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a51c:	edcd 7a05 	vstr	s15, [sp, #20]
 800a520:	d11e      	bne.n	800a560 <__ieee754_rem_pio2f+0x23c>
 800a522:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a52a:	bf14      	ite	ne
 800a52c:	2302      	movne	r3, #2
 800a52e:	2301      	moveq	r3, #1
 800a530:	4919      	ldr	r1, [pc, #100]	; (800a598 <__ieee754_rem_pio2f+0x274>)
 800a532:	9101      	str	r1, [sp, #4]
 800a534:	2102      	movs	r1, #2
 800a536:	9100      	str	r1, [sp, #0]
 800a538:	a803      	add	r0, sp, #12
 800a53a:	4621      	mov	r1, r4
 800a53c:	f000 f892 	bl	800a664 <__kernel_rem_pio2f>
 800a540:	2e00      	cmp	r6, #0
 800a542:	f6bf af1c 	bge.w	800a37e <__ieee754_rem_pio2f+0x5a>
 800a546:	edd4 7a00 	vldr	s15, [r4]
 800a54a:	eef1 7a67 	vneg.f32	s15, s15
 800a54e:	edc4 7a00 	vstr	s15, [r4]
 800a552:	edd4 7a01 	vldr	s15, [r4, #4]
 800a556:	eef1 7a67 	vneg.f32	s15, s15
 800a55a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a55e:	e779      	b.n	800a454 <__ieee754_rem_pio2f+0x130>
 800a560:	2303      	movs	r3, #3
 800a562:	e7e5      	b.n	800a530 <__ieee754_rem_pio2f+0x20c>
 800a564:	3f490fd8 	.word	0x3f490fd8
 800a568:	4016cbe3 	.word	0x4016cbe3
 800a56c:	3fc90f80 	.word	0x3fc90f80
 800a570:	3fc90fd0 	.word	0x3fc90fd0
 800a574:	37354443 	.word	0x37354443
 800a578:	37354400 	.word	0x37354400
 800a57c:	2e85a308 	.word	0x2e85a308
 800a580:	43490f80 	.word	0x43490f80
 800a584:	3f22f984 	.word	0x3f22f984
 800a588:	0800b694 	.word	0x0800b694
 800a58c:	2e85a300 	.word	0x2e85a300
 800a590:	248d3132 	.word	0x248d3132
 800a594:	43800000 	.word	0x43800000
 800a598:	0800b714 	.word	0x0800b714

0800a59c <__ieee754_sqrtf>:
 800a59c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a5a0:	4770      	bx	lr
	...

0800a5a4 <__kernel_cosf>:
 800a5a4:	ee10 3a10 	vmov	r3, s0
 800a5a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a5b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a5b4:	da05      	bge.n	800a5c2 <__kernel_cosf+0x1e>
 800a5b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a5ba:	ee17 2a90 	vmov	r2, s15
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	d03d      	beq.n	800a63e <__kernel_cosf+0x9a>
 800a5c2:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a5c6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a644 <__kernel_cosf+0xa0>
 800a5ca:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a648 <__kernel_cosf+0xa4>
 800a5ce:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a64c <__kernel_cosf+0xa8>
 800a5d2:	4a1f      	ldr	r2, [pc, #124]	; (800a650 <__kernel_cosf+0xac>)
 800a5d4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a654 <__kernel_cosf+0xb0>
 800a5de:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a5e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a658 <__kernel_cosf+0xb4>
 800a5e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a5ea:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a65c <__kernel_cosf+0xb8>
 800a5ee:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a5f2:	eeb0 7a66 	vmov.f32	s14, s13
 800a5f6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a5fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a5fe:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a602:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a606:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a60a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a60e:	dc04      	bgt.n	800a61a <__kernel_cosf+0x76>
 800a610:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a614:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a618:	4770      	bx	lr
 800a61a:	4a11      	ldr	r2, [pc, #68]	; (800a660 <__kernel_cosf+0xbc>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	bfda      	itte	le
 800a620:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a624:	ee06 3a90 	vmovle	s13, r3
 800a628:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a62c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a630:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a638:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a63c:	4770      	bx	lr
 800a63e:	eeb0 0a46 	vmov.f32	s0, s12
 800a642:	4770      	bx	lr
 800a644:	ad47d74e 	.word	0xad47d74e
 800a648:	310f74f6 	.word	0x310f74f6
 800a64c:	3d2aaaab 	.word	0x3d2aaaab
 800a650:	3e999999 	.word	0x3e999999
 800a654:	b493f27c 	.word	0xb493f27c
 800a658:	37d00d01 	.word	0x37d00d01
 800a65c:	bab60b61 	.word	0xbab60b61
 800a660:	3f480000 	.word	0x3f480000

0800a664 <__kernel_rem_pio2f>:
 800a664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a668:	ed2d 8b04 	vpush	{d8-d9}
 800a66c:	b0d9      	sub	sp, #356	; 0x164
 800a66e:	4688      	mov	r8, r1
 800a670:	9002      	str	r0, [sp, #8]
 800a672:	49bb      	ldr	r1, [pc, #748]	; (800a960 <__kernel_rem_pio2f+0x2fc>)
 800a674:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a67c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a680:	1e59      	subs	r1, r3, #1
 800a682:	1d13      	adds	r3, r2, #4
 800a684:	db27      	blt.n	800a6d6 <__kernel_rem_pio2f+0x72>
 800a686:	f1b2 0b03 	subs.w	fp, r2, #3
 800a68a:	bf48      	it	mi
 800a68c:	f102 0b04 	addmi.w	fp, r2, #4
 800a690:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a694:	1c45      	adds	r5, r0, #1
 800a696:	00ec      	lsls	r4, r5, #3
 800a698:	1a47      	subs	r7, r0, r1
 800a69a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a970 <__kernel_rem_pio2f+0x30c>
 800a69e:	9403      	str	r4, [sp, #12]
 800a6a0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a6a4:	eb0a 0c01 	add.w	ip, sl, r1
 800a6a8:	ae1c      	add	r6, sp, #112	; 0x70
 800a6aa:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a6ae:	2400      	movs	r4, #0
 800a6b0:	4564      	cmp	r4, ip
 800a6b2:	dd12      	ble.n	800a6da <__kernel_rem_pio2f+0x76>
 800a6b4:	9b01      	ldr	r3, [sp, #4]
 800a6b6:	ac1c      	add	r4, sp, #112	; 0x70
 800a6b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a6bc:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a6c0:	f04f 0c00 	mov.w	ip, #0
 800a6c4:	45d4      	cmp	ip, sl
 800a6c6:	dc27      	bgt.n	800a718 <__kernel_rem_pio2f+0xb4>
 800a6c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a6cc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a970 <__kernel_rem_pio2f+0x30c>
 800a6d0:	4627      	mov	r7, r4
 800a6d2:	2600      	movs	r6, #0
 800a6d4:	e016      	b.n	800a704 <__kernel_rem_pio2f+0xa0>
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	e7dc      	b.n	800a694 <__kernel_rem_pio2f+0x30>
 800a6da:	42e7      	cmn	r7, r4
 800a6dc:	bf5d      	ittte	pl
 800a6de:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a6e2:	ee07 3a90 	vmovpl	s15, r3
 800a6e6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a6ea:	eef0 7a47 	vmovmi.f32	s15, s14
 800a6ee:	ece6 7a01 	vstmia	r6!, {s15}
 800a6f2:	3401      	adds	r4, #1
 800a6f4:	e7dc      	b.n	800a6b0 <__kernel_rem_pio2f+0x4c>
 800a6f6:	ecf9 6a01 	vldmia	r9!, {s13}
 800a6fa:	ed97 7a00 	vldr	s14, [r7]
 800a6fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a702:	3601      	adds	r6, #1
 800a704:	428e      	cmp	r6, r1
 800a706:	f1a7 0704 	sub.w	r7, r7, #4
 800a70a:	ddf4      	ble.n	800a6f6 <__kernel_rem_pio2f+0x92>
 800a70c:	eceb 7a01 	vstmia	fp!, {s15}
 800a710:	f10c 0c01 	add.w	ip, ip, #1
 800a714:	3404      	adds	r4, #4
 800a716:	e7d5      	b.n	800a6c4 <__kernel_rem_pio2f+0x60>
 800a718:	ab08      	add	r3, sp, #32
 800a71a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a71e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a96c <__kernel_rem_pio2f+0x308>
 800a722:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a968 <__kernel_rem_pio2f+0x304>
 800a726:	9304      	str	r3, [sp, #16]
 800a728:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a72c:	4656      	mov	r6, sl
 800a72e:	00b3      	lsls	r3, r6, #2
 800a730:	9305      	str	r3, [sp, #20]
 800a732:	ab58      	add	r3, sp, #352	; 0x160
 800a734:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a738:	ac08      	add	r4, sp, #32
 800a73a:	ab44      	add	r3, sp, #272	; 0x110
 800a73c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a740:	46a4      	mov	ip, r4
 800a742:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a746:	4637      	mov	r7, r6
 800a748:	2f00      	cmp	r7, #0
 800a74a:	f1a0 0004 	sub.w	r0, r0, #4
 800a74e:	dc4f      	bgt.n	800a7f0 <__kernel_rem_pio2f+0x18c>
 800a750:	4628      	mov	r0, r5
 800a752:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a756:	f000 fc47 	bl	800afe8 <scalbnf>
 800a75a:	eeb0 8a40 	vmov.f32	s16, s0
 800a75e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a762:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a766:	f000 fbf7 	bl	800af58 <floorf>
 800a76a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a76e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a772:	2d00      	cmp	r5, #0
 800a774:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a778:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a77c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a780:	ee17 9a90 	vmov	r9, s15
 800a784:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a788:	dd44      	ble.n	800a814 <__kernel_rem_pio2f+0x1b0>
 800a78a:	f106 3cff 	add.w	ip, r6, #4294967295
 800a78e:	ab08      	add	r3, sp, #32
 800a790:	f1c5 0e08 	rsb	lr, r5, #8
 800a794:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a798:	fa47 f00e 	asr.w	r0, r7, lr
 800a79c:	4481      	add	r9, r0
 800a79e:	fa00 f00e 	lsl.w	r0, r0, lr
 800a7a2:	1a3f      	subs	r7, r7, r0
 800a7a4:	f1c5 0007 	rsb	r0, r5, #7
 800a7a8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a7ac:	4107      	asrs	r7, r0
 800a7ae:	2f00      	cmp	r7, #0
 800a7b0:	dd3f      	ble.n	800a832 <__kernel_rem_pio2f+0x1ce>
 800a7b2:	f04f 0e00 	mov.w	lr, #0
 800a7b6:	f109 0901 	add.w	r9, r9, #1
 800a7ba:	4673      	mov	r3, lr
 800a7bc:	4576      	cmp	r6, lr
 800a7be:	dc6b      	bgt.n	800a898 <__kernel_rem_pio2f+0x234>
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	dd04      	ble.n	800a7ce <__kernel_rem_pio2f+0x16a>
 800a7c4:	2d01      	cmp	r5, #1
 800a7c6:	d078      	beq.n	800a8ba <__kernel_rem_pio2f+0x256>
 800a7c8:	2d02      	cmp	r5, #2
 800a7ca:	f000 8081 	beq.w	800a8d0 <__kernel_rem_pio2f+0x26c>
 800a7ce:	2f02      	cmp	r7, #2
 800a7d0:	d12f      	bne.n	800a832 <__kernel_rem_pio2f+0x1ce>
 800a7d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a7d6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a7da:	b353      	cbz	r3, 800a832 <__kernel_rem_pio2f+0x1ce>
 800a7dc:	4628      	mov	r0, r5
 800a7de:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a7e2:	f000 fc01 	bl	800afe8 <scalbnf>
 800a7e6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a7ea:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a7ee:	e020      	b.n	800a832 <__kernel_rem_pio2f+0x1ce>
 800a7f0:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a7f4:	3f01      	subs	r7, #1
 800a7f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7fe:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a802:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a806:	ecac 0a01 	vstmia	ip!, {s0}
 800a80a:	ed90 0a00 	vldr	s0, [r0]
 800a80e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a812:	e799      	b.n	800a748 <__kernel_rem_pio2f+0xe4>
 800a814:	d105      	bne.n	800a822 <__kernel_rem_pio2f+0x1be>
 800a816:	1e70      	subs	r0, r6, #1
 800a818:	ab08      	add	r3, sp, #32
 800a81a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a81e:	11ff      	asrs	r7, r7, #7
 800a820:	e7c5      	b.n	800a7ae <__kernel_rem_pio2f+0x14a>
 800a822:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a826:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a82e:	da31      	bge.n	800a894 <__kernel_rem_pio2f+0x230>
 800a830:	2700      	movs	r7, #0
 800a832:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a83a:	f040 809b 	bne.w	800a974 <__kernel_rem_pio2f+0x310>
 800a83e:	1e74      	subs	r4, r6, #1
 800a840:	46a4      	mov	ip, r4
 800a842:	2000      	movs	r0, #0
 800a844:	45d4      	cmp	ip, sl
 800a846:	da4a      	bge.n	800a8de <__kernel_rem_pio2f+0x27a>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d07a      	beq.n	800a942 <__kernel_rem_pio2f+0x2de>
 800a84c:	ab08      	add	r3, sp, #32
 800a84e:	3d08      	subs	r5, #8
 800a850:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 8081 	beq.w	800a95c <__kernel_rem_pio2f+0x2f8>
 800a85a:	4628      	mov	r0, r5
 800a85c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a860:	00a5      	lsls	r5, r4, #2
 800a862:	f000 fbc1 	bl	800afe8 <scalbnf>
 800a866:	aa44      	add	r2, sp, #272	; 0x110
 800a868:	1d2b      	adds	r3, r5, #4
 800a86a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a96c <__kernel_rem_pio2f+0x308>
 800a86e:	18d1      	adds	r1, r2, r3
 800a870:	4622      	mov	r2, r4
 800a872:	2a00      	cmp	r2, #0
 800a874:	f280 80ae 	bge.w	800a9d4 <__kernel_rem_pio2f+0x370>
 800a878:	4622      	mov	r2, r4
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	f2c0 80cc 	blt.w	800aa18 <__kernel_rem_pio2f+0x3b4>
 800a880:	a944      	add	r1, sp, #272	; 0x110
 800a882:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a886:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a964 <__kernel_rem_pio2f+0x300>
 800a88a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a970 <__kernel_rem_pio2f+0x30c>
 800a88e:	2000      	movs	r0, #0
 800a890:	1aa1      	subs	r1, r4, r2
 800a892:	e0b6      	b.n	800aa02 <__kernel_rem_pio2f+0x39e>
 800a894:	2702      	movs	r7, #2
 800a896:	e78c      	b.n	800a7b2 <__kernel_rem_pio2f+0x14e>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	b94b      	cbnz	r3, 800a8b0 <__kernel_rem_pio2f+0x24c>
 800a89c:	b118      	cbz	r0, 800a8a6 <__kernel_rem_pio2f+0x242>
 800a89e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a8a2:	6020      	str	r0, [r4, #0]
 800a8a4:	2001      	movs	r0, #1
 800a8a6:	f10e 0e01 	add.w	lr, lr, #1
 800a8aa:	3404      	adds	r4, #4
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	e785      	b.n	800a7bc <__kernel_rem_pio2f+0x158>
 800a8b0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a8b4:	6020      	str	r0, [r4, #0]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	e7f5      	b.n	800a8a6 <__kernel_rem_pio2f+0x242>
 800a8ba:	1e74      	subs	r4, r6, #1
 800a8bc:	a808      	add	r0, sp, #32
 800a8be:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a8c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a8c6:	f10d 0c20 	add.w	ip, sp, #32
 800a8ca:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a8ce:	e77e      	b.n	800a7ce <__kernel_rem_pio2f+0x16a>
 800a8d0:	1e74      	subs	r4, r6, #1
 800a8d2:	a808      	add	r0, sp, #32
 800a8d4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a8d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a8dc:	e7f3      	b.n	800a8c6 <__kernel_rem_pio2f+0x262>
 800a8de:	ab08      	add	r3, sp, #32
 800a8e0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a8e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a8e8:	4318      	orrs	r0, r3
 800a8ea:	e7ab      	b.n	800a844 <__kernel_rem_pio2f+0x1e0>
 800a8ec:	f10c 0c01 	add.w	ip, ip, #1
 800a8f0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a8f4:	2c00      	cmp	r4, #0
 800a8f6:	d0f9      	beq.n	800a8ec <__kernel_rem_pio2f+0x288>
 800a8f8:	9b05      	ldr	r3, [sp, #20]
 800a8fa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a8fe:	eb0d 0003 	add.w	r0, sp, r3
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	18f4      	adds	r4, r6, r3
 800a906:	ab1c      	add	r3, sp, #112	; 0x70
 800a908:	1c77      	adds	r7, r6, #1
 800a90a:	384c      	subs	r0, #76	; 0x4c
 800a90c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a910:	4466      	add	r6, ip
 800a912:	42be      	cmp	r6, r7
 800a914:	f6ff af0b 	blt.w	800a72e <__kernel_rem_pio2f+0xca>
 800a918:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a91c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a920:	ee07 3a90 	vmov	s15, r3
 800a924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a928:	f04f 0c00 	mov.w	ip, #0
 800a92c:	ece4 7a01 	vstmia	r4!, {s15}
 800a930:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a970 <__kernel_rem_pio2f+0x30c>
 800a934:	46a1      	mov	r9, r4
 800a936:	458c      	cmp	ip, r1
 800a938:	dd07      	ble.n	800a94a <__kernel_rem_pio2f+0x2e6>
 800a93a:	ece0 7a01 	vstmia	r0!, {s15}
 800a93e:	3701      	adds	r7, #1
 800a940:	e7e7      	b.n	800a912 <__kernel_rem_pio2f+0x2ae>
 800a942:	9804      	ldr	r0, [sp, #16]
 800a944:	f04f 0c01 	mov.w	ip, #1
 800a948:	e7d2      	b.n	800a8f0 <__kernel_rem_pio2f+0x28c>
 800a94a:	ecfe 6a01 	vldmia	lr!, {s13}
 800a94e:	ed39 7a01 	vldmdb	r9!, {s14}
 800a952:	f10c 0c01 	add.w	ip, ip, #1
 800a956:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a95a:	e7ec      	b.n	800a936 <__kernel_rem_pio2f+0x2d2>
 800a95c:	3c01      	subs	r4, #1
 800a95e:	e775      	b.n	800a84c <__kernel_rem_pio2f+0x1e8>
 800a960:	0800ba58 	.word	0x0800ba58
 800a964:	0800ba2c 	.word	0x0800ba2c
 800a968:	43800000 	.word	0x43800000
 800a96c:	3b800000 	.word	0x3b800000
 800a970:	00000000 	.word	0x00000000
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	eeb0 0a48 	vmov.f32	s0, s16
 800a97a:	1a98      	subs	r0, r3, r2
 800a97c:	f000 fb34 	bl	800afe8 <scalbnf>
 800a980:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a968 <__kernel_rem_pio2f+0x304>
 800a984:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98c:	db19      	blt.n	800a9c2 <__kernel_rem_pio2f+0x35e>
 800a98e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a96c <__kernel_rem_pio2f+0x308>
 800a992:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a996:	aa08      	add	r2, sp, #32
 800a998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a99c:	1c74      	adds	r4, r6, #1
 800a99e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9a2:	3508      	adds	r5, #8
 800a9a4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a9a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a9b0:	ee10 3a10 	vmov	r3, s0
 800a9b4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a9b8:	ee17 3a90 	vmov	r3, s15
 800a9bc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a9c0:	e74b      	b.n	800a85a <__kernel_rem_pio2f+0x1f6>
 800a9c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a9c6:	aa08      	add	r2, sp, #32
 800a9c8:	ee10 3a10 	vmov	r3, s0
 800a9cc:	4634      	mov	r4, r6
 800a9ce:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a9d2:	e742      	b.n	800a85a <__kernel_rem_pio2f+0x1f6>
 800a9d4:	a808      	add	r0, sp, #32
 800a9d6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a9da:	9001      	str	r0, [sp, #4]
 800a9dc:	ee07 0a90 	vmov	s15, r0
 800a9e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9e4:	3a01      	subs	r2, #1
 800a9e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a9ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a9ee:	ed61 7a01 	vstmdb	r1!, {s15}
 800a9f2:	e73e      	b.n	800a872 <__kernel_rem_pio2f+0x20e>
 800a9f4:	ecfc 6a01 	vldmia	ip!, {s13}
 800a9f8:	ecb6 7a01 	vldmia	r6!, {s14}
 800a9fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aa00:	3001      	adds	r0, #1
 800aa02:	4550      	cmp	r0, sl
 800aa04:	dc01      	bgt.n	800aa0a <__kernel_rem_pio2f+0x3a6>
 800aa06:	4288      	cmp	r0, r1
 800aa08:	ddf4      	ble.n	800a9f4 <__kernel_rem_pio2f+0x390>
 800aa0a:	a858      	add	r0, sp, #352	; 0x160
 800aa0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa10:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800aa14:	3a01      	subs	r2, #1
 800aa16:	e730      	b.n	800a87a <__kernel_rem_pio2f+0x216>
 800aa18:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800aa1a:	2a02      	cmp	r2, #2
 800aa1c:	dc09      	bgt.n	800aa32 <__kernel_rem_pio2f+0x3ce>
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	dc2a      	bgt.n	800aa78 <__kernel_rem_pio2f+0x414>
 800aa22:	d043      	beq.n	800aaac <__kernel_rem_pio2f+0x448>
 800aa24:	f009 0007 	and.w	r0, r9, #7
 800aa28:	b059      	add	sp, #356	; 0x164
 800aa2a:	ecbd 8b04 	vpop	{d8-d9}
 800aa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa32:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d1f5      	bne.n	800aa24 <__kernel_rem_pio2f+0x3c0>
 800aa38:	ab30      	add	r3, sp, #192	; 0xc0
 800aa3a:	442b      	add	r3, r5
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4620      	mov	r0, r4
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f1a1 0104 	sub.w	r1, r1, #4
 800aa48:	dc51      	bgt.n	800aaee <__kernel_rem_pio2f+0x48a>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	2901      	cmp	r1, #1
 800aa4e:	f1a2 0204 	sub.w	r2, r2, #4
 800aa52:	dc5c      	bgt.n	800ab0e <__kernel_rem_pio2f+0x4aa>
 800aa54:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a970 <__kernel_rem_pio2f+0x30c>
 800aa58:	3304      	adds	r3, #4
 800aa5a:	2c01      	cmp	r4, #1
 800aa5c:	dc67      	bgt.n	800ab2e <__kernel_rem_pio2f+0x4ca>
 800aa5e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800aa62:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800aa66:	2f00      	cmp	r7, #0
 800aa68:	d167      	bne.n	800ab3a <__kernel_rem_pio2f+0x4d6>
 800aa6a:	edc8 6a00 	vstr	s13, [r8]
 800aa6e:	ed88 7a01 	vstr	s14, [r8, #4]
 800aa72:	edc8 7a02 	vstr	s15, [r8, #8]
 800aa76:	e7d5      	b.n	800aa24 <__kernel_rem_pio2f+0x3c0>
 800aa78:	aa30      	add	r2, sp, #192	; 0xc0
 800aa7a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a970 <__kernel_rem_pio2f+0x30c>
 800aa7e:	4413      	add	r3, r2
 800aa80:	4622      	mov	r2, r4
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	da24      	bge.n	800aad0 <__kernel_rem_pio2f+0x46c>
 800aa86:	b34f      	cbz	r7, 800aadc <__kernel_rem_pio2f+0x478>
 800aa88:	eef1 7a47 	vneg.f32	s15, s14
 800aa8c:	edc8 7a00 	vstr	s15, [r8]
 800aa90:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800aa94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa98:	aa31      	add	r2, sp, #196	; 0xc4
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	da20      	bge.n	800aae2 <__kernel_rem_pio2f+0x47e>
 800aaa0:	b10f      	cbz	r7, 800aaa6 <__kernel_rem_pio2f+0x442>
 800aaa2:	eef1 7a67 	vneg.f32	s15, s15
 800aaa6:	edc8 7a01 	vstr	s15, [r8, #4]
 800aaaa:	e7bb      	b.n	800aa24 <__kernel_rem_pio2f+0x3c0>
 800aaac:	aa30      	add	r2, sp, #192	; 0xc0
 800aaae:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a970 <__kernel_rem_pio2f+0x30c>
 800aab2:	4413      	add	r3, r2
 800aab4:	2c00      	cmp	r4, #0
 800aab6:	da05      	bge.n	800aac4 <__kernel_rem_pio2f+0x460>
 800aab8:	b10f      	cbz	r7, 800aabe <__kernel_rem_pio2f+0x45a>
 800aaba:	eef1 7a67 	vneg.f32	s15, s15
 800aabe:	edc8 7a00 	vstr	s15, [r8]
 800aac2:	e7af      	b.n	800aa24 <__kernel_rem_pio2f+0x3c0>
 800aac4:	ed33 7a01 	vldmdb	r3!, {s14}
 800aac8:	3c01      	subs	r4, #1
 800aaca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aace:	e7f1      	b.n	800aab4 <__kernel_rem_pio2f+0x450>
 800aad0:	ed73 7a01 	vldmdb	r3!, {s15}
 800aad4:	3a01      	subs	r2, #1
 800aad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aada:	e7d2      	b.n	800aa82 <__kernel_rem_pio2f+0x41e>
 800aadc:	eef0 7a47 	vmov.f32	s15, s14
 800aae0:	e7d4      	b.n	800aa8c <__kernel_rem_pio2f+0x428>
 800aae2:	ecb2 7a01 	vldmia	r2!, {s14}
 800aae6:	3301      	adds	r3, #1
 800aae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaec:	e7d6      	b.n	800aa9c <__kernel_rem_pio2f+0x438>
 800aaee:	edd1 7a00 	vldr	s15, [r1]
 800aaf2:	edd1 6a01 	vldr	s13, [r1, #4]
 800aaf6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800aafa:	3801      	subs	r0, #1
 800aafc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab00:	ed81 7a00 	vstr	s14, [r1]
 800ab04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab08:	edc1 7a01 	vstr	s15, [r1, #4]
 800ab0c:	e799      	b.n	800aa42 <__kernel_rem_pio2f+0x3de>
 800ab0e:	edd2 7a00 	vldr	s15, [r2]
 800ab12:	edd2 6a01 	vldr	s13, [r2, #4]
 800ab16:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ab1a:	3901      	subs	r1, #1
 800ab1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab20:	ed82 7a00 	vstr	s14, [r2]
 800ab24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab28:	edc2 7a01 	vstr	s15, [r2, #4]
 800ab2c:	e78e      	b.n	800aa4c <__kernel_rem_pio2f+0x3e8>
 800ab2e:	ed33 7a01 	vldmdb	r3!, {s14}
 800ab32:	3c01      	subs	r4, #1
 800ab34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab38:	e78f      	b.n	800aa5a <__kernel_rem_pio2f+0x3f6>
 800ab3a:	eef1 6a66 	vneg.f32	s13, s13
 800ab3e:	eeb1 7a47 	vneg.f32	s14, s14
 800ab42:	edc8 6a00 	vstr	s13, [r8]
 800ab46:	ed88 7a01 	vstr	s14, [r8, #4]
 800ab4a:	eef1 7a67 	vneg.f32	s15, s15
 800ab4e:	e790      	b.n	800aa72 <__kernel_rem_pio2f+0x40e>

0800ab50 <__kernel_sinf>:
 800ab50:	ee10 3a10 	vmov	r3, s0
 800ab54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ab5c:	da04      	bge.n	800ab68 <__kernel_sinf+0x18>
 800ab5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ab62:	ee17 3a90 	vmov	r3, s15
 800ab66:	b35b      	cbz	r3, 800abc0 <__kernel_sinf+0x70>
 800ab68:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ab6c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800abc4 <__kernel_sinf+0x74>
 800ab70:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800abc8 <__kernel_sinf+0x78>
 800ab74:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ab78:	eddf 7a14 	vldr	s15, [pc, #80]	; 800abcc <__kernel_sinf+0x7c>
 800ab7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ab80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800abd0 <__kernel_sinf+0x80>
 800ab84:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ab88:	eddf 7a12 	vldr	s15, [pc, #72]	; 800abd4 <__kernel_sinf+0x84>
 800ab8c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ab90:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ab94:	b930      	cbnz	r0, 800aba4 <__kernel_sinf+0x54>
 800ab96:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800abd8 <__kernel_sinf+0x88>
 800ab9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ab9e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800aba2:	4770      	bx	lr
 800aba4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800aba8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800abac:	eee0 7a86 	vfma.f32	s15, s1, s12
 800abb0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800abb4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800abdc <__kernel_sinf+0x8c>
 800abb8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800abbc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	2f2ec9d3 	.word	0x2f2ec9d3
 800abc8:	b2d72f34 	.word	0xb2d72f34
 800abcc:	3638ef1b 	.word	0x3638ef1b
 800abd0:	b9500d01 	.word	0xb9500d01
 800abd4:	3c088889 	.word	0x3c088889
 800abd8:	be2aaaab 	.word	0xbe2aaaab
 800abdc:	3e2aaaab 	.word	0x3e2aaaab

0800abe0 <__kernel_tanf>:
 800abe0:	b508      	push	{r3, lr}
 800abe2:	ee10 3a10 	vmov	r3, s0
 800abe6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800abea:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800abee:	eef0 7a40 	vmov.f32	s15, s0
 800abf2:	da17      	bge.n	800ac24 <__kernel_tanf+0x44>
 800abf4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800abf8:	ee17 1a10 	vmov	r1, s14
 800abfc:	bb41      	cbnz	r1, 800ac50 <__kernel_tanf+0x70>
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	4313      	orrs	r3, r2
 800ac02:	d108      	bne.n	800ac16 <__kernel_tanf+0x36>
 800ac04:	f000 f9a0 	bl	800af48 <fabsf>
 800ac08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac0c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac10:	eeb0 0a67 	vmov.f32	s0, s15
 800ac14:	bd08      	pop	{r3, pc}
 800ac16:	2801      	cmp	r0, #1
 800ac18:	d0fa      	beq.n	800ac10 <__kernel_tanf+0x30>
 800ac1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ac1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac22:	e7f5      	b.n	800ac10 <__kernel_tanf+0x30>
 800ac24:	494c      	ldr	r1, [pc, #304]	; (800ad58 <__kernel_tanf+0x178>)
 800ac26:	428a      	cmp	r2, r1
 800ac28:	db12      	blt.n	800ac50 <__kernel_tanf+0x70>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfb8      	it	lt
 800ac2e:	eef1 7a40 	vneglt.f32	s15, s0
 800ac32:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800ad5c <__kernel_tanf+0x17c>
 800ac36:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ac3a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800ad60 <__kernel_tanf+0x180>
 800ac3e:	bfb8      	it	lt
 800ac40:	eef1 0a60 	vneglt.f32	s1, s1
 800ac44:	ee70 0a60 	vsub.f32	s1, s0, s1
 800ac48:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800ac4c:	eddf 0a45 	vldr	s1, [pc, #276]	; 800ad64 <__kernel_tanf+0x184>
 800ac50:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad68 <__kernel_tanf+0x188>
 800ac54:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800ad6c <__kernel_tanf+0x18c>
 800ac58:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800ad70 <__kernel_tanf+0x190>
 800ac5c:	493e      	ldr	r1, [pc, #248]	; (800ad58 <__kernel_tanf+0x178>)
 800ac5e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ac62:	428a      	cmp	r2, r1
 800ac64:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ac68:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ac6c:	eddf 5a41 	vldr	s11, [pc, #260]	; 800ad74 <__kernel_tanf+0x194>
 800ac70:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ac74:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ad78 <__kernel_tanf+0x198>
 800ac78:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ac7c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ad7c <__kernel_tanf+0x19c>
 800ac80:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ac84:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800ad80 <__kernel_tanf+0x1a0>
 800ac88:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ac8c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800ad84 <__kernel_tanf+0x1a4>
 800ac90:	eee7 5a05 	vfma.f32	s11, s14, s10
 800ac94:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800ad88 <__kernel_tanf+0x1a8>
 800ac98:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ac9c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800ad8c <__kernel_tanf+0x1ac>
 800aca0:	eee5 5a07 	vfma.f32	s11, s10, s14
 800aca4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800ad90 <__kernel_tanf+0x1b0>
 800aca8:	eea5 5a87 	vfma.f32	s10, s11, s14
 800acac:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ad94 <__kernel_tanf+0x1b4>
 800acb0:	eee5 5a07 	vfma.f32	s11, s10, s14
 800acb4:	eeb0 7a46 	vmov.f32	s14, s12
 800acb8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800acbc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800acc0:	eeb0 6a60 	vmov.f32	s12, s1
 800acc4:	eea7 6a05 	vfma.f32	s12, s14, s10
 800acc8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ad98 <__kernel_tanf+0x1b8>
 800accc:	eee6 0a26 	vfma.f32	s1, s12, s13
 800acd0:	eee5 0a07 	vfma.f32	s1, s10, s14
 800acd4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800acd8:	db1d      	blt.n	800ad16 <__kernel_tanf+0x136>
 800acda:	ee06 0a90 	vmov	s13, r0
 800acde:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800ace2:	ee27 6a07 	vmul.f32	s12, s14, s14
 800ace6:	ee37 7a00 	vadd.f32	s14, s14, s0
 800acea:	179b      	asrs	r3, r3, #30
 800acec:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	f1c3 0301 	rsb	r3, r3, #1
 800acf8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800acfc:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800ad00:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ad04:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ad08:	ee07 3a90 	vmov	s15, r3
 800ad0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad10:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ad14:	e77c      	b.n	800ac10 <__kernel_tanf+0x30>
 800ad16:	2801      	cmp	r0, #1
 800ad18:	d01b      	beq.n	800ad52 <__kernel_tanf+0x172>
 800ad1a:	4b20      	ldr	r3, [pc, #128]	; (800ad9c <__kernel_tanf+0x1bc>)
 800ad1c:	ee17 2a10 	vmov	r2, s14
 800ad20:	401a      	ands	r2, r3
 800ad22:	ee06 2a10 	vmov	s12, r2
 800ad26:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ad2a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ad2e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ad32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ad36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad3a:	ee16 2a90 	vmov	r2, s13
 800ad3e:	4013      	ands	r3, r2
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ad48:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800ad4c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ad50:	e75e      	b.n	800ac10 <__kernel_tanf+0x30>
 800ad52:	eef0 7a47 	vmov.f32	s15, s14
 800ad56:	e75b      	b.n	800ac10 <__kernel_tanf+0x30>
 800ad58:	3f2ca140 	.word	0x3f2ca140
 800ad5c:	3f490fda 	.word	0x3f490fda
 800ad60:	33222168 	.word	0x33222168
 800ad64:	00000000 	.word	0x00000000
 800ad68:	b79bae5f 	.word	0xb79bae5f
 800ad6c:	38a3f445 	.word	0x38a3f445
 800ad70:	37d95384 	.word	0x37d95384
 800ad74:	3a1a26c8 	.word	0x3a1a26c8
 800ad78:	3b6b6916 	.word	0x3b6b6916
 800ad7c:	3cb327a4 	.word	0x3cb327a4
 800ad80:	3e088889 	.word	0x3e088889
 800ad84:	3895c07a 	.word	0x3895c07a
 800ad88:	398137b9 	.word	0x398137b9
 800ad8c:	3abede48 	.word	0x3abede48
 800ad90:	3c11371f 	.word	0x3c11371f
 800ad94:	3d5d0dd1 	.word	0x3d5d0dd1
 800ad98:	3eaaaaab 	.word	0x3eaaaaab
 800ad9c:	fffff000 	.word	0xfffff000

0800ada0 <atanf>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	ee10 5a10 	vmov	r5, s0
 800ada6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800adaa:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800adae:	eef0 7a40 	vmov.f32	s15, s0
 800adb2:	db10      	blt.n	800add6 <atanf+0x36>
 800adb4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800adb8:	dd04      	ble.n	800adc4 <atanf+0x24>
 800adba:	ee70 7a00 	vadd.f32	s15, s0, s0
 800adbe:	eeb0 0a67 	vmov.f32	s0, s15
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800aefc <atanf+0x15c>
 800adc8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800af00 <atanf+0x160>
 800adcc:	2d00      	cmp	r5, #0
 800adce:	bfd8      	it	le
 800add0:	eef0 7a40 	vmovle.f32	s15, s0
 800add4:	e7f3      	b.n	800adbe <atanf+0x1e>
 800add6:	4b4b      	ldr	r3, [pc, #300]	; (800af04 <atanf+0x164>)
 800add8:	429c      	cmp	r4, r3
 800adda:	dc10      	bgt.n	800adfe <atanf+0x5e>
 800addc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ade0:	da0a      	bge.n	800adf8 <atanf+0x58>
 800ade2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800af08 <atanf+0x168>
 800ade6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800adea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	dce2      	bgt.n	800adbe <atanf+0x1e>
 800adf8:	f04f 33ff 	mov.w	r3, #4294967295
 800adfc:	e013      	b.n	800ae26 <atanf+0x86>
 800adfe:	f000 f8a3 	bl	800af48 <fabsf>
 800ae02:	4b42      	ldr	r3, [pc, #264]	; (800af0c <atanf+0x16c>)
 800ae04:	429c      	cmp	r4, r3
 800ae06:	dc4f      	bgt.n	800aea8 <atanf+0x108>
 800ae08:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	dc41      	bgt.n	800ae94 <atanf+0xf4>
 800ae10:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ae14:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ae18:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ae2c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800af10 <atanf+0x170>
 800ae30:	eddf 5a38 	vldr	s11, [pc, #224]	; 800af14 <atanf+0x174>
 800ae34:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800af18 <atanf+0x178>
 800ae38:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ae3c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ae40:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800af1c <atanf+0x17c>
 800ae44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ae48:	eddf 5a35 	vldr	s11, [pc, #212]	; 800af20 <atanf+0x180>
 800ae4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ae50:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800af24 <atanf+0x184>
 800ae54:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ae58:	eddf 5a33 	vldr	s11, [pc, #204]	; 800af28 <atanf+0x188>
 800ae5c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ae60:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800af2c <atanf+0x18c>
 800ae64:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ae68:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800af30 <atanf+0x190>
 800ae6c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ae70:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800af34 <atanf+0x194>
 800ae74:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ae78:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800af38 <atanf+0x198>
 800ae7c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ae80:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ae84:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ae88:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ae8c:	d121      	bne.n	800aed2 <atanf+0x132>
 800ae8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae92:	e794      	b.n	800adbe <atanf+0x1e>
 800ae94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae98:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ae9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aea0:	2301      	movs	r3, #1
 800aea2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aea6:	e7be      	b.n	800ae26 <atanf+0x86>
 800aea8:	4b24      	ldr	r3, [pc, #144]	; (800af3c <atanf+0x19c>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	dc0b      	bgt.n	800aec6 <atanf+0x126>
 800aeae:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800aeb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeb6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800aeba:	2302      	movs	r3, #2
 800aebc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800aec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec4:	e7af      	b.n	800ae26 <atanf+0x86>
 800aec6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aeca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aece:	2303      	movs	r3, #3
 800aed0:	e7a9      	b.n	800ae26 <atanf+0x86>
 800aed2:	4a1b      	ldr	r2, [pc, #108]	; (800af40 <atanf+0x1a0>)
 800aed4:	491b      	ldr	r1, [pc, #108]	; (800af44 <atanf+0x1a4>)
 800aed6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aeda:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800aede:	ed93 0a00 	vldr	s0, [r3]
 800aee2:	ee37 7a40 	vsub.f32	s14, s14, s0
 800aee6:	ed92 0a00 	vldr	s0, [r2]
 800aeea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeee:	2d00      	cmp	r5, #0
 800aef0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aef4:	bfb8      	it	lt
 800aef6:	eef1 7a67 	vneglt.f32	s15, s15
 800aefa:	e760      	b.n	800adbe <atanf+0x1e>
 800aefc:	3fc90fdb 	.word	0x3fc90fdb
 800af00:	bfc90fdb 	.word	0xbfc90fdb
 800af04:	3edfffff 	.word	0x3edfffff
 800af08:	7149f2ca 	.word	0x7149f2ca
 800af0c:	3f97ffff 	.word	0x3f97ffff
 800af10:	3c8569d7 	.word	0x3c8569d7
 800af14:	3d4bda59 	.word	0x3d4bda59
 800af18:	bd6ef16b 	.word	0xbd6ef16b
 800af1c:	3d886b35 	.word	0x3d886b35
 800af20:	3dba2e6e 	.word	0x3dba2e6e
 800af24:	3e124925 	.word	0x3e124925
 800af28:	3eaaaaab 	.word	0x3eaaaaab
 800af2c:	bd15a221 	.word	0xbd15a221
 800af30:	bd9d8795 	.word	0xbd9d8795
 800af34:	bde38e38 	.word	0xbde38e38
 800af38:	be4ccccd 	.word	0xbe4ccccd
 800af3c:	401bffff 	.word	0x401bffff
 800af40:	0800ba64 	.word	0x0800ba64
 800af44:	0800ba74 	.word	0x0800ba74

0800af48 <fabsf>:
 800af48:	ee10 3a10 	vmov	r3, s0
 800af4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af50:	ee00 3a10 	vmov	s0, r3
 800af54:	4770      	bx	lr
	...

0800af58 <floorf>:
 800af58:	ee10 3a10 	vmov	r3, s0
 800af5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800af60:	3a7f      	subs	r2, #127	; 0x7f
 800af62:	2a16      	cmp	r2, #22
 800af64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af68:	dc2a      	bgt.n	800afc0 <floorf+0x68>
 800af6a:	2a00      	cmp	r2, #0
 800af6c:	da11      	bge.n	800af92 <floorf+0x3a>
 800af6e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800afd0 <floorf+0x78>
 800af72:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800af7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af7e:	dd05      	ble.n	800af8c <floorf+0x34>
 800af80:	2b00      	cmp	r3, #0
 800af82:	da23      	bge.n	800afcc <floorf+0x74>
 800af84:	4a13      	ldr	r2, [pc, #76]	; (800afd4 <floorf+0x7c>)
 800af86:	2900      	cmp	r1, #0
 800af88:	bf18      	it	ne
 800af8a:	4613      	movne	r3, r2
 800af8c:	ee00 3a10 	vmov	s0, r3
 800af90:	4770      	bx	lr
 800af92:	4911      	ldr	r1, [pc, #68]	; (800afd8 <floorf+0x80>)
 800af94:	4111      	asrs	r1, r2
 800af96:	420b      	tst	r3, r1
 800af98:	d0fa      	beq.n	800af90 <floorf+0x38>
 800af9a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800afd0 <floorf+0x78>
 800af9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afa2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800afa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afaa:	ddef      	ble.n	800af8c <floorf+0x34>
 800afac:	2b00      	cmp	r3, #0
 800afae:	bfbe      	ittt	lt
 800afb0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800afb4:	fa40 f202 	asrlt.w	r2, r0, r2
 800afb8:	189b      	addlt	r3, r3, r2
 800afba:	ea23 0301 	bic.w	r3, r3, r1
 800afbe:	e7e5      	b.n	800af8c <floorf+0x34>
 800afc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800afc4:	d3e4      	bcc.n	800af90 <floorf+0x38>
 800afc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800afca:	4770      	bx	lr
 800afcc:	2300      	movs	r3, #0
 800afce:	e7dd      	b.n	800af8c <floorf+0x34>
 800afd0:	7149f2ca 	.word	0x7149f2ca
 800afd4:	bf800000 	.word	0xbf800000
 800afd8:	007fffff 	.word	0x007fffff

0800afdc <nanf>:
 800afdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800afe4 <nanf+0x8>
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	7fc00000 	.word	0x7fc00000

0800afe8 <scalbnf>:
 800afe8:	ee10 3a10 	vmov	r3, s0
 800afec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800aff0:	d025      	beq.n	800b03e <scalbnf+0x56>
 800aff2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aff6:	d302      	bcc.n	800affe <scalbnf+0x16>
 800aff8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800affc:	4770      	bx	lr
 800affe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b002:	d122      	bne.n	800b04a <scalbnf+0x62>
 800b004:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <scalbnf+0xc8>)
 800b006:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b0b4 <scalbnf+0xcc>
 800b00a:	4298      	cmp	r0, r3
 800b00c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b010:	db16      	blt.n	800b040 <scalbnf+0x58>
 800b012:	ee10 3a10 	vmov	r3, s0
 800b016:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b01a:	3a19      	subs	r2, #25
 800b01c:	4402      	add	r2, r0
 800b01e:	2afe      	cmp	r2, #254	; 0xfe
 800b020:	dd15      	ble.n	800b04e <scalbnf+0x66>
 800b022:	ee10 3a10 	vmov	r3, s0
 800b026:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b0b8 <scalbnf+0xd0>
 800b02a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b0bc <scalbnf+0xd4>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	eeb0 7a67 	vmov.f32	s14, s15
 800b034:	bfb8      	it	lt
 800b036:	eef0 7a66 	vmovlt.f32	s15, s13
 800b03a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b03e:	4770      	bx	lr
 800b040:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b0c0 <scalbnf+0xd8>
 800b044:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b048:	4770      	bx	lr
 800b04a:	0dd2      	lsrs	r2, r2, #23
 800b04c:	e7e6      	b.n	800b01c <scalbnf+0x34>
 800b04e:	2a00      	cmp	r2, #0
 800b050:	dd06      	ble.n	800b060 <scalbnf+0x78>
 800b052:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b056:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b05a:	ee00 3a10 	vmov	s0, r3
 800b05e:	4770      	bx	lr
 800b060:	f112 0f16 	cmn.w	r2, #22
 800b064:	da1a      	bge.n	800b09c <scalbnf+0xb4>
 800b066:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b06a:	4298      	cmp	r0, r3
 800b06c:	ee10 3a10 	vmov	r3, s0
 800b070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b074:	dd0a      	ble.n	800b08c <scalbnf+0xa4>
 800b076:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b0b8 <scalbnf+0xd0>
 800b07a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b0bc <scalbnf+0xd4>
 800b07e:	eef0 7a40 	vmov.f32	s15, s0
 800b082:	2b00      	cmp	r3, #0
 800b084:	bf18      	it	ne
 800b086:	eeb0 0a47 	vmovne.f32	s0, s14
 800b08a:	e7db      	b.n	800b044 <scalbnf+0x5c>
 800b08c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b0c0 <scalbnf+0xd8>
 800b090:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b0c4 <scalbnf+0xdc>
 800b094:	eef0 7a40 	vmov.f32	s15, s0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	e7f3      	b.n	800b084 <scalbnf+0x9c>
 800b09c:	3219      	adds	r2, #25
 800b09e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b0a6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b0c8 <scalbnf+0xe0>
 800b0aa:	ee07 3a10 	vmov	s14, r3
 800b0ae:	e7c4      	b.n	800b03a <scalbnf+0x52>
 800b0b0:	ffff3cb0 	.word	0xffff3cb0
 800b0b4:	4c000000 	.word	0x4c000000
 800b0b8:	7149f2ca 	.word	0x7149f2ca
 800b0bc:	f149f2ca 	.word	0xf149f2ca
 800b0c0:	0da24260 	.word	0x0da24260
 800b0c4:	8da24260 	.word	0x8da24260
 800b0c8:	33000000 	.word	0x33000000

0800b0cc <_init>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	bf00      	nop
 800b0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0d2:	bc08      	pop	{r3}
 800b0d4:	469e      	mov	lr, r3
 800b0d6:	4770      	bx	lr

0800b0d8 <_fini>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	bf00      	nop
 800b0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0de:	bc08      	pop	{r3}
 800b0e0:	469e      	mov	lr, r3
 800b0e2:	4770      	bx	lr
